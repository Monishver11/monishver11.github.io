<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://monishver11.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://monishver11.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-04-30T23:50:04+00:00</updated><id>https://monishver11.github.io/feed.xml</id><title type="html">blank</title><subtitle>A clear, theory-focused approach to machine learning, designed to take you beyond the basics. </subtitle><entry><title type="html">Boosting and AdaBoost</title><link href="https://monishver11.github.io/blog/2025/adaboost/" rel="alternate" type="text/html" title="Boosting and AdaBoost"/><published>2025-04-27T18:04:00+00:00</published><updated>2025-04-27T18:04:00+00:00</updated><id>https://monishver11.github.io/blog/2025/adaboost</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/adaboost/"><![CDATA[<p>Boosting is a powerful machine learning technique that focuses on reducing the error rate of high-bias estimators by combining many weak learners, typically trained sequentially. Unlike bagging, which trains classifiers in parallel to reduce variance, boosting focuses on improving performance by training classifiers sequentially on reweighted data. The core idea behind boosting is simple: rather than using a large and complex model that may overfit, we train a series of simpler models (typically decision trees) to improve accuracy gradually.</p> <p>In contrast to bagging’s emphasis on parallel training of multiple models on different data subsets, boosting systematically reweights the training examples after each classifier is added, directing the model’s attention to examples that previous classifiers struggled with.</p> <p><strong>Key Intuition:</strong></p> <ul> <li>A <strong>weak learner</strong> is a classifier that performs slightly better than random chance. <ul> <li>Example: A rule such as “If <code class="language-plaintext highlighter-rouge">&lt;keyword&gt;</code> then spam” or “From a friend” then “not spam”.</li> </ul> </li> <li>Weak learners focus on different parts of the data, which may be misclassified by previous models.</li> <li>The final model is a weighted combination of these weak learners, with each learner contributing differently based on its performance.</li> </ul> <p>We will explore a specific boosting algorithm: <strong>AdaBoost</strong> (Freund &amp; Schapire, 1997), which is commonly used with decision trees as weak learners.</p> <hr/> <h5 id="adaboost-setting"><strong>AdaBoost: Setting</strong></h5> <p>For binary classification, where the target variable \(Y = \{-1, 1\}\), AdaBoost uses a base hypothesis space \(H = \{h : X \rightarrow \{-1, 1\}\}\). Common choices for weak learners include:</p> <ul> <li><strong>Decision stumps</strong>: A tree with a single split.</li> <li><strong>Decision trees</strong> with a few terminal nodes.</li> <li><strong>Linear decision functions</strong>.</li> </ul> <p><strong>Weighted Training Set</strong></p> <p>Each weak learner in AdaBoost is trained on a <strong>weighted</strong> version of the training data. The training set \(D = \{(x_1, y_1), \dots, (x_n, y_n)\}\) has weights associated with each example: \(w_1, w_2, \dots, w_n\).</p> <p>The <strong>weighted empirical risk</strong> is defined as:</p> \[\hat{R}_n^w(f) \overset{\text{def}}{=} \frac{1}{W} \sum_{i=1}^{n} w_i \cdot \ell(f(x_i), y_i)\] <p>where \(W = \sum_{i=1}^{n} w_i\), and \(\ell\) is a loss function (typically 0-1 loss in the case of classification).</p> <p>Examples with larger weights have a more significant impact on the loss, guiding the model to focus on harder-to-classify examples.</p> <h5 id="adaboost-sketch-of-the-algorithm"><strong>AdaBoost: Sketch of the Algorithm</strong></h5> <p>AdaBoost works by combining several weak learners to create a strong classifier.<br/> Here’s the high-level process:</p> <ol> <li><strong>Start by assigning equal weights</strong> to all training examples:</li> </ol> \[w_1 = w_2 = \cdots = w_n = 1\] <ol> <li> <p><strong>For each boosting round</strong> \(m = 1, \dots, M\) (where \(M\) is the number of classifiers we want to train):</p> <ul> <li><strong>Train a base classifier</strong> \(G_m(x)\) on the <strong>current weighted</strong> training data.</li> <li><strong>Evaluate</strong> how well \(G_m(x)\) performs.</li> <li><strong>Increase the weights</strong> of examples that were <strong>misclassified</strong>, so the next classifier focuses more on those harder examples.</li> </ul> </li> <li> <p><strong>Aggregate the predictions</strong> from all classifiers, weighted by their accuracy:</p> </li> </ol> \[G(x) = \text{sign}\left( \sum_{m=1}^{M} \alpha_m G_m(x) \right)\] <p>The key idea is: <strong>the more accurate a base learner, the higher its influence in the final prediction</strong>.</p> <h5 id="adaboost-how-to-compute-classifier-weights"><strong>AdaBoost: How to Compute Classifier Weights</strong></h5> <p>In AdaBoost, each base classifier \(G_m\) contributes to the final prediction with a weight \(\alpha_m\).<br/> We want the following:</p> <ul> <li>\(\alpha_m\) should be <strong>non-negative</strong>.</li> <li>\(\alpha_m\) should be <strong>larger</strong> when \(G_m\) fits its weighted training data well.</li> </ul> <p>The <strong>weighted 0-1 error</strong> of the base classifier \(G_m(x)\) is computed as:</p> \[\text{err}_m = \frac{1}{W} \sum_{i=1}^{n} w_i \, \mathbf{1}\left[ y_i \neq G_m(x_i) \right]\] <p>where:</p> <ul> <li>\(W = \sum_{i=1}^{n} w_i\) is the total sum of weights.</li> <li>\(\mathbf{1}[\cdot]\) is an indicator function, equal to 1 if the condition is true, and 0 otherwise.</li> </ul> <p>Since the error is normalized by the total weight, we always have:</p> \[\text{err}_m \in [0, 1]\] <p>Once we know the error \(\text{err}_m\), we compute the weight of the classifier \(G_m\) as:</p> \[\alpha_m = \ln\left( \frac{1 - \text{err}_m}{\text{err}_m} \right)\] <div class="row justify-content-center"> <div class="col-sm-6 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ensemble-4-480.webp 480w,/assets/img/ensemble-4-800.webp 800w,/assets/img/ensemble-4-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/ensemble-4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="ensemble-4" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Higher weighted error ⇒ lower weight </div> <p><strong>Interpretation</strong>:</p> <ul> <li>If \(\text{err}_m\) is <strong>small</strong> (good classifier), then \(\alpha_m\) is <strong>large</strong>.</li> <li>If \(\text{err}_m\) is <strong>large</strong> (poor classifier), then \(\alpha_m\) is <strong>small</strong>.</li> </ul> <p>Thus, <strong>more accurate classifiers get higher voting power</strong> in the final decision.</p> <h5 id="adaboost-how-example-weights-are-updated"><strong>AdaBoost: How Example Weights Are Updated</strong></h5> <p>After training a base classifier, we update the weights of the examples to <strong>focus more on mistakes</strong>.</p> <p>Suppose \(w_i\) is the weight of example \(x_i\) <strong>before</strong> training \(G_m\). After training:</p> <ul> <li>If \(G_m\) <strong>correctly classifies</strong> \(x_i\), <strong>keep \(w_i\) the same</strong>.</li> <li>If \(G_m\) <strong>misclassifies</strong> \(x_i\), <strong>increase \(w_i\)</strong>:</li> </ul> \[w_i \leftarrow w_i \times e^{\alpha_m}\] <p>This adjustment ensures that:</p> <ul> <li><strong>Hard examples</strong> (previously misclassified) <strong>get more weight</strong> and are more likely to be correctly classified by future classifiers.</li> <li>If \(G_m\) is a <strong>strong classifier</strong> (large \(\alpha_m\)), the weight update for misclassified examples is <strong>more significant</strong>.</li> </ul> <p>Alternatively, you can think of it this way:</p> \[w_i \leftarrow w_i \times \left( \frac{1}{\text{err}_m} - 1 \right)\] <p>This reweighting step is what drives AdaBoost to sequentially <strong>correct</strong> the errors of the previous learners.</p> <div class="row justify-content-center"> <div class="col-sm-6 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ensemble-5-480.webp 480w,/assets/img/ensemble-5-800.webp 800w,/assets/img/ensemble-5-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/ensemble-5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="ensemble-5" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> AdaBoost: Schematic </div> <p><strong>Intuition Behind AdaBoost: Analogy</strong></p> <p>To better internalize AdaBoost, imagine the process as <strong>training a team of tutors</strong> to help a student (the model) pass an exam (classification task):</p> <ul> <li> <p><strong>First Tutor</strong>: The first tutor teaches the entire syllabus equally. After the first test, they realize the student struggles with some topics (mistakes/misclassifications).</p> </li> <li> <p><strong>Second Tutor</strong>: The second tutor <strong>focuses more heavily</strong> on the topics where the student made mistakes, spending extra time on them.</p> </li> <li> <p><strong>Third Tutor</strong>: The third tutor notices there are still lingering problems on certain topics, so they <strong>focus even more narrowly</strong> on the hardest concepts.</p> </li> <li> <p><strong>And so on…</strong></p> </li> </ul> <p>Each tutor is <strong>not perfect</strong>, but by <strong>combining their focused efforts</strong>, the student gets a much more complete understanding — better than what any single tutor could achieve alone.</p> <hr/> <h5 id="simple-mathematical-example"><strong>Simple Mathematical Example</strong></h5> <p>Let’s walk through a <strong>tiny AdaBoost example</strong> to see everything in action.</p> <p>Suppose we have 4 data points:</p> <hr/> <table> <thead> <tr> <th style="text-align: center">\(x_i\)</th> <th style="text-align: center">\(y_i\) (True Label)</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">1</td> <td style="text-align: center">+1</td> </tr> <tr> <td style="text-align: center">2</td> <td style="text-align: center">+1</td> </tr> <tr> <td style="text-align: center">3</td> <td style="text-align: center">-1</td> </tr> <tr> <td style="text-align: center">4</td> <td style="text-align: center">-1</td> </tr> </tbody> </table> <hr/> <p><strong>Step 1: Initialization</strong></p> <p>All examples start with <strong>equal weight</strong>:</p> \[w_i = \frac{1}{4} = 0.25 \quad \text{for each } i\] <p><strong>Step 2: First Classifier \(G_1(x)\)</strong></p> <p>Suppose \(G_1\) predicts:</p> <hr/> <table> <thead> <tr> <th style="text-align: center">\(x_i\)</th> <th style="text-align: center">\(G_1(x_i)\)</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">1</td> <td style="text-align: center">+1</td> </tr> <tr> <td style="text-align: center">2</td> <td style="text-align: center">-1 ❌</td> </tr> <tr> <td style="text-align: center">3</td> <td style="text-align: center">-1</td> </tr> <tr> <td style="text-align: center">4</td> <td style="text-align: center">-1</td> </tr> </tbody> </table> <hr/> <p>It misclassifies \(x_2\).</p> <p>Compute weighted error:</p> \[\text{err}_1 = \frac{w_2}{\sum_{i=1}^{4} w_i} = \frac{0.25}{1} = 0.25\] <p>Classifier weight:</p> \[\alpha_1 = \ln\left( \frac{1 - 0.25}{0.25} \right) = \ln(3) \approx 1.0986\] <p><strong>Step 3: Update Weights</strong></p> <p>Increase the weight for the misclassified example:</p> <ul> <li>For correctly classified points \(w_i\) stays the same.</li> <li>For misclassified points:</li> </ul> \[w_i \leftarrow w_i \times e^{\alpha_1}\] <p>Thus:</p> <ul> <li>\(w_2\) (misclassified) becomes:</li> </ul> \[w_2' = 0.25 \times e^{1.0986} \approx 0.25 \times 3 = 0.75\] <ul> <li>\(w_1, w_3, w_4\) stay \(0.25\).</li> </ul> <p><strong>Normalization step</strong> (so weights sum to 1):</p> <p>Total weight:</p> \[W' = 0.25 + 0.75 + 0.25 + 0.25 = 1.5\] <p>New normalized weights:</p> <hr/> <table> <thead> <tr> <th style="text-align: center">\(x_i\)</th> <th style="text-align: center">New Weight</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">1</td> <td style="text-align: center">\(\frac{0.25}{1.5} \approx 0.167\)</td> </tr> <tr> <td style="text-align: center">2</td> <td style="text-align: center">\(\frac{0.75}{1.5} = 0.5\)</td> </tr> <tr> <td style="text-align: center">3</td> <td style="text-align: center">\(\frac{0.25}{1.5} \approx 0.167\)</td> </tr> <tr> <td style="text-align: center">4</td> <td style="text-align: center">\(\frac{0.25}{1.5} \approx 0.167\)</td> </tr> </tbody> </table> <hr/> <p><strong>Step 4: Second Classifier \(G_2(x)\)</strong></p> <p>Train next classifier \(G_2\) <strong>on the new weights</strong>.</p> <p>Now, \(x_2\) has the highest weight (0.5), so the model focuses more on predicting \(x_2\) correctly!</p> <p>(And the process repeats…)</p> <p><strong>Key Takeaways</strong></p> <ul> <li>AdaBoost <strong>punishes mistakes</strong> by increasing weights of misclassified examples.</li> <li>Future classifiers <strong>focus</strong> on the harder examples.</li> <li>Classifier weight \(\alpha\) depends on how good the classifier is (lower error → higher weight).</li> <li>Final prediction is:</li> </ul> \[G(x) = \text{sign}\left( \alpha_1 G_1(x) + \alpha_2 G_2(x) + \cdots + \alpha_M G_M(x) \right)\] <p>Thus, even if each individual classifier is weak, <strong>together they become strong</strong>!</p> <hr/> <h5 id="adaboost-algorithm"><strong>AdaBoost: Algorithm</strong></h5> <p>Given a training set:</p> \[\mathcal{D} = \{(x_1, y_1), \ldots, (x_n, y_n)\}.\] <p>The AdaBoost procedure works as follows:</p> <p><strong>Steps:</strong></p> <ol> <li> <p><strong>Initialize observation weights</strong>:</p> <p>Set:</p> \[w_i = 1, \quad \text{for all } i = 1, 2, \ldots, n.\] </li> <li> <p><strong>For \(m = 1\) to \(M\) (number of base classifiers)</strong>:</p> <ul> <li> <p><strong>Train</strong> a base learner on the weighted training data, obtaining a classifier \(G_m(x)\).</p> </li> <li> <p><strong>Compute the weighted empirical 0-1 risk</strong>:</p> </li> </ul> \[\text{err}_m = \frac{1}{W} \sum_{i=1}^{n} w_i \, \mathbf{1}[y_i \neq G_m(x_i)],\] <p>where:</p> \[W = \sum_{i=1}^{n} w_i.\] <ul> <li> <p><strong>Compute classifier weight</strong>:</p> <p>Assign a weight to the classifier based on its error:</p> \[\alpha_m = \ln\left( \frac{1 - \text{err}_m}{\text{err}_m} \right).\] </li> <li> <p><strong>Update example weights</strong>:</p> <p>Update the training example weights to emphasize misclassified examples:</p> \[w_i \leftarrow w_i \times \exp\left( \alpha_m \mathbf{1}[y_i \neq G_m(x_i)] \right).\] </li> </ul> </li> <li> <p><strong>Final classifier</strong>:</p> <p>After \(M\) rounds, return the final classifier:</p> \[G(x) = \text{sign}\left( \sum_{m=1}^{M} \alpha_m G_m(x) \right).\] </li> </ol> <p><strong>To put it shortly:</strong></p> <ul> <li><strong>Start</strong>: Treat every sample equally.</li> <li><strong>Learn</strong>: Focus the learner on samples that previous classifiers got wrong.</li> <li><strong>Combine</strong>: Build a strong final classifier by combining the weighted votes of all the base classifiers.</li> </ul> <p>Each \(\alpha_m\) ensures that <strong>better-performing classifiers get a stronger say</strong> in the final decision!</p> <hr/> <h5 id="weighted-error-vs-classifiers-true-error"><strong>Weighted Error vs. Classifier’s True Error</strong></h5> <p>In AdaBoost, the error \(\text{err}_m\) computed at each iteration is the <strong>weighted error</strong> based on the current distribution of sample weights, <strong>not</strong> the classifier’s true (unweighted) error rate over the data.</p> <p>This distinction is important: a classifier might have a low overall misclassification rate but could still have a <strong>high weighted error</strong> if it misclassifies examples that currently have large weights (i.e., harder or previously misclassified points).</p> <p>AdaBoost intentionally shifts focus toward difficult examples, so <strong>do not confuse the weighted empirical error used in boosting with the base learner’s standard classification error</strong>.</p> <h5 id="how-is-the-base-learner-optimized-at-each-iteration"><strong>How is the Base Learner Optimized at Each Iteration?</strong></h5> <p>At each iteration \(m\) of AdaBoost, the goal is to find the base classifier \(G_m(x)\) that <strong>minimizes the weighted empirical error</strong>:</p> \[\text{err}_m = \frac{1}{W} \sum_{i=1}^{n} w_i \, \mathbf{1}[y_i \neq G_m(x_i)].\] <p>Here’s the key idea:</p> <ul> <li>We <strong>don’t</strong> try to find a classifier that perfectly fits the original (unweighted) training data.</li> <li>Instead, we <strong>optimize for the current weighted dataset</strong> — meaning examples with larger weights influence the learning process more.</li> <li>The base learner is trained to focus on <strong>minimizing mistakes</strong> on the examples that have been <strong>harder to classify</strong> so far.</li> </ul> <p><strong>Typical Optimization Process</strong>:</p> <ul> <li>If using <strong>decision stumps</strong> (one-level decision trees), the learner searches for the split that minimizes the weighted classification error.</li> <li>In general, the base model uses the <strong>sample weights</strong> as importance scores to guide its fitting.</li> </ul> <p>Thus, at each step, AdaBoost adapts the learning problem to focus on what the previous classifiers struggled with, gradually building a strong ensemble.</p> <div class="row justify-content-center"> <div class="col-sm-4 mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ensemble-6-480.webp 480w,/assets/img/ensemble-6-800.webp 800w,/assets/img/ensemble-6-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/ensemble-6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="ensemble-6" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm-4 mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ensemble-7-480.webp 480w,/assets/img/ensemble-7-800.webp 800w,/assets/img/ensemble-7-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/ensemble-7.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="ensemble-7" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm-4 mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ensemble-8-480.webp 480w,/assets/img/ensemble-8-800.webp 800w,/assets/img/ensemble-8-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/ensemble-8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="ensemble-8" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> AdaBoost with Decision Stumps. (I)After 1 round, (II)After 3 rounds &amp; (III)After 120 rounds. Size of plus sign represents weight of example. Blackness represents preference for red class; whiteness represents preference for blue class. </div> <h5 id="does-adaboost-overfit"><strong>Does AdaBoost Overfit?</strong></h5> <p>While boosting generally performs well, it’s natural to ask: <strong>Does AdaBoost overfit with many rounds?</strong></p> <div class="row justify-content-center"> <div class="col-sm-6 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ensemble-9-480.webp 480w,/assets/img/ensemble-9-800.webp 800w,/assets/img/ensemble-9-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/ensemble-9.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="ensemble-9" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> General learning curves if we were overfitting </div> <div class="row justify-content-center"> <div class="col-sm-6 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ensemble-10-480.webp 480w,/assets/img/ensemble-10-800.webp 800w,/assets/img/ensemble-10-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/ensemble-10.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="ensemble-10" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Learning Curves for AdaBoost </div> <p>The learning curves for AdaBoost typically show that the test error continues to decrease even after the training error reaches zero, which indicates that AdaBoost is <strong>resistant to overfitting</strong>. This is one of the reasons why AdaBoost is so powerful: it can maintain good generalization even with many weak learners.</p> <h5 id="adaboost-in-real-world-applications"><strong>AdaBoost in Real-World Applications</strong></h5> <p>A famous application of AdaBoost is <strong>face detection</strong>, as demonstrated in Viola &amp; Jones (2001). In this case, AdaBoost uses pre-defined weak classifiers and employs a smart way of doing real-time inference, even on hardware from 2001. This demonstrates the efficiency and applicability of AdaBoost in practical scenarios.</p> <h5 id="wrapping-up"><strong>Wrapping Up</strong></h5> <p>Boosting is an ensemble technique aimed at reducing bias by combining multiple weak learners. The sequential nature of boosting means that each learner focuses on errors made by previous ones, ultimately improving the model’s performance. <strong>AdaBoost</strong> is a specific and highly effective boosting algorithm that can be used with decision trees as weak learners to achieve powerful classification results.</p> <p><strong>Next Steps:</strong></p> <p>In the next section, we’ll explore the <strong>objective function</strong> of AdaBoost in more detail, along with some <strong>generalizations</strong> to other loss functions and the popular <strong>Gradient Boosting</strong> algorithm.</p>]]></content><author><name></name></author><category term="ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[This blog post provides an in-depth overview of boosting techniques, focusing on AdaBoost, explaining its key concepts, algorithm steps, and real-world applications in classification tasks.]]></summary></entry><entry><title type="html">Random Forests</title><link href="https://monishver11.github.io/blog/2025/random-forest/" rel="alternate" type="text/html" title="Random Forests"/><published>2025-04-27T16:14:00+00:00</published><updated>2025-04-27T16:14:00+00:00</updated><id>https://monishver11.github.io/blog/2025/random-forest</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/random-forest/"><![CDATA[<p>After understanding the power of bagging to reduce variance by combining multiple models, a natural question arises: <strong>Can we make this idea even stronger?</strong></p> <p>Bagging helps, but when the individual models (like decision trees) are still correlated, variance reduction is not as efficient as it could be. This brings us to the motivation for a more advanced ensemble method — <strong>Random Forests</strong>.</p> <hr/> <h5 id="motivating-random-forests-handling-correlated-trees"><strong>Motivating Random Forests: Handling Correlated Trees</strong></h5> <p>Let’s revisit an important insight we learned from bagging.</p> <p>Suppose we have independent estimates \(\hat{\theta}_1, \dots, \hat{\theta}_n\) satisfying:</p> \[\mathbb{E}[\hat{\theta}_i] = \theta, \quad \text{Var}(\hat{\theta}_i) = \sigma^2\] <p>Then:</p> <ul> <li> <p>The mean of the estimates is:</p> \[\mathbb{E}\left[\frac{1}{n} \sum_{i=1}^n \hat{\theta}_i\right] = \theta\] </li> <li> <p>And the variance of the mean is:</p> \[\text{Var}\left(\frac{1}{n} \sum_{i=1}^n \hat{\theta}_i\right) = \frac{\sigma^2}{n}\] </li> </ul> <p>This shows that averaging independent estimators reduces variance effectively.</p> <p>However, in practice, if the estimators \(\hat{\theta}_i\) are <strong>correlated</strong>, the variance reduction is <strong>less effective</strong>. Why is that? Let’s break it down.</p> <p><strong>What Happens When Estimators are Correlated?</strong></p> <p>To understand this, consider that each estimator \(\hat{\theta}_i\) has some <strong>variance</strong> on its own. If these estimators are independent, averaging them reduces the total variance by a factor of \(\frac{1}{n}\) (as we saw earlier in bagging). This is because <strong>independence</strong> means that the errors or fluctuations in one model don’t affect the others.</p> <p>But, when estimators are <strong>correlated</strong>, this doesn’t hold true anymore. In fact, the variance reduction becomes less effective. The reason for this is that correlation introduces <strong>covariance terms</strong>.</p> <ul> <li><strong>Covariance</strong> is a measure of how much two random variables change together. If two estimators are correlated, the error in one model is likely to be reflected in the other. This reduces the benefit of averaging since both estimators will likely “make similar mistakes.”</li> </ul> <p><strong>A Simple Example</strong></p> <p>Imagine you’re trying to estimate the weight of an object. Suppose you have two different methods (estimators) to measure this weight:</p> <ol> <li><strong>Estimator 1</strong> measures the weight but has some error due to a systematic bias (e.g., the scale is always slightly off by 1kg).</li> <li><strong>Estimator 2</strong> is another scale that also has a bias, but it happens to be the same as Estimator 1.</li> </ol> <p>Now, if these two estimators have <strong>the same bias</strong>, they are correlated because they both tend to make the same mistake. Averaging the two estimations won’t help much because both estimators have the same error. So, the resulting variance after averaging will not reduce as much as we would expect with independent estimators.</p> <p><strong>Why Are Bootstrap Samples Not Fully Independent?</strong></p> <p>Now, let’s return to bagging, where we train multiple trees on <strong>bootstrap samples</strong>.</p> <ul> <li>A <strong>bootstrap sample</strong> is generated by randomly sampling with replacement from the original dataset. This means that each point in the original dataset has a chance of being included multiple times, and some points may not be included at all.</li> <li>These <strong>bootstrap samples</strong> are independent <strong>from each other</strong> in terms of how they are created, but they are <strong>not independent</strong> from the true population distribution \(P_{X \times Y}\).</li> </ul> <p>Why? Because all the bootstrap samples come from the <strong>same original dataset</strong>, which means they contain the same underlying distribution. If the original dataset has certain features that are particularly strong predictors, these features will often appear at the top of many decision trees across different bootstrap samples. This can make the individual trees more <strong>similar</strong> to each other than we would like.</p> <p>For example, consider a dataset where the feature “age” strongly predicts whether a customer will buy a product. If all the bootstrap samples include “age” as a key feature, the decision trees trained on these samples will end up making similar decisions based on “age”. This creates <strong>correlation</strong> between the predictions of the trees because they are all making similar splits based on the same strong features.</p> <p><strong>What Does This Mean for Bagging?</strong></p> <p>In bagging, since the trees are still correlated (due to the shared features across bootstrap samples), the reduction in variance is not as significant as we would expect if the trees were fully independent. This limits the effectiveness of bagging.</p> <p><strong>Can We Reduce This Correlation?</strong></p> <p>This is the key challenge addressed by <strong>Random Forests</strong>. By introducing additional randomness into the process — specifically, by randomly selecting a subset of features at each node when building each tree — we can reduce the correlation between the trees. This leads to a more diverse set of trees, improving the overall performance of the ensemble.</p> <p>Thus, reducing the correlation between trees is one of the main innovations of Random Forests that makes it more powerful than bagging alone.</p> <hr/> <p>To clearly understand how correlation between trees impacts variance reduction, let’s break down the two scenarios with a full mathematical setup.</p> <h5 id="setup"><strong>Setup:</strong></h5> <ul> <li>Suppose we have a dataset \(D = \{x_1, x_2, \dots, x_n\}\), where each \(x_i\) is a feature vector and each corresponding output \(y_i\) is from a true population distribution \(P_{X \times Y}\).</li> <li>We are training decision trees, and we want to understand how their predictions are affected by the sampling method.</li> <li>We’ll define two key scenarios: <ul> <li><strong>Independent sampling</strong> (ideal case): Each tree in the ensemble is trained on independently drawn samples from the true population \(P_{X \times Y}\).</li> <li><strong>Bootstrap sampling</strong>: Each tree is trained on a bootstrap sample, which is created by sampling <em>with replacement</em> from the original dataset \(D\).</li> </ul> </li> </ul> <p><strong>Case 1: Independent Sampling</strong></p> <p>Let’s assume that we have two estimators (trees) \(\hat{f}_1(x)\) and \(\hat{f}_2(x)\), both trained independently from the true population. Their predictions are unbiased, and their variances are \(\text{Var}(\hat{f}_1(x)) = \sigma_1^2\) and \(\text{Var}(\hat{f}_2(x)) = \sigma_2^2\). Since they are trained on independent samples, the covariance between their predictions is zero:</p> \[\text{Cov}(\hat{f}_1(x), \hat{f}_2(x)) = 0\] <p>This means that the two trees are completely independent of each other. When we combine their predictions (by averaging), we can reduce the overall variance of the ensemble:</p> \[\text{Var}(\hat{f}_{\text{avg}}(x)) = \frac{1}{2} \left( \text{Var}(\hat{f}_1(x)) + \text{Var}(\hat{f}_2(x)) \right) = \frac{\sigma_1^2 + \sigma_2^2}{2}\] <p>Since the predictions are independent, the variance reduces nicely without any issues.</p> <p><strong>Case 2: Bootstrap Sampling</strong></p> <p>Now, let’s look at the case of bootstrap sampling. Each decision tree is trained on a bootstrap sample of the original data, which means that the training samples are drawn <em>with replacement</em> from the dataset. This results in <strong>correlated trees</strong> because:</p> <ul> <li>Bootstrap samples are independent of each other (each sample is drawn from the dataset), but they are <strong>not independent</strong> of the true population distribution \(P_{X \times Y}\).</li> <li>As a result, the predictions from different trees \(\hat{f}_1(x)\) and \(\hat{f}_2(x)\) are <strong>correlated</strong> with each other.</li> </ul> <p>Let’s define the correlation coefficient between \(\hat{f}_1(x)\) and \(\hat{f}_2(x)\) as \(\rho\), where \(0 &lt; \rho &lt; 1\). This correlation arises because both trees are trained on slightly different subsets of the data, which means they will make similar predictions on the same inputs.</p> <p>Now, the <strong>variance of the ensemble</strong> will depend on both the variance of individual trees and the covariance between them:</p> \[\text{Var}(\hat{f}_{\text{avg}}(x)) = \frac{1}{2} \left( \text{Var}(\hat{f}_1(x)) + \text{Var}(\hat{f}_2(x)) \right) + \text{Cov}(\hat{f}_1(x), \hat{f}_2(x))\] <p>Since \(\text{Cov}(\hat{f}_1(x), \hat{f}_2(x)) = \rho \cdot \sigma_1 \cdot \sigma_2\), we get:</p> \[\text{Var}(\hat{f}_{\text{avg}}(x)) = \frac{\sigma_1^2 + \sigma_2^2}{2} + \rho \cdot \sigma_1 \cdot \sigma_2\] <p>Notice that the correlation \(\rho\) causes the variance to <strong>not reduce as effectively</strong> as in the independent case. The more correlated the trees are, the less variance reduction we achieve, and the ensemble may not perform as well as expected.</p> <p><strong>Key Differences and Conclusion:</strong></p> <ol> <li> <p><strong>Independent Sampling</strong>: When the trees are independent, we see <strong>maximum variance reduction</strong> because there is no covariance between the models. The variance of the average prediction is simply the average of the individual variances.</p> </li> <li> <p><strong>Bootstrap Sampling</strong>: When the trees are trained on bootstrap samples, the <strong>correlation</strong> between the trees reduces the potential for variance reduction. This is because the trees share a common structure due to being trained on similar data. The variance of the average prediction is larger because of the covariance term.</p> </li> </ol> <p>This setup clearly shows how correlation between trees in bootstrap sampling impacts the variance reduction in bagging. The next step to address this issue is through <strong>Random Forests</strong>, where we introduce further randomness to decorrelate the trees.</p> <hr/> <h5 id="random-forests"><strong>Random Forests</strong></h5> <p>Random Forests build upon the foundation of bagging decision trees, but introduce an extra layer of randomness to improve performance and reduce correlation between trees. Here’s how:</p> <ul> <li><strong>Grow trees independently</strong>, just as in bagging, by training each tree on a different bootstrap sample.</li> <li><strong>At each split</strong> in the tree, instead of considering all available features, <strong>randomly select a subset of \(m\) features</strong> and split based only on these.</li> </ul> <p><strong>What Does This Change Do?</strong></p> <p>This adjustment has a significant impact on the performance of the ensemble:</p> <ul> <li><strong>Reduces correlation between trees</strong>: By limiting the set of features considered at each split, trees become less likely to make the same decisions and thus become less correlated with each other.</li> <li><strong>Increases diversity among trees</strong>: Different features lead to different decision boundaries in each tree, creating a diverse set of models that are not overly similar to each other.</li> <li><strong>Improves ensembling effectiveness</strong>: With greater diversity, the ensemble as a whole becomes stronger. The averaged predictions from these less correlated trees lead to more robust and accurate results.</li> </ul> <p><strong>Typical Values for \(m\)</strong></p> <p>The parameter \(m\) determines the number of features considered at each split. The value of \(m\) is chosen based on the type of task:</p> <ul> <li> <p>For <strong>classification tasks</strong>, it is common to set:<br/> \(m \approx \sqrt{p}\)</p> </li> <li> <p>For <strong>regression tasks</strong>, we typically set:<br/> \(m \approx \frac{p}{3}\)</p> </li> </ul> <p>(where \(p\) is the total number of features.)</p> <p>These values help strike a balance between randomness and the amount of information available at each decision node.</p> <div class="row justify-content-center"> <div class="col-sm-6 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ensemble-3-480.webp 480w,/assets/img/ensemble-3-800.webp 800w,/assets/img/ensemble-3-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/ensemble-3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="ensemble-3" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Random Forests: Effect of Feature Subset Size (m) </div> <p><strong>Important Note:</strong></p> <p>If you set \(m = p\) (i.e., if each tree is allowed to use all the features at each split), then Random Forests will behave just like <strong>bagging</strong> — i.e., there will be no additional randomness, and the trees will be fully correlated.</p> <p>By introducing this random selection of features, <strong>Random Forests</strong> overcome one of the limitations of bagging (the correlation between trees) and unlock the full power of ensemble learning. This makes Random Forests one of the most powerful and widely used machine learning techniques today.</p> <hr/> <h5 id="review-recap-of-key-concepts"><strong>Review: Recap of Key Concepts</strong></h5> <p>In summary, here’s a quick review of the key points we’ve covered:</p> <ul> <li> <p><strong>Deep decision trees</strong> generally have <strong>low bias</strong> (they can fit the training data very well) but <strong>high variance</strong> (small changes in the data can lead to significant changes in the tree structure).</p> </li> <li> <p><strong>Ensembling</strong> multiple models helps <strong>reduce variance</strong>. The rationale behind this is that the <strong>mean of i.i.d. estimates</strong> tends to have <strong>smaller variance</strong> than a single estimate.</p> </li> <li> <p><strong>Bootstrap sampling</strong> allows us to simulate many different datasets from a single training set, which is the foundation of <strong>bagging</strong>.</p> </li> </ul> <p>However, while bagging uses <strong>bootstrap samples</strong> to train individual models, these models (the decision trees) are <strong>correlated</strong>, which limits the reduction in variance.</p> <ul> <li><strong>Random Forests</strong> address this by <strong>increasing the diversity</strong> of the ensemble. They achieve this by selecting a <strong>random subset of features</strong> at each split of the decision trees, reducing correlation and enhancing performance.</li> </ul> <h5 id="conclusion"><strong>Conclusion</strong></h5> <p>To wrap it up, Random Forests combine the strengths of bagging (reduced variance) with the added benefit of increased diversity among trees. By introducing randomness in feature selection, they make each tree in the ensemble more independent, leading to a <strong>stronger, more robust model</strong>.</p> <p>Random Forests stand out as one of the most powerful and widely used techniques in machine learning, thanks to their ability to handle complex data patterns while mitigating overfitting through ensembling and randomness.</p> <p>Next, we’ll explore <strong>Boosting</strong> - another powerful ensemble technique that builds models sequentially to improve accuracy by focusing on the mistakes made by previous models.</p>]]></content><author><name></name></author><category term="ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[Explore how Random Forests enhance Bagging by introducing randomness at each tree split, reducing correlation, and increasing diversity to build more accurate and stable prediction models.]]></summary></entry><entry><title type="html">Bagging - Bootstrap Aggregation</title><link href="https://monishver11.github.io/blog/2025/bagging/" rel="alternate" type="text/html" title="Bagging - Bootstrap Aggregation"/><published>2025-04-27T00:10:00+00:00</published><updated>2025-04-27T00:10:00+00:00</updated><id>https://monishver11.github.io/blog/2025/bagging</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/bagging/"><![CDATA[<p>Previously, we saw how ensemble methods, like averaging independent models or using bootstrap sampling, can reduce variance and improve prediction stability.</p> <p>Today, we dive deeper into one powerful technique: <strong>Bagging</strong> — Bootstrap Aggregating, and explore how it helps build more stable and accurate models.</p> <hr/> <h5 id="bagging-bootstrap-aggregation"><strong>Bagging: Bootstrap Aggregation</strong></h5> <p>Bagging, short for <strong>Bootstrap Aggregation</strong>, is a general-purpose method for reducing variance.</p> <p>The idea is simple:</p> <ul> <li>Draw \(B\) bootstrap samples \(D_1, D_2, \dots, D_B\) from the original dataset \(D\).</li> <li> <p>Train a model on each bootstrap sample to get prediction functions:</p> \[\hat{f}_1, \hat{f}_2, \dots, \hat{f}_B\] </li> <li> <p>Combine their predictions. The bagged prediction function is:</p> \[\hat{f}_{\text{avg}}(x) = \text{Combine}\left( \hat{f}_1(x), \hat{f}_2(x), \dots, \hat{f}_B(x) \right)\] </li> </ul> <p>Depending on the task:</p> <ul> <li>For <strong>regression</strong>, we typically average predictions.</li> <li>For <strong>classification</strong>, we usually take a <strong>majority vote</strong>.</li> </ul> <p><strong>Key Point: Why Bagging Doesn’t Overfit</strong></p> <p>One of the most powerful aspects of bagging is that <strong>increasing the number of trees does not cause overfitting</strong>.<br/> In fact, adding more trees generally <strong>improves performance</strong> by further reducing the variance of the model.<br/> Since each tree is trained on a slightly different bootstrap sample, their errors tend to average out, making the overall prediction more stable and reliable.<br/> Thus, more trees usually help — at worst, performance plateaus, but it rarely gets worse with additional trees.</p> <p><strong>Downside: Loss of Interpretability</strong></p> <p>However, this variance reduction comes at a cost. A <strong>single decision tree</strong> is often easy to visualize and interpret: you can follow a clear, logical path from the root to a prediction.<br/> With <strong>hundreds or thousands of trees</strong> combined in a bagged ensemble, the resulting model becomes a black box — it is much harder (or nearly impossible) to trace a single prediction back through all contributing trees. In other words, bagging sacrifices <strong>interpretability</strong> for <strong>predictive performance</strong>.</p> <hr/> <h5 id="out-of-bag-oob-predictions-and-error-estimation"><strong>Out-of-Bag (OOB) Predictions and Error Estimation</strong></h5> <p>Bagging also provides a natural way to estimate test error without needing a separate validation set!</p> <p>Recall:</p> <ul> <li>Each bagged model is trained on roughly <strong>63%</strong> of the original data.</li> <li>The remaining <strong>37%</strong> — the observations not included in the bootstrap sample — are called <strong>out-of-bag (OOB) observations</strong>.</li> </ul> <p>For the \(i\)-th training point:</p> <ul> <li> <p>Define the set of bootstrap samples <strong>that did not include</strong> \(x_i\) as:</p> \[S_i = \{b \,\vert\, D_b \text{ does not contain } x_i\}\] </li> <li> <p>The <strong>Out-of-Bag (OOB) prediction</strong> for \(x_i\) is then the average prediction across all trees where \(x_i\) was not used in training:</p> \[\hat{f}_{\text{OOB}}(x_i) = \frac{1}{|S_i|} \sum_{b \in S_i} \hat{f}_b(x_i)\] </li> </ul> <p>Here, \(\vert S_i \vert\) is the number of trees that did not see \(x_i\) during training.</p> <p>Once we have OOB predictions for all training points, we can compute the <strong>OOB error</strong> by comparing these predictions against the true labels.</p> <p>The OOB error serves as a reliable estimate of the model’s test error — <strong>similar to cross-validation</strong>, but <strong>without needing to split the data</strong> or perform multiple rounds of training. This makes OOB evaluation very efficient, especially for large datasets.</p> <h5 id="applying-bagging-to-classification-trees"><strong>Applying Bagging to Classification Trees</strong></h5> <p>Let’s look at a practical example:</p> <ul> <li>Input space: \(X = \mathbb{R}^5\)</li> <li>Output space: \(Y = \{-1, 1\}\)</li> <li>Sample size: \(n = 30\)</li> </ul> <div class="row justify-content-center"> <div class="col-sm-6 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ensemble-2-480.webp 480w,/assets/img/ensemble-2-800.webp 800w,/assets/img/ensemble-2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/ensemble-2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="ensemble-2" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>When we train decision trees on different bootstrap samples, the trees we get are often <strong>very different</strong> from one another.</p> <ul> <li>Each bootstrap sample is a slightly different version of the original dataset.</li> <li>As a result, the <strong>splitting variables</strong> chosen at the root (and deeper nodes) can change significantly across trees.</li> <li>This leads to trees with <strong>different structures</strong>, <strong>different decision boundaries</strong>, and ultimately, <strong>different predictions</strong>.</li> </ul> <p>This behavior highlights a key property of decision trees: they are <strong>high variance models</strong>. Even small perturbations or changes in the training data can cause a decision tree to change substantially.</p> <p>However, instead of seeing this as a disadvantage, we <strong>leverage</strong> this property through <strong>bagging</strong> (Bootstrap Aggregation). By training multiple high-variance trees on different bootstrap samples and <strong>averaging</strong> their predictions, we are able to:</p> <ul> <li><strong>Reduce variance</strong> significantly</li> <li><strong>Stabilize predictions</strong></li> <li><strong>Improve overall model performance</strong> without increasing bias</li> </ul> <p>Thus, bagging turns the natural instability of decision trees into a <strong>strength</strong>, leading to a more robust and accurate ensemble model.</p> <h5 id="why-decision-trees-are-ideal-for-bagging"><strong>Why Decision Trees Are Ideal for Bagging</strong></h5> <p>Bagging is particularly powerful when the base models are <strong>relatively unbiased</strong> but have <strong>high variance</strong> — and decision trees fit this description perfectly.</p> <ul> <li>Deep, unpruned decision trees tend to have <strong>low bias</strong>, as they can closely fit the training data and capture complex patterns.</li> <li>However, they also suffer from <strong>high variance</strong>: small changes or perturbations in the training data can lead to drastically different tree structures and predictions.</li> <li>By training many such high-variance trees on different bootstrap samples and <strong>averaging</strong> their outputs, bagging <strong>reduces the overall variance</strong> without significantly affecting the bias.</li> </ul> <p>The result is a <strong>more stable, robust, and accurate ensemble model</strong> compared to relying on a single decision tree.</p> <p>Thus, decision trees are an ideal candidate for bagging — their natural instability becomes an advantage when combined through this technique.</p> <hr/> <p>With this understanding in place, we are now ready to move toward an even more powerful idea: <strong>Random Forests</strong> - where we take bagging one step further by adding an extra layer of randomness to make our ensemble even stronger!</p>]]></content><author><name></name></author><category term="ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[Bagging (Bootstrap Aggregating) combines multiple high-variance models trained on different bootstrap samples to create a more stable, accurate, and lower-variance ensemble predictor.]]></summary></entry><entry><title type="html">Introduction to Ensemble Methods</title><link href="https://monishver11.github.io/blog/2025/intro-to-ensemble-methods/" rel="alternate" type="text/html" title="Introduction to Ensemble Methods"/><published>2025-04-25T00:24:00+00:00</published><updated>2025-04-25T00:24:00+00:00</updated><id>https://monishver11.github.io/blog/2025/intro-to-ensemble-methods</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/intro-to-ensemble-methods/"><![CDATA[<p>Ensemble methods are a powerful set of techniques in machine learning that aim to improve prediction performance by combining the outputs of multiple models. Before diving into ensemble strategies, let’s revisit some foundational concepts that lead us to the rationale behind ensemble methods.</p> <hr/> <h5 id="review-decision-trees"><strong>Review: Decision Trees</strong></h5> <ul> <li><strong>Non-linear</strong>, <strong>non-metric</strong>, and <strong>non-parametric</strong> models</li> <li>Capable of <strong>regression</strong> or <strong>classification</strong></li> <li><strong>Interpretable</strong>, especially when shallow</li> <li>Constructed using a <strong>greedy algorithm</strong> that seeks to maximize the <strong>purity of nodes</strong></li> <li>Prone to <strong>overfitting</strong>, unless properly regularized</li> </ul> <p>These models serve as the building blocks for many ensemble techniques like Random Forests.</p> <h5 id="recap-statistics-and-point-estimators"><strong>Recap: Statistics and Point Estimators</strong></h5> <p>We begin with data:</p> \[D = (x_1, x_2, \dots, x_n)\] <p>sampled i.i.d. from a parametric distribution</p> \[p(\cdot \mid \theta)\] <p>A <strong>statistic</strong> is any function of the data, e.g.,</p> <ul> <li>Sample mean</li> <li>Sample variance</li> <li>Histogram</li> <li>Empirical distribution</li> </ul> <p>A <strong>point estimator</strong> is a statistic used to estimate a parameter:</p> \[\hat{\theta} = \hat{\theta}(D) \approx \theta\] <p><strong>Example:</strong> Suppose we’re estimating the average height \(\theta\) of a population. We collect a sample of \(n\) people and compute the sample mean:</p> \[\hat{\theta}(D) = \frac{1}{n} \sum_{i=1}^n x_i\] <p>This sample mean is a <strong>point estimator</strong> for the true average height \(\theta\) of the entire population.</p> <h5 id="recap-bias-and-variance-of-an-estimator"><strong>Recap: Bias and Variance of an Estimator</strong></h5> <p>Since statistics are derived from random samples, they themselves are <strong>random variables</strong>. The distribution of a statistic across different random samples is called the <strong>sampling distribution</strong>.</p> <p>Understanding the <strong>bias</strong> and <strong>variance</strong> of an estimator helps us evaluate how good the estimator is.</p> <ul> <li> <p><strong>Bias</strong> measures the systematic error — how far, on average, the estimator is from the true parameter:</p> \[\text{Bias}(\hat{\theta}) \overset{\text{def}}{=} \mathbb{E}[\hat{\theta}] - \theta\] </li> <li> <p><strong>Variance</strong> measures the variability of the estimator due to sampling randomness:</p> \[\text{Var}(\hat{\theta}) \overset{\text{def}}{=} \mathbb{E}[\hat{\theta}^2] - \left(\mathbb{E}[\hat{\theta}]\right)^2\] </li> </ul> <p>Intuitively:</p> <ul> <li><strong>Low bias</strong> means the estimator is <em>accurate</em> on average.</li> <li><strong>Low variance</strong> means the estimator is <em>stable</em> across different samples.</li> </ul> <p>Even an <strong>unbiased estimator</strong> can be <strong>unreliable</strong> if its variance is high. That is, it may give wildly different results on different samples, even if the average over many samples is correct.</p> <p><strong>Example:</strong> Suppose we are trying to estimate the <strong>true mean</strong> \(\theta\) of a population — for example, the average height of all adults in a city. We collect a sample of size \(n\):</p> \[D = (x_1, x_2, \dots, x_n)\] <p>where each \(x_i\) is drawn i.i.d. from a distribution with <strong>mean</strong> \(\theta\) and some unknown variance \(\sigma^2\).</p> <p>Consider two different estimators of the population mean:</p> <ol> <li>\(\hat{\theta}_1(D) = x_1\) — just the first point in the sample</li> <li>\(\hat{\theta}_2(D) = \frac{1}{n} \sum_{i=1}^n x_i\) — the sample mean</li> </ol> <p>We say an estimator \(\hat{\theta}\) is <strong>unbiased</strong> if, on average, it correctly estimates the true value of the parameter \(\theta\):</p> \[\mathbb{E}[\hat{\theta}] = \theta\] <p>In this case:</p> <ul> <li> <p>For \(\hat{\theta}_1\), since \(x_1\) is sampled from the distribution with mean \(\theta\), we have:</p> \[\mathbb{E}[x_1] = \theta \Rightarrow \mathbb{E}[\hat{\theta}_1] = \theta\] </li> <li> <p>For \(\hat{\theta}_2\), because of the linearity of expectation:</p> \[\mathbb{E}[\hat{\theta}_2] = \mathbb{E}\left[\frac{1}{n} \sum_{i=1}^n x_i\right] = \frac{1}{n} \sum_{i=1}^n \mathbb{E}[x_i] = \frac{1}{n} \cdot n \cdot \theta = \theta\] </li> </ul> <p>Thus, <strong>both estimators are unbiased</strong> — their expected value equals the true mean \(\theta\).</p> <p>However, they differ in <strong>variance</strong>:</p> <ul> <li>\(\hat{\theta}_1\) uses only one data point, so its value can fluctuate greatly between different samples — it has <strong>high variance</strong>.</li> <li>\(\hat{\theta}_2\) averages over all \(n\) data points, which helps cancel out individual fluctuations — it has <strong>lower variance</strong>.</li> </ul> <p><strong>Key takeaway:</strong> Although both estimators are unbiased, the sample mean \(\hat{\theta}_2\) is <strong>more reliable</strong> due to its lower variance. This highlights the importance of considering both <strong>bias</strong> and <strong>variance</strong> when evaluating an estimator — a foundational idea for ensemble methods.</p> <h5 id="variance-of-a-mean"><strong>Variance of a Mean</strong></h5> <p>Suppose we have an unbiased estimator \(\hat{\theta}\) with variance \(\sigma^2\):</p> \[\mathbb{E}[\hat{\theta}] = \theta, \quad \text{Var}(\hat{\theta}) = \sigma^2\] <p>Now imagine we have \(n\) independent copies of this estimator — say, from different data samples or different random seeds — denoted by:</p> \[\hat{\theta}_1, \hat{\theta}_2, \dots, \hat{\theta}_n\] <p>We form a new estimator by averaging them:</p> \[\hat{\theta}_{\text{avg}} = \frac{1}{n} \sum_{i=1}^n \hat{\theta}_i\] <p>This average is still an unbiased estimator of \(\theta\), because the expectation of a sum is the sum of expectations:</p> \[\mathbb{E}[\hat{\theta}_{\text{avg}}] = \frac{1}{n} \sum_{i=1}^n \mathbb{E}[\hat{\theta}_i] = \frac{1}{n} \cdot n \cdot \theta = \theta\] <p>But here’s the key insight: its <strong>variance is smaller</strong>. Since the \(\hat{\theta}_i\) are independent and each has variance \(\sigma^2\), we get:</p> \[\text{Var}(\hat{\theta}_{\text{avg}}) = \text{Var} \left( \frac{1}{n} \sum_{i=1}^n \hat{\theta}_i \right) = \frac{1}{n^2} \sum_{i=1}^n \text{Var}(\hat{\theta}_i) = \frac{n \cdot \sigma^2}{n^2} = \frac{\sigma^2}{n}\] <p>So, by averaging multiple estimators, we <strong>preserve unbiasedness</strong> while <strong>reducing variance</strong>.</p> <p>This simple statistical property is the backbone of many ensemble methods in machine learning — especially those like bagging and random forests, where we average multiple models to get a more stable and reliable prediction.</p> <hr/> <h5 id="averaging-independent-prediction-functions"><strong>Averaging Independent Prediction Functions</strong></h5> <p>Let’s now connect the earlier statistical insight to machine learning.</p> <p>Suppose we train \(B\) models <strong>independently</strong> on \(B\) different training sets, each drawn from the same underlying data distribution. This gives us a set of prediction functions:</p> \[\hat{f}_1(x),\ \hat{f}_2(x),\ \dots,\ \hat{f}_B(x)\] <p>We define their <strong>average prediction function</strong> as:</p> \[\hat{f}_{\text{avg}}(x) \overset{\text{def}}{=} \frac{1}{B} \sum_{b=1}^B \hat{f}_b(x)\] <p>At any specific input point \(x_0\):</p> <ul> <li>Each model’s prediction \(\hat{f}_b(x_0)\) is a random variable (since it depends on the randomly drawn training set), but they all share the same <strong>expected prediction</strong>.</li> <li> <p>The average prediction:</p> \[\hat{f}_{\text{avg}}(x_0) = \frac{1}{B} \sum_{b=1}^B \hat{f}_b(x_0)\] <p>has the <strong>same expected value</strong> as each individual \(\hat{f}_b(x_0)\), but with a <strong>reduced variance</strong>:</p> \[\text{Var}(\hat{f}_{\text{avg}}(x_0)) = \frac{1}{B} \cdot \text{Var}(\hat{f}_1(x_0))\] </li> </ul> <p>This means that by averaging multiple independent models, we can achieve a <strong>more stable and less noisy prediction</strong>, without increasing bias.</p> <p>However, here’s the challenge:</p> <blockquote> <p>In practice, we don’t have access to \(B\) truly independent training sets — we usually only have <strong>one dataset</strong>.</p> </blockquote> <h5 id="the-bootstrap-sample"><strong>The Bootstrap Sample</strong></h5> <p>So, how do we simulate multiple datasets when we only have <strong>one</strong>?</p> <p>The answer is: use <strong>bootstrap sampling</strong> — a clever statistical trick to mimic sampling variability.</p> <p>A <strong>bootstrap sample</strong> is formed by sampling <strong>with replacement</strong> from the original dataset:</p> \[D_n = (x_1, x_2, \dots, x_n)\] <p>We draw \(n\) points <em>with replacement</em> from \(D_n\), forming a new dataset (also of size \(n\)). Because sampling is done with replacement, some data points will appear multiple times, while others might not appear at all.</p> <p>What’s the chance a particular data point \(x_i\) is <strong>not</strong> selected in one draw?<br/> That’s \(1 - \frac{1}{n}\).</p> <p>The chance it’s not selected <strong>in any of the \(n\) draws</strong> is:</p> \[\left(1 - \frac{1}{n} \right)^n \approx \frac{1}{e} \approx 0.368\] <p>So, on average, <strong>about 36.8%</strong> of the data points are <strong>not</strong> included in a given bootstrap sample. This also means:</p> <blockquote> <p>Around <strong>63.2%</strong> of the original data points are expected to appear <strong>at least once</strong> in each bootstrap sample.</p> </blockquote> <h5 id="the-bootstrap-method"><strong>The Bootstrap Method</strong></h5> <p>Bootstrap gives us a way to <strong>simulate variability</strong> and generate multiple pseudo-datasets — without requiring any new data.</p> <p>Here’s how it works:</p> <ol> <li> <p>From the original dataset \(D_n\), generate \(B\) bootstrap samples:</p> \[D_n^1, D_n^2, \dots, D_n^B\] </li> <li> <p>Compute some function of interest — such as a statistic or a trained model — on each bootstrap sample:</p> \[\phi(D_n^1), \phi(D_n^2), \dots, \phi(D_n^B)\] </li> </ol> <p>These values behave almost like they were computed from <strong>\(B\) independent samples</strong> drawn from the original population distribution.</p> <p><strong>Why?</strong> Because each bootstrap sample is a randomized resampling of the original dataset — introducing enough variability to approximate the natural randomness we’d expect from drawing entirely new datasets from the true distribution.</p> <p>Although bootstrap samples are not truly independent, the statistical properties of estimators (like variance and confidence intervals) computed using bootstrapping tend to closely mirror those from actual independent samples.</p> <blockquote> <p>This makes bootstrap an incredibly useful tool for simulating sampling distributions, especially when acquiring more data is costly or impossible.</p> </blockquote> <h5 id="independent-samples-vs-bootstrap-samples"><strong>Independent Samples vs. Bootstrap Samples</strong></h5> <p>Let’s say we want to estimate a parameter \(\alpha\) using a point estimator:</p> \[\hat{\alpha} = \hat{\alpha}(D_{100})\] <p>Now, consider two scenarios:</p> <ul> <li><strong>Case 1:</strong> You collect <strong>1000 independent samples</strong>, each of size 100 (<strong>Left</strong>)</li> <li><strong>Case 2:</strong> You generate <strong>1000 bootstrap samples</strong> from a <strong>single dataset</strong> of size 100 (<strong>Right</strong>)</li> </ul> <p>If you compute \(\hat{\alpha}\) for each sample and plot the resulting histograms, you’ll notice something powerful:</p> <div class="row justify-content-center"> <div class="col-sm-6 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ensemble-1-480.webp 480w,/assets/img/ensemble-1-800.webp 800w,/assets/img/ensemble-1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/ensemble-1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="ensemble-1" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <blockquote> <p>The distribution of estimates from bootstrap samples closely resembles that from truly independent samples.</p> </blockquote> <p>While not exact, the <strong>bootstrap approximation</strong> to the sampling distribution is often <strong>good enough</strong> for practical applications — especially when collecting new data is expensive or infeasible.</p> <hr/> <h5 id="ensemble-methods"><strong>Ensemble Methods</strong></h5> <p>This naturally leads us to the concept of <strong>ensemble learning</strong> — a powerful technique in modern machine learning.</p> <p><strong>Core idea:</strong> Combine multiple <strong>weak models</strong> into a <strong>strong, robust predictor</strong>.</p> <p>Why ensemble methods work:</p> <ul> <li>Averaging predictions from i.i.d. models <strong>reduces variance</strong> without increasing bias</li> <li>Bootstrap lets us <strong>simulate multiple training sets</strong>, even from just one dataset</li> </ul> <p>There are two primary flavors of ensemble methods:</p> <ul> <li> <p><strong>Parallel Ensembles</strong> (e.g., <strong>Bagging</strong>):<br/> Models are trained <strong>independently</strong> on different subsets of data</p> </li> <li> <p><strong>Sequential Ensembles</strong> (e.g., <strong>Boosting</strong>):<br/> Models are trained <strong>sequentially</strong>, with each new model <strong>focusing on the errors</strong> made by previous ones</p> </li> </ul> <p>By leveraging these strategies, ensemble methods often achieve <strong>greater accuracy</strong>, <strong>stability</strong>, and <strong>generalization</strong> than any single model could alone.</p> <hr/> <p>Stay tuned as we dive deeper into specific ensemble techniques — starting with <strong>Bagging</strong> and the incredibly popular <strong>Random Forests</strong> — and see how these ideas come to life in practice!</p>]]></content><author><name></name></author><category term="ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[A beginner's guide to ensemble methods in machine learning, explaining how averaging and bootstrapping reduce variance and improve model performance.]]></summary></entry><entry><title type="html">Decision Trees for Classification</title><link href="https://monishver11.github.io/blog/2025/decision-trees-classification/" rel="alternate" type="text/html" title="Decision Trees for Classification"/><published>2025-04-20T16:31:00+00:00</published><updated>2025-04-20T16:31:00+00:00</updated><id>https://monishver11.github.io/blog/2025/decision-trees-classification</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/decision-trees-classification/"><![CDATA[<p>In the last post, we explored how decision trees can grow deep and complex—leading to overfitting—and how strategies like limiting tree depth or pruning can help us build simpler, more generalizable models.</p> <p>In this post, we turn our focus to <strong>classification trees</strong>, where our goal isn’t just fitting the data—it’s finding splits that <strong>create pure, confident predictions</strong> in each region.</p> <p>We’ll look at what makes a split “good,” explore different <strong>impurity measures</strong>, and understand how decision trees use these ideas to grow meaningfully.</p> <hr/> <h5 id="what-makes-a-good-split-for-classification"><strong>What Makes a Good Split for Classification?</strong></h5> <p>In classification tasks, a decision tree predicts the <strong>majority class</strong> in each region. So, a good split is one that increases the <strong>purity</strong> of the resulting nodes—that is, each node contains mostly (or only) examples from a single class.</p> <p>Let’s walk through a concrete example. Suppose we’re trying to classify data points into <strong>positive (+)</strong> and <strong>negative (−)</strong> classes. We consider two possible ways to split the data:</p> <p><strong>Split Option 1</strong></p> <ul> <li> \[R_1: 8+,\ 2−\] </li> <li> \[R_2: 2+,\ 8−\] </li> </ul> <p>Here, each region contains a clear majority: 8 out of 10 are of the same class. Not bad!</p> <p><strong>Split Option 2</strong></p> <ul> <li> \[R_1: 6+,\ 4−\] </li> <li> \[R_2: 4+,\ 6−\] </li> </ul> <p>This is more mixed—each region has a 60-40 class split, making it <strong>less pure</strong> than Split 1.</p> <p>Now, let’s consider a <strong>better version of Split 2</strong>:</p> <p><strong>Split Option 3 (Refined)</strong></p> <ul> <li> \[R_1: 6+,\ 4−\] </li> <li> \[R_2: 0+,\ 10−\] </li> </ul> <p>Now things look different! Region \(R_2\) contains <strong>only negatives</strong>, making it a <strong>perfectly pure node</strong>. Even though \(R_1\) isn’t completely pure, this split overall is more desirable than the others.</p> <p>This example shows that a good split isn’t just about balance—it’s about <strong>maximizing purity</strong>, ideally pushing each node toward containing only one class.</p> <h5 id="misclassification-error-in-a-node"><strong>Misclassification Error in a Node</strong></h5> <p>Once we split the data, how do we measure how well a node performs in <strong>classification</strong>?</p> <p>Suppose we’re working with <strong>multiclass classification</strong>, where the possible labels are:</p> \[Y = \{1, 2, \ldots, K\}\] <p>Let’s focus on a particular <strong>node</strong> \(m\) (i.e., a region \(R_m\) of the input space) that contains \(N_m\) data points.</p> <p>For each class \(k \in \{1, \ldots, K\}\), we compute the <strong>proportion</strong> of points in node \(m\) that belong to class \(k\):</p> \[\hat{p}_{mk} = \frac{1}{N_m} \sum_{i: x_i \in R_m} \mathbb{1}[y_i = k]\] <p>This gives us the <strong>empirical class distribution</strong> within the node.</p> <p>To make a prediction, we choose the <strong>majority class</strong> in that node:</p> \[k(m) = \arg\max_k \hat{p}_{mk}\] <p>This means the class with the highest proportion becomes the predicted label for <strong>all points</strong> in that region.</p> <hr/> <h5 id="node-impurity-measures"><strong>Node Impurity Measures</strong></h5> <p>In classification, our goal is to make each region (or <strong>node</strong>) as <strong>pure</strong> as possible—i.e., containing data points from mostly <strong>one class</strong>.</p> <p>To quantify how <strong>impure</strong> a node is, we use <strong>impurity measures</strong>. Let’s explore the three most common ones:</p> <p><strong>1. Misclassification Error</strong></p> <p>This measures the fraction of points <strong>not belonging to the majority class</strong> in a node:</p> \[\text{Misclassification Error} = 1 - \hat{p}_{mk(m)}\] <p>Here, \(\hat{p}_{mk(m)}\) is the proportion of the majority class in node \(m\).</p> <ul> <li>If a node has 90% of points from class A and 10% from class B, misclassification error = \(1 - 0.9 = 0.1\)</li> <li>It’s simple, but not very sensitive to class distribution beyond the majority vote.</li> </ul> <p><strong>2. Gini Index</strong></p> <p>The Gini index gives us a better sense of how <strong>mixed</strong> a node is:</p> \[\text{Gini}(m) = \sum_{k=1}^K \hat{p}_{mk}(1 - \hat{p}_{mk})\] <p>This value is <strong>0</strong> when the node is perfectly pure (i.e., all points belong to one class) and <strong>maximum</strong> when all classes are equally likely.</p> <ul> <li>For example, if a node has: <ul> <li>50% class A, 50% class B → Gini = \(0.5\)</li> <li>90% class A, 10% class B → Gini = \(0.18\)</li> <li>100% class A → Gini = \(0\) (pure)</li> </ul> </li> </ul> <p>The Gini index is widely used in practice because it’s differentiable and more sensitive to class proportions than misclassification error.</p> <p><strong>3. Entropy (a.k.a. Information Gain)</strong></p> <p>Entropy comes from information theory and captures the amount of <strong>uncertainty</strong> or <strong>disorder</strong> in the class distribution:</p> \[\text{Entropy}(m) = - \sum_{k=1}^K \hat{p}_{mk} \log \hat{p}_{mk}\] <p>Like Gini, it’s <strong>0</strong> for a pure node and <strong>higher</strong> for more mixed distributions.</p> <ul> <li>If a node has: <ul> <li>50% class A, 50% class B → Entropy = \(0.693\)</li> <li>90% class A, 10% class B → Entropy ≈ \(0.325\)</li> <li>100% class A → Entropy = \(0\)</li> </ul> </li> </ul> <p>Entropy grows slower than Gini but still encourages purity. It’s used in algorithms like <strong>ID3</strong> and <strong>C4.5</strong>.</p> <p><strong>Summary: When Are Nodes “Pure”?</strong></p> <p>All three measures hit <strong>zero</strong> when the node contains data from only one class. But Gini and Entropy give a smoother, more nuanced view of how mixed the classes are—helpful for greedy splitting.</p> <hr/> <table> <thead> <tr> <th>Class Distribution</th> <th>Misclassification</th> <th>Gini</th> <th>Entropy</th> </tr> </thead> <tbody> <tr> <td>100% A</td> <td>0</td> <td>0</td> <td>0</td> </tr> <tr> <td>90% A / 10% B</td> <td>0.1</td> <td>0.18</td> <td>0.325</td> </tr> <tr> <td>50% A / 50% B</td> <td>0.5</td> <td>0.5</td> <td>0.693</td> </tr> </tbody> </table> <hr/> <p>So, when deciding <strong>where to split</strong>, we prefer splits that lead to <strong>lower impurity</strong> in the resulting nodes.</p> <div class="row justify-content-center"> <div class="col-sm-6 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/DT-5-480.webp 480w,/assets/img/DT-5-800.webp 800w,/assets/img/DT-5-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/DT-5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="DT-5" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Both Gini and Entropy encourage the class proportions to be close to 0 or 1—i.e., pure nodes. </div> <p><strong>Analogy: Sorting Colored Balls into Boxes</strong></p> <p>Imagine you’re sorting colored balls into boxes. Each ball represents a data point, and the color represents its class label.</p> <ul> <li>A <strong>perfectly sorted box</strong> has balls of only one color—this is a <strong>pure</strong> node.</li> <li>A box with a mix of colors is <strong>impure</strong>—you’re less certain what color a randomly chosen ball will be.</li> </ul> <p>Now think of impurity measures as ways to <strong>score</strong> each box. To ground these interpretations with some math, let’s calculate each impurity measure using a simple example.</p> <p>Suppose we’re at a node where the class distribution is:</p> <ul> <li>8 red balls (Class A)</li> <li>2 blue balls (Class B)</li> </ul> <p>This gives us the class probabilities:</p> <ul> <li> \[\hat{p}_A = \frac{8}{10} = 0.8\] </li> <li> \[\hat{p}_B = \frac{2}{10} = 0.2\] </li> </ul> <p>Let’s compute each impurity measure and interpret what it tells us:</p> <p><strong>Misclassification Error:</strong> <em>“What’s the chance I assign the wrong class if I always predict the majority class?”</em></p> <ul> <li>The majority class is red (Class A), so we’ll predict red for all inputs.</li> <li>The only mistakes occur when the true class is blue.</li> <li>So, the misclassification error is:</li> </ul> \[1 - \hat{p}_{\text{majority}} = 1 - 0.8 = 0.2\] <p><strong>Gini Index:</strong> <em>“If I randomly pick two balls (with replacement), what’s the chance they belong to different classes?”</em></p> <ul> <li>Formula:</li> </ul> \[G = \sum_k \hat{p}_k (1 - \hat{p}_k)\] <ul> <li>For our example:</li> </ul> \[G = 0.8(1 - 0.8) + 0.2(1 - 0.2) = 0.8(0.2) + 0.2(0.8) = 0.16 + 0.16 = 0.32\] <ul> <li>Interpretation: There’s a 32% chance of getting different classes when picking two random samples. The more balanced the classes, the higher the Gini.</li> </ul> <p><strong>Entropy:</strong> <em>“How surprised am I when I pick a ball and see its class?”</em></p> <ul> <li>Formula:</li> </ul> \[H = -\sum_k \hat{p}_k \log_2 \hat{p}_k\] <ul> <li>For our example:</li> </ul> \[H = -0.8 \log_2(0.8) - 0.2 \log_2(0.2)\] <ul> <li>Approximating:</li> </ul> \[H \approx -0.8(-0.32) - 0.2(-2.32) = 0.256 + 0.464 = 0.72\] <ul> <li>Interpretation: Entropy is a measure of uncertainty. A pure node has zero entropy. Here, there’s moderate uncertainty because the node isn’t completely pure.</li> </ul> <p>This example shows how the impurity measures behave when the node is somewhat pure but not perfectly. Gini and entropy are more sensitive to changes in class proportions than misclassification error, which is why they’re often preferred during tree building.</p> <hr/> <h5 id="quantifying-the-impurity-of-a-split"><strong>Quantifying the Impurity of a Split</strong></h5> <p>Once we’ve chosen an impurity measure (like Gini, Entropy, or Misclassification Error), how do we decide if a split is good?</p> <p>When a split divides a node into two regions—left (\(R_L\)) and right (\(R_R\))—we compute the <strong>weighted average impurity</strong> of the child nodes:</p> \[\text{Impurity}_{\text{split}} = \frac{N_L \cdot Q(R_L) + N_R \cdot Q(R_R)}{N_L + N_R}\] <p>Where:</p> <ul> <li>\(N_L, N_R\) are the number of samples in the left and right nodes.</li> <li>\(Q(R)\) is the impurity of region \(R\), measured using Gini, Entropy, or Misclassification Error.</li> </ul> <p>We want to <strong>minimize</strong> this weighted impurity. A good split is one that sends the data into two groups that are as pure as possible.</p> <p><strong>Example:</strong></p> <p>Suppose we split a node of 10 samples into:</p> <ul> <li>Left node (\(R_L\)): 6 samples, Gini impurity = 0.1</li> <li>Right node (\(R_R\)): 4 samples, Gini impurity = 0.3</li> </ul> <p>Then the weighted impurity is:</p> \[\frac{6 \cdot 0.1 + 4 \cdot 0.3}{10} = \frac{0.6 + 1.2}{10} = 0.18\] <p>We’d compare this value with the weighted impurity of other candidate splits and choose the split with the <strong>lowest</strong> value.</p> <p>This process is repeated greedily at each step of the tree-building process.</p> <hr/> <h5 id="interpretability-of-decision-trees"><strong>Interpretability of Decision Trees</strong></h5> <div class="row justify-content-center"> <div class="col-sm-4 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/DT-6-480.webp 480w,/assets/img/DT-6-800.webp 800w,/assets/img/DT-6-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/DT-6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="DT-6" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>One of the biggest advantages of decision trees is their <strong>interpretability</strong>.</p> <p>Each internal node represents a question about a feature, and each leaf node gives a prediction. You can <strong>follow a path</strong> from the root to a leaf to understand exactly how a prediction was made.</p> <p>This makes decision trees particularly useful when model transparency is important—such as in healthcare or finance.</p> <p>Even people without a technical background can often understand a <strong>small decision tree</strong> just by reading it. However, as trees grow deeper and wider, they can become <strong>harder to interpret</strong>, especially if overfit to the training data.</p> <h5 id="discussion-trees-vs-linear-models"><strong>Discussion: Trees vs. Linear Models</strong></h5> <div class="row justify-content-center"> <div class="col-sm-6 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/DT-7-480.webp 480w,/assets/img/DT-7-800.webp 800w,/assets/img/DT-7-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/DT-7.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="DT-7" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Unlike models like logistic regression or SVMs, <strong>decision trees don’t rely on geometric concepts</strong> such as distances, angles, or dot products. Instead, they work by recursively splitting the input space.</p> <p><strong>Decision trees are:</strong></p> <ul> <li><strong>Non-linear</strong>: They can carve out complex, axis-aligned regions in the input space.</li> <li><strong>Non-metric</strong>: No need to define or compute distances between points.</li> <li><strong>Non-parametric</strong>: They don’t assume a fixed form for the underlying function—tree complexity grows with data.</li> </ul> <p><strong>But there are tradeoffs:</strong></p> <ul> <li>Trees may <strong>struggle with problems that have linear decision boundaries</strong>, which linear models handle easily.</li> <li>They are <strong>high-variance models</strong>—small changes in the training data can lead to very different trees.</li> <li>Without constraints (like pruning or depth limits), they are prone to <strong>overfitting</strong>, especially on noisy data.</li> </ul> <hr/> <h5 id="recap--conclusion"><strong>Recap &amp; Conclusion</strong></h5> <ul> <li> <p>Trees partition the input space into regions, unlike linear models that rely on fixed decision boundaries.</p> </li> <li> <p>Split the data to minimize the <strong>sum of squared errors</strong> in each region.</p> </li> <li> <p>Building the best tree is computationally infeasible. We use a <strong>greedy algorithm</strong> to build the tree step-by-step.</p> </li> <li> <p>Fully grown trees overfit. We prevent this by limiting depth, size, or pruning based on validation performance.</p> </li> <li> <p>For classfication, a good split increases <strong>class purity</strong> in the nodes. We explored this with intuitive +/− examples.</p> </li> <li> <p><strong>Impurity Measures:</strong> Misclassification Error, Gini Index and Entropy</p> </li> <li> <p>We pick splits that <strong>reduce weighted impurity</strong> the most.</p> </li> <li> <p>Small trees are easy to understand; large ones can become complex.</p> </li> <li> <p>Trees are non-linear, non-parametric, and don’t need distance—but they may overfit or struggle with linear patterns.</p> </li> </ul> <p>This sets the stage for the next step: <strong>ensembles</strong> like Random Forests and Boosted Trees.</p> <p>Stay tuned!</p>]]></content><author><name></name></author><category term="ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[Explains what makes a good split, how impurity is quantified using Gini, Entropy, and misclassification error, and why trees are both powerful and interpretable.]]></summary></entry><entry><title type="html">Decision Trees - Our First Non-Linear Classifier</title><link href="https://monishver11.github.io/blog/2025/decision-trees/" rel="alternate" type="text/html" title="Decision Trees - Our First Non-Linear Classifier"/><published>2025-04-20T03:28:00+00:00</published><updated>2025-04-20T03:28:00+00:00</updated><id>https://monishver11.github.io/blog/2025/decision-trees</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/decision-trees/"><![CDATA[<p>So far, we’ve seen classifiers that try to separate data using straight lines or hyperplanes—like logistic regression and SVMs. But what happens when a linear boundary just doesn’t cut it?</p> <p>Welcome to <strong>decision trees</strong>, our first inherently non-linear classifier. These models can slice the input space into complex shapes, enabling them to learn highly flexible rules for classification and regression.</p> <hr/> <p>To understand the core idea, consider this question:</p> <div class="row justify-content-center"> <div class="col-sm-6 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/DT-1-480.webp 480w,/assets/img/DT-1-800.webp 800w,/assets/img/DT-1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/DT-1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="DT-1" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <blockquote> <p>Can we classify these points using a linear classifier?</p> </blockquote> <p>Sometimes the answer is no. In such cases, we can instead <strong>partition the input space into axis-aligned regions</strong> recursively. This is exactly what a decision tree does—it recursively divides the space based on feature thresholds, creating regions where simple predictions (like mean or majority label) are made.</p> <hr/> <h5 id="decision-trees-setup"><strong>Decision Trees: Setup</strong></h5> <p>We’ll focus on <strong>binary decision trees</strong>, where each internal node splits the dataset into exactly two parts based on a single feature.</p> <div class="row justify-content-center"> <div class="col-sm-6 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/DT-2-480.webp 480w,/assets/img/DT-2-800.webp 800w,/assets/img/DT-2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/DT-2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="DT-2" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><strong>Key structure of a binary decision tree:</strong></p> <ul> <li>Each <strong>node</strong> corresponds to a subset of the data.</li> <li>At every split, exactly <strong>one feature</strong> is used to divide the data.</li> <li>For <strong>continuous features</strong>, splits are typically of the form: \(x_i \leq t\) where \(t\) is a learned threshold.</li> <li>For <strong>categorical features</strong>, values can be partitioned into two disjoint groups (not covered in this post).</li> <li><strong>Predictions</strong> are made only at the <strong>terminal nodes</strong> (also called <strong>leaves</strong>), where no further splitting occurs.</li> </ul> <h5 id="constructing-the-tree"><strong>Constructing the Tree</strong></h5> <p>Before we dive into the mechanics of decision trees, let’s understand the core objective:</p> <p>We want to partition the input space into <strong>regions</strong> \(R_1, R_2, \ldots, R_J\) in a way that minimizes the prediction error in each region.</p> <p>Formally, our aim is to find the regions \(R_1, \ldots, R_J\) that minimize the <strong>sum of squared errors</strong> within each region:</p> \[\sum_{j=1}^{J} \sum_{i \in R_j} (y_i - \hat{y}_{R_j})^2\] <p>Here:</p> <ul> <li>\(y_i\) is the true target value,</li> <li>\(\hat{y}_{R_j}\) is the predicted value in region \(R_j\), typically the <strong>mean</strong> of \(y_i\)’s in that region.</li> </ul> <p><strong>Why this formulation?</strong></p> <p>This objective captures our desire to make <strong>accurate predictions</strong> within each region. By minimizing the <strong>sum of squared errors (SSE)</strong>, we’re encouraging the model to place similar target values together. In other words, a good split should group data points that can be well-represented by a single value—their <strong>mean</strong>.</p> <p>The mean minimizes the squared error within a region, making it the natural prediction for regression tasks. This also ensures that the tree focuses on reducing <strong>variance within each region</strong>, which is a core idea behind how decision trees generalize from data.</p> <p><strong>Intuition with a Simple Example:</strong></p> <p>Suppose you’re trying to predict someone’s salary based on their years of experience. If you create a region \(R_j\) that contains people with 2–4 years of experience and their salaries are: $45k, 48k, 46k, 47k$, then predicting the <strong>mean salary</strong> (≈ $46.5k) gives you the smallest total squared error.</p> <p>But if you instead included someone with 10 years of experience and a salary of $80k in the same region, your prediction would shift higher—and the squared error for the 2–4 year group would increase significantly. So, to <strong>minimize overall error</strong>, we should split the region before including such an outlier. This is exactly what the tree tries to do—split the data where it significantly improves prediction accuracy.</p> <p>In essence, the tree grows by trying to group together points that are similar in their target values—allowing for simple and accurate predictions within each region.</p> <hr/> <p><strong>Problem: Intractability</strong></p> <p>While our goal is clear—split the data into regions that minimize prediction error—<strong>actually finding the optimal binary tree</strong> is computationally infeasible.</p> <p><strong>Why?</strong> Because the number of possible binary trees grows <strong>exponentially</strong> with the number of features and data points. At each node, we can choose any feature and any possible split value, and each choice affects all future splits. This creates an enormous search space.</p> <p>Let’s go back to our salary prediction task. Suppose we have 100 employees with features like years of experience, education level, and job title. At the root node, we could split on:</p> <ul> <li><strong>Experience</strong>: maybe at 5 years?</li> <li><strong>Education</strong>: perhaps separate Bachelor’s from Master’s and PhDs?</li> <li><strong>Job title</strong>: group certain roles together?</li> </ul> <p>Each of these choices leads to different subsets of the data—then we repeat the process within each subset. Even for a small dataset, the number of ways to split and grow the tree quickly becomes astronomical.</p> <p>Evaluating <strong>every possible combination of splits and tree structures</strong> to find the one that gives the absolute minimum prediction error would require checking <strong>all trees</strong>, which is practically impossible.</p> <p><strong>Solution: Greedy Construction</strong></p> <p>Instead of searching the entire tree space, we use a <strong>greedy algorithm</strong>:</p> <ol> <li><strong>Start</strong> at the root node with the full dataset.</li> <li><strong>Evaluate</strong> all possible splits and choose the one that minimizes the error <strong>locally</strong>.</li> <li><strong>Split</strong> the data accordingly.</li> <li><strong>Repeat</strong> the process recursively until a stopping condition is met, such as: <ul> <li>Reaching a <strong>maximum tree depth</strong>,</li> <li>A <strong>minimum number of data points</strong> in a node,</li> <li>Or achieving a <strong>minimal decrease in error</strong>.</li> </ul> </li> </ol> <blockquote> <p>💡 We only split regions that have already been defined by earlier (non-terminal) splits. So the tree structure builds <strong>hierarchically</strong>, and each decision is <strong>context-dependent</strong>.</p> </blockquote> <p><strong>Prediction in Terminal Nodes</strong></p> <p>Once the tree is built, how do we make predictions?</p> <p>For <strong>regression</strong>, the predicted value at a terminal node \(R_m\) is just the <strong>average of the targets</strong> in that region:</p> \[\hat{y}_{R_m} = \text{mean}(y_i \mid x_i \in R_m)\] <div class="row justify-content-center"> <div class="col-sm-10 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/DT-3-480.webp 480w,/assets/img/DT-3-800.webp 800w,/assets/img/DT-3-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/DT-3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="DT-3" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Prediction in a Regression Tree </div> <p><strong>Greedy Nature and Its Implications</strong></p> <p>This greedy approach makes <strong>locally optimal decisions</strong> at each step without considering their long-term impact. As a result:</p> <ul> <li>It is efficient and straightforward to implement.</li> <li>However, it may not lead to the <strong>globally optimal tree</strong>, since better overall structures might require different early splits.</li> </ul> <p><strong>Example:</strong></p> <p>Suppose we’re predicting salary and at the root node, we greedily choose to split on <strong>education level</strong>, since it gives the best reduction in squared error at that moment.</p> <p>But later, we realize that <strong>years of experience</strong> would have provided a much cleaner separation <strong>if it had been split first</strong>. Unfortunately, the tree can’t go back and revise that decision.</p> <p>That’s the key limitation of greedy methods:</p> <blockquote> <p>They make the best decision in the moment—but not necessarily the best decision overall.</p> </blockquote> <hr/> <h5 id="how-do-we-find-the-best-split-point"><strong>How do we find the best split point</strong>?</h5> <p>When building decision trees, we need to decide where to split the data at each node. Here’s how it’s typically done:</p> <ul> <li> <p><strong>Step 1: Iterate over all features.</strong><br/> For each feature, we try to find the best possible threshold that minimizes the loss (e.g., squared error).</p> </li> <li> <p><strong>Step 2: Handle continuous features efficiently.</strong><br/> While there are infinitely many possible split points for continuous features, we <strong>don’t need to try them all</strong>.</p> </li> </ul> <p><strong>Key Insight:</strong></p> <p>If we sort the values of a feature \(x_j\), say:</p> \[x_{j(1)}, x_{j(2)}, \ldots, x_{j(n)}\] <p>then we only need to consider splits <strong>between adjacent values</strong>. Why?<br/> Because any split point within the interval \((x_{j(r)}, x_{j(r+1)})\) will result in the <strong>same data partition</strong>, and hence the same loss.</p> <p><strong>Common Strategy:</strong></p> <p>We pick the <strong>midpoint</strong> between adjacent sorted values as the candidate split:</p> \[s_j \in \left\{ \frac{1}{2} \left(x_{j(r)} + x_{j(r+1)}\right) \,\middle|\, r = 1, \ldots, n - 1 \right\}\] <p>So instead of testing infinitely many thresholds, we reduce the search to just <strong>\(n - 1\) candidate splits</strong> for each feature—making the process tractable and efficient.</p> <h5 id="decision-trees-and-overfitting"><strong>Decision Trees and Overfitting</strong></h5> <p>What happens if we <strong>keep splitting</strong> the data?</p> <p>Eventually, the tree can grow so deep that <strong>every leaf contains just one data point</strong>. This means the model has memorized the training data—resulting in <strong>zero training error</strong>, but likely poor generalization to unseen data.</p> <p>In other words: <strong>overfitting</strong>.</p> <p>To prevent this, we need to <strong>regularize</strong> the tree by controlling its complexity. Common strategies include:</p> <ul> <li><strong>Limit the depth</strong> of the tree</li> <li><strong>Limit the total number of nodes</strong></li> <li><strong>Restrict the number of terminal (leaf) nodes</strong></li> <li><strong>Set a minimum number of samples required</strong> to split a node or to be in a leaf</li> </ul> <p>Another strategy is <strong>pruning</strong>, which is used in the famous CART algorithm (Breiman et al., 1984):</p> <ol> <li><strong>Grow a large tree</strong>: Allow the tree to grow deep, often until each leaf contains just a few data points (e.g., ≤ 5).</li> <li><strong>Prune it back</strong>: Starting from this large tree, <strong>recursively remove subtrees</strong> if doing so improves performance on a validation set.</li> </ol> <p>This two-phase approach ensures the model starts expressive but is ultimately <strong>simplified</strong> to avoid overfitting.</p> <div class="row justify-content-center"> <div class="col-sm-6 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/DT-4-480.webp 480w,/assets/img/DT-4-800.webp 800w,/assets/img/DT-4-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/DT-4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="DT-4" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Pruning: An Example </div> <hr/> <h5 id="wrapping-up"><strong>Wrapping Up:</strong></h5> <ul> <li> <p>Decision Trees are a powerful method that recursively splits the data to minimize prediction error, enabling flexible models for both regression and classification tasks.</p> </li> <li> <p>The Greedy Approach is used to make locally optimal decisions at each split, though it may not always lead to the globally best tree.</p> </li> <li> <p>Overfitting is a concern when the tree becomes too complex, which can be mitigated by using regularization techniques like limiting depth and pruning.</p> </li> <li> <p>Pruning simplifies the tree after it has been grown, helping to avoid overfitting and improve generalization.</p> </li> </ul> <p>Now that we’ve explored decision trees in a regression context, let’s shift gears and dive into how they work for classification. Specifically, we’ll focus on understanding what constitutes a good split in classification and how to define the misclassification error in a node. Let’s dive into these topics in the next post.</p> <p>See you!</p>]]></content><author><name></name></author><category term="ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[Learn how decision trees work for regression, including split criteria, overfitting control, and intuitive examples.]]></summary></entry><entry><title type="html">Structured Perceptron &amp;amp; Structured SVM</title><link href="https://monishver11.github.io/blog/2025/structured-perceptron-svm/" rel="alternate" type="text/html" title="Structured Perceptron &amp;amp; Structured SVM"/><published>2025-04-16T19:07:00+00:00</published><updated>2025-04-16T19:07:00+00:00</updated><id>https://monishver11.github.io/blog/2025/structured-perceptron-svm</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/structured-perceptron-svm/"><![CDATA[<p>In the <a href="http://localhost:8080/blog/2025/structured-prediction/">previous post</a>, we explored how structured prediction works under the hood—we defined a compatibility function \(h(x, y) = \langle w, \Psi(x, y) \rangle\), designed rich feature representations using Unary and Markov features, and saw how the overall score of an output sequence decomposes into local parts.</p> <p>We also discussed how this score guides prediction by choosing the most compatible output structure:</p> \[f(x) = \arg\max_{y \in Y(x)} h(x, y)\] <p>But how do we actually <strong>learn</strong> the weight vector \(w\) that makes good predictions?</p> <p>In this post, we’ll walk through two popular algorithms for learning structured models:</p> <ul> <li>The <strong>Structured Perceptron</strong>, which extends the classic perceptron to structured outputs</li> <li>The <strong>Structured SVM</strong>, which builds in <strong>margins</strong> and <strong>regularization</strong> for better generalization</li> </ul> <p>Let’s dive in!</p> <h5 id="structured-perceptron"><strong>Structured Perceptron</strong></h5> <p>To learn the weight vector \(w\) that scores correct outputs higher than incorrect ones, we can use the <strong>structured perceptron algorithm</strong>.</p> <p>It works just like the multiclass perceptron, except the prediction is over a <strong>structured output space</strong>:</p> <hr/> <p><strong>Structured Perceptron Algorithm</strong></p> <ol> <li> <p><strong>Initialize</strong> the weights: \(w \leftarrow 0\)</p> </li> <li> <p><strong>For each training example</strong> \((x, y)\):</p> <ul> <li> <p>Predict the best structure under the current model: \(\hat{y} = \arg\max_{y' \in Y(x)} \langle w, \Psi(x, y') \rangle\)</p> </li> <li> <p>If the prediction is incorrect \((\hat{y} \ne y)\):</p> <ul> <li><strong>Update</strong> the weight vector: \(w \leftarrow w + \Psi(x, y) - \Psi(x, \hat{y})\)</li> </ul> </li> </ul> </li> </ol> <p>This update <strong>encourages the correct structure</strong> by increasing its score and <strong>penalizes the incorrect one</strong> by decreasing its score. This is identical to multiclass perceptron, except that the prediction \(\hat{y}\) comes from a structured space.</p> <hr/> <p>Up to this point, we’ve seen how to score structured outputs and how to train with the structured perceptron. But the perceptron only updates on mistakes and doesn’t consider <strong><em>“how wrong”</em></strong> a prediction is.</p> <p>So, what if we want a <strong>more principled way to penalize incorrect outputs</strong> based on how different they are from the correct one?</p> <p>This brings us to <strong>structured hinge loss</strong> and <strong>structured SVM</strong>.</p> <h5 id="structured-svm"><strong>Structured SVM</strong></h5> <p>In structured prediction, we want the correct output to <strong>not only score highest</strong>, but to <strong>beat all incorrect outputs by a margin</strong>.</p> <p>This leads to the generalized hinge loss:</p> \[\ell_{\text{hinge}}(x, y) = \max_{y' \in Y(x)} \left[ \Delta(y, y') + \langle w, \Psi(x, y') - \Psi(x, y) \rangle \right]\] <p>Let’s break it down:</p> <ul> <li>\(\Psi(x, y)\) is the feature vector for the true output.</li> <li>\(\Psi(x, y')\) is the feature vector for a wrong prediction.</li> <li>\(\Delta(y, y')\) is the <strong>loss function</strong> that tells us <em>how bad</em> the prediction \(y'\) is compared to the ground truth \(y\).</li> </ul> <p>A common choice for \(\Delta\) is the <strong>Hamming loss</strong> (i.e., how many labels are incorrect):</p> \[\Delta(y, y') = \frac{1}{L} \sum_{i=1}^L 1[y_i \ne y'_i]\] <p>This loss forces the model to <strong>separate the true output from the rest</strong>, with a margin proportional to how different they are.</p> <p><strong>Picture it this way:</strong></p> <p>Imagine you’re a teacher grading structured answers—say, full sentences submitted by students.</p> <p>You don’t just care whether a sentence is right or wrong—you also care <strong>how wrong</strong> a student’s answer is. If a student writes something that’s close to the correct answer, you might give partial credit. But if their answer is completely off, you’d deduct more points.</p> <p>This is exactly what structured hinge loss does.</p> <ul> <li>It ensures that the correct output <strong>not only wins</strong>, but wins <strong>by enough</strong>—with a <em>margin</em> that reflects how different the incorrect output is.</li> <li>If an incorrect output \(y'\) is very different from the ground truth \(y\) (i.e., high \(\Delta(y, y')\)), then the model is penalized more if it scores \(y'\) too closely to \(y\).</li> </ul> <p><strong>Example: POS Tagging with Margin-Based Loss</strong></p> <p>Suppose you have the input sentence: <strong>“He runs fast”</strong></p> <p>The correct POS tags are:</p> \[y = [\text{Pronoun}, \text{Verb}, \text{Adverb}]\] <p>Now, imagine two possible incorrect predictions:</p> <ul> <li>\(y'_1 = [\text{Pronoun}, \text{Noun}, \text{Adverb}]\) — only <strong>one</strong> mistake</li> <li>\(y'_2 = [\text{Noun}, \text{Noun}, \text{Noun}]\) — <strong>three</strong> mistakes</li> </ul> <p>The Hamming losses are:</p> <ul> <li> \[\Delta(y, y'_1) = \frac{1}{3}\] </li> <li> \[\Delta(y, y'_2) = 1\] </li> </ul> <p>According to the hinge loss, \(y'_2\) should be separated by a <strong>larger margin</strong> from the correct output than \(y'_1\). That is, the model must not only prefer the true output, but <strong>strongly penalize</strong> very wrong outputs.</p> <h5 id="structured-svm-objective"><strong>Structured SVM Objective</strong></h5> <p>We now define a learning objective that uses this hinge loss, along with regularization:</p> \[\min_{w} \frac{1}{2} \|w\|^2 + C \sum_{(x, y) \in D} \ell_{\text{hinge}}(x, y)\] <p>Where:</p> <ul> <li>The first term \(\frac{1}{2} \|w\|^2\) controls model complexity (regularization).</li> <li>The second term penalizes incorrect predictions.</li> <li>\(C\) is a hyperparameter that trades off margin size vs training error.</li> </ul> <h5 id="how-do-we-optimize-this"><strong>How Do We Optimize This?</strong></h5> <p>Optimizing the structured SVM objective might seem tricky because the hinge loss involves a <strong>max over all possible outputs</strong>:</p> \[\ell_{\text{hinge}}(x, y) = \max_{y' \in Y(x)} \left[ \Delta(y, y') + \langle w, \Psi(x, y') - \Psi(x, y) \rangle \right]\] <p>But here’s the clever trick:</p> <p>We don’t need to check <strong>all</strong> possible \(y'\)—we only need to find the <strong>worst violator</strong>; The structure \(y'\) that scores too close to or even higher than the true output \(y\)—<strong>after accounting for how wrong it is</strong>.</p> <p>This process is called <strong>loss-augmented inference</strong>.</p> <h5 id="understanding-loss-augmented-inference"><strong>Understanding Loss-Augmented Inference</strong></h5> <p>To optimize the structured SVM objective, we need to minimize the hinge loss:</p> \[\ell_{\text{hinge}}(x, y) = \max_{y' \in Y(x)} \left[ \Delta(y, y') + \langle w, \Psi(x, y') - \Psi(x, y) \rangle \right]\] <p>At a high level, this loss tries to ensure:</p> <blockquote> <p>“The score of the <strong>true output</strong> \(y\) is higher than that of <strong>every incorrect output</strong> \(y'\), by at least how wrong \(y'\) is.”</p> </blockquote> <p>This encourages <strong>margin-based separation</strong> between \(y\) and each \(y'\).</p> <p>But how do we compute or optimize this in practice?</p> <p><strong>Intuition Behind Loss-Augmented Inference</strong></p> <p>Think of the model as making predictions based on scores:</p> <ul> <li>\(\langle w, \Psi(x, y) \rangle\) — score for the <strong>true output</strong></li> <li>\(\langle w, \Psi(x, y') \rangle\) — score for a <strong>candidate output</strong></li> </ul> <p>The structured SVM doesn’t just care about which \(y'\) scores highest.</p> <p>It asks: <em>“Which wrong output \(y'\) is both very wrong <strong>and</strong> scores too well?”</em></p> <p>That’s where <strong>loss-augmented inference</strong> comes in:</p> \[y' = \arg\max_{y' \in Y(x)} \left[ \Delta(y, y') + \langle w, \Psi(x, y') \rangle \right]\] <ul> <li>The model score \(\langle w, \Psi(x, y') \rangle\) captures how likely the model thinks \(y'\) is.</li> <li>The task loss \(\Delta(y, y')\) captures how bad that \(y'\) is in the real world.</li> </ul> <p>By combining them, we search for the <strong>most offending structure</strong>—the one that violates the margin the most.</p> <h5 id="the-update-step"><strong>The Update Step</strong></h5> <p>Once we find this \(y'\), we update the weights:</p> \[w \leftarrow w + \eta \cdot \left( \Psi(x, y) - \Psi(x, y') \right)\] <ul> <li>This increases the score for the correct output \(y\)</li> <li>And decreases the score for the worst violator \(y'\)</li> </ul> <p>It’s almost like the perceptron, <strong>but more aware of the “danger level” of the mistake</strong>.</p> <p><strong>Analogy: Hiring Candidates</strong></p> <p>Imagine you’re hiring someone (the structured model) to assign tags to words in a sentence. You ask them to tag a sentence and also explain <strong>why</strong> they think the tags are right (that’s their score).</p> <p>Now, suppose they make a mistake. You don’t just say “wrong!”—you also ask:</p> <blockquote> <p>“How bad is this mistake? Did you call a verb a noun? Or a verb an adjective?”</p> </blockquote> <p>If the mistake is <strong>very wrong</strong> and the candidate seems <strong>very confident</strong> (high score), that’s a <strong>serious violation</strong>.</p> <p>So you correct them in a way that says:</p> <blockquote> <p>“This bad answer was <strong>too confident</strong>. Next time, lower your score for this kind of mistake.”</p> </blockquote> <p>That’s what loss-augmented inference does: it focuses on <strong>mistakes the model is confident about but shouldn’t be</strong>.</p> <h5 id="summary"><strong>Summary</strong></h5> <ul> <li>Structured prediction is essential when outputs are <strong>interdependent</strong>—such as sequences or trees.</li> <li>We define a <strong>compatibility score</strong> \(h(x, y)\) to evaluate how well an output \(y\) matches input \(x\).</li> <li>The score decomposes using <strong>local features</strong> like unary and Markov features, enabling efficient learning.</li> <li><strong>Structured Perceptron</strong> uses mistake-driven updates, like its multiclass counterpart.</li> <li><strong>Structured SVM</strong> introduces <strong>margins and hinge loss</strong>, providing a more robust and generalizable model.</li> </ul> <hr/> <p>That wraps up our exploration of structured prediction. Up next: <strong>Decision Trees</strong>, our first inherently non-linear classifier. Stay tuned, and see you!</p>]]></content><author><name></name></author><category term="ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[Understanding how Structured Perceptron and Structured SVM learn to predict structured outputs with interdependent components.]]></summary></entry><entry><title type="html">Structured Prediction and Multiclass SVM</title><link href="https://monishver11.github.io/blog/2025/structured-prediction/" rel="alternate" type="text/html" title="Structured Prediction and Multiclass SVM"/><published>2025-04-13T18:05:00+00:00</published><updated>2025-04-13T18:05:00+00:00</updated><id>https://monishver11.github.io/blog/2025/structured-prediction</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/structured-prediction/"><![CDATA[<p>Structured prediction is a powerful framework used when our output space is complex and structured — such as sequences, trees, or graphs — rather than simple class labels. This post builds on multiclass SVMs to delve deeper into structured prediction, exploring how we define and learn over complex output spaces, as well as the notions of joint feature representations and local compatibility scores.</p> <hr/> <h5 id="what-is-structured-prediction"><strong>What is Structured Prediction?</strong></h5> <p>In standard classification, we predict a single label for each input—like identifying whether an image contains a cat or a dog.</p> <p>But what if our outputs aren’t that simple? What if the prediction itself has structure?</p> <p>That’s where <strong>structured prediction</strong> comes in. It refers to machine learning tasks where the output is not a single label but a <strong>structured object</strong>—like a sequence, a tree, or even a segmentation map. These outputs have dependencies and internal organization that we want to model directly.</p> <h5 id="example-1-part-of-speech-pos-tagging"><strong>Example 1: Part-of-Speech (POS) Tagging</strong></h5> <p>In POS tagging, we’re given a sentence and need to assign a grammatical label to each word—like “noun”, “verb”, or “pronoun”.</p> <p>Here’s an example:</p> \[\begin{aligned} x &amp;: [\text{START}],\ \text{He},\ \text{eats},\ \text{apples} \\ y &amp;: [\text{START}],\ \text{Pronoun},\ \text{Verb},\ \text{Noun} \end{aligned}\] <p>To formalize this:</p> <ul> <li> <p><strong>Vocabulary</strong><br/> Words we might encounter, including a special <code class="language-plaintext highlighter-rouge">[START]</code> symbol and punctuation:</p> \[V = \text{All English words} \cup \{ \text{[START]}, \text{.} \}\] </li> <li> <p><strong>Input space</strong><br/> A sequence of words of any length:</p> \[X = V^n, \quad n = 1, 2, 3, \dots\] </li> <li> <p><strong>Label set</strong><br/> The set of possible POS tags:</p> \[P = \{ \text{START, Pronoun, Verb, Noun, Adjective} \}\] </li> <li> <p><strong>Output space</strong><br/> A sequence of POS tags of the same length as the input:</p> \[Y = P^n, \quad n = 1, 2, 3, \dots\] </li> </ul> <p>This is a classic case of sequence labeling, where each position in the input has a corresponding label in the output.</p> <h5 id="example-2-action-grounding-in-long-form-videos"><strong>Example 2: Action Grounding in Long-Form Videos</strong></h5> <p>Structured prediction also shines in vision tasks like <strong>action grounding</strong>. Here, we’re given a long video and need to segment it and assign actions like “chopping” or “frying” to different time spans.</p> <ul> <li> <p><strong>Input</strong><br/> A video frame is represented as a feature vector:</p> \[V = \mathbb{R}^D\] </li> <li> <p><strong>Input sequence</strong><br/> A video is a sequence of these frame-level features:</p> \[X = V^n\] </li> <li> <p><strong>Label set</strong><br/> The set of possible actions:</p> \[P = \{ \text{Slicing, Chopping, Frying, Washing, ...} \}\] </li> <li> <p><strong>Output sequence</strong><br/> A sequence of actions corresponding to segments or frames:</p> \[Y = P^n\] </li> </ul> <p>This setup allows us to model real-world tasks where outputs have temporal structure—actions occur over time and are dependent on previous context. Structured prediction opens the door to powerful models that understand more than just isolated labels—they reason over entire sequences and structures.</p> <blockquote> <p><strong>But wait—doesn’t the model just predict POS tags for the given input? Where does context come in?</strong></p> </blockquote> <p>Great question! It might seem like we’re simply classifying each word. But in <strong>structured prediction</strong>, we <strong>don’t</strong> predict each tag independently. Instead, we predict the <strong>entire sequence jointly</strong>—which means the model <strong>does consider context</strong> while assigning tags.</p> <p><strong>How?</strong></p> <p>Structured prediction models use features that depend on both the current and <strong>previous tags</strong> (Markov dependencies). For example:</p> <ul> <li>If the previous tag is <code class="language-plaintext highlighter-rouge">Pronoun</code>, it’s likely the current tag is <code class="language-plaintext highlighter-rouge">Verb</code>.</li> <li>If the previous word is <code class="language-plaintext highlighter-rouge">He</code> and the current word is <code class="language-plaintext highlighter-rouge">runs</code>, the current tag is likely <code class="language-plaintext highlighter-rouge">Verb</code>.</li> </ul> <p>These dependencies are built into the model using <strong>joint feature vectors</strong> and <strong>structured scoring</strong>. Instead of a single-label classifier, we score the entire output sequence and pick the best-scoring one:</p> \[\hat{y} = \arg\max_{y \in Y(x)} h(x, y)\] <p>Now that we understand how structured models use context, let’s explore the hypothesis space that makes this possible.</p> <hr/> <h5 id="hypothesis-space-for-structured-outputs"><strong>Hypothesis Space for Structured Outputs</strong></h5> <p>In structured prediction, the output space \(Y(x)\) is <strong>large and structured</strong>—its size depends on the input \(x\).</p> <p>We define:</p> <ul> <li> <p><strong>Base hypothesis space</strong>:</p> \[H = \{ h : X \times Y \to \mathbb{R} \}\] </li> <li> <p><strong>Compatibility score</strong>:</p> \[h(x, y)\] <p>gives a real-valued score that measures how compatible an input \(x\) is with a candidate output \(y\).</p> </li> <li> <p><strong>Final prediction function</strong>:</p> \[f(x) = \arg\max_{y \in Y} h(x, y), \quad f \in F\] </li> </ul> <p>So, our model chooses the <strong>most compatible output structure</strong> based on the scoring function.</p> <h5 id="designing-the-compatibility-score"><strong>Designing the Compatibility Score</strong></h5> <p>We use a <strong>linear model</strong> to define the compatibility score:</p> \[h(x, y) = \langle w, \Psi(x, y) \rangle\] <p>Where:</p> <ul> <li>\(w\) is a parameter vector to be learned.</li> <li>\(\Psi(x, y)\) is a <strong>joint feature representation</strong> of the input-output pair.</li> </ul> <p>Let’s break down how to construct this feature vector.</p> <p>Structured prediction leverages <strong>decomposable features</strong> that split complex structures into simpler parts.</p> <p><strong>Unary Features</strong></p> <p>Unary features depend on the label at a single position \(i\):</p> <ul> <li> <p>Example features:</p> \[\phi_1(x, y_i) = 1[x_i = \text{runs}] \cdot 1[y_i = \text{Verb}]\] \[\phi_2(x, y_i) = 1[x_i = \text{runs}] \cdot 1[y_i = \text{Noun}]\] \[\phi_3(x, y_i) = 1[x_{i-1} = \text{He}] \cdot 1[x_i = \text{runs}] \cdot 1[y_i = \text{Verb}]\] </li> </ul> <p><strong>Markov Features</strong></p> <p>Markov features capture dependencies between <strong>adjacent labels</strong> (like in HMMs):</p> <ul> <li> <p>Example features:</p> \[\theta_1(x, y_{i-1}, y_i) = 1[y_{i-1} = \text{Pronoun}] \cdot 1[y_i = \text{Verb}]\] \[\theta_2(x, y_{i-1}, y_i) = 1[y_{i-1} = \text{Pronoun}] \cdot 1[y_i = \text{Noun}]\] </li> </ul> <p>These features are key to modeling the <strong>structure</strong> in structured prediction tasks. By combining them across all positions in a sequence, we construct the full joint feature vector \(\Psi(x, y)\).</p> <hr/> <p>Now that we’ve seen how structured prediction breaks down sequences into parts using Unary and Markov features, the next question is:</p> <p><strong>How do we combine these local components to score an entire sequence?</strong></p> <p>This leads us to the idea of <strong>local compatibility scores</strong>.</p> <h5 id="local-compatibility-score"><strong>Local Compatibility Score</strong></h5> <p>At each position \(i\) in the sequence, we compute a <strong>local feature vector</strong> that captures both the current label and the transition from the previous label.</p> <ul> <li> <p>Local feature vector: \(\Psi_i(x, y_{i-1}, y_i) = \big( \phi_1(x, y_i), \phi_2(x, y_i), \dots, \theta_1(x, y_{i-1}, y_i), \theta_2(x, y_{i-1}, y_i), \dots \big)\)</p> </li> <li> <p>Local compatibility score: \(\langle w, \Psi_i(x, y_{i-1}, y_i) \rangle\)</p> </li> </ul> <p>To get the <strong>total compatibility score</strong> for the input-output pair \((x, y)\), we <strong>sum these local scores</strong> over the sequence:</p> \[h(x, y) = \sum_i \langle w, \Psi_i(x, y_{i-1}, y_i) \rangle\] <p>This is equivalent to:</p> \[h(x, y) = \langle w, \Psi(x, y) \rangle\] <p>Where the <strong>global feature vector</strong> is the sum of all local feature vectors:</p> \[\Psi(x, y) = \sum_i \Psi_i(x, y_{i-1}, y_i)\] <p>This decomposition is what makes learning and inference tractable in structured models like CRFs, structured perceptrons, and structured SVMs.</p> <hr/> <h5 id="lets-walk-through-the-logic-with-an-example-part-of-speech-pos-tagging-for-the-sentence"><strong>Let’s walk through the logic with an example: Part-of-Speech (POS) Tagging for the sentence</strong></h5> <p>Input (x): [START] He runs fast</p> <p>Goal: Predict the most likely sequence of POS tags:</p> <p>Output (y): [START] Pronoun Verb Adverb</p> <p><strong>Step 1: What are we learning?</strong></p> <p>We want to <strong>learn a scoring function</strong>:</p> \[h(x, y) = \langle w, \Psi(x, y) \rangle\] <p>This function gives a <strong>score</strong> to a candidate output sequence \(y\) for a given input \(x\). The higher the score, the more compatible we believe \(x\) and \(y\) are.</p> <p><strong>Step 2: Why structured outputs are different</strong></p> <p>In structured prediction, the output \(y\) isn’t just a single label—it’s a whole <strong>sequence</strong> (or tree, or grid, etc.).</p> <p>For our sentence, that means predicting:</p> <p>[Pronoun, Verb, Adverb]</p> <p>instead of a single class like just “Verb”.</p> <p><strong>Step 3: Representing compatibility with features</strong></p> <p>We use <strong>feature functions</strong> to capture useful information from \((x, y)\):</p> <ul> <li><strong>Unary features</strong> look at the input and the label at a single position (e.g., “He” → “Pronoun”)</li> <li><strong>Markov features</strong> look at <strong>transitions between labels</strong> (e.g., “Pronoun” → “Verb”)</li> </ul> <p>These become the building blocks of our model.</p> <p><strong>Step 4: Breaking down the full sequence</strong></p> <p>For a sequence of length 3 (ignoring [START] token), we define <strong>local features</strong> at each position \(i\):</p> <ul> <li>At \(i = 1\): “He” tagged as Pronoun</li> <li>At \(i = 2\): “runs” tagged as Verb</li> <li>At \(i = 3\): “fast” tagged as Adverb</li> </ul> <p>At each step, we build a <strong>local feature vector</strong>:</p> \[\Psi_i(x, y_{i-1}, y_i)\] <p>This vector includes both:</p> <ul> <li>Unary features for \(x_i\) and \(y_i\)</li> <li>Markov features for \(y_{i-1}\) and \(y_i\)</li> </ul> <p><strong>Step 5: Computing local scores</strong></p> <p>We compute a <strong>local score</strong> at each position:</p> \[\langle w, \Psi_i(x, y_{i-1}, y_i) \rangle\] <p>This tells us how well the current word and label (and label transition) fit the model.</p> <p>Do this for all positions \(i\) in the sequence.</p> <p><strong>Let’s walk through this sequence step-by-step.</strong></p> <p>At \(i = 1\) (Word: <em>He</em>, Tag: <em>Pronoun</em>)</p> <p>Since this is the first word, we assume the previous tag is <code class="language-plaintext highlighter-rouge">START</code>:</p> \[y_0 = \text{START}\] <p>We define:</p> \[\Psi_1(x, y_0, y_1) = \begin{cases} \phi_1(x_1 = \text{He}, y_1 = \text{Pronoun}) = 1 \\ \theta_1(y_0 = \text{START}, y_1 = \text{Pronoun}) = 1 \end{cases}\] <p>All other components of \(\Psi_1\) are zero.</p> <p>At \(i = 2\) (Word: <em>runs</em>, Tag: <em>Verb</em>)</p> \[y_1 = \text{Pronoun}, \quad y_2 = \text{Verb}\] <p>We define:</p> \[\Psi_2(x, y_1, y_2) = \begin{cases} \phi_2(x_2 = \text{runs}, y_2 = \text{Verb}) = 1 \\ \theta_2(y_1 = \text{Pronoun}, y_2 = \text{Verb}) = 1 \end{cases}\] <p>Other entries in \(\Psi_2\) are zero.</p> <p>At \(i = 3\) (Word: <em>fast</em>, Tag: <em>Adverb</em>)</p> \[y_2 = \text{Verb}, \quad y_3 = \text{Adverb}\] <p>We define:</p> \[\Psi_3(x, y_2, y_3) = \begin{cases} \phi_3(x_3 = \text{fast}, y_3 = \text{Adverb}) = 1 \\ \theta_3(y_2 = \text{Verb}, y_3 = \text{Adverb}) = 1 \end{cases}\] <p><strong>Step 6: Summing up the local scores</strong></p> <p>To score the full sequence \((x, y)\), we <strong>sum all local scores</strong>:</p> \[h(x, y) = \sum_i \langle w, \Psi_i(x, y_{i-1}, y_i) \rangle\] <p>This total score tells us how compatible this <strong>entire sequence of labels</strong> is with the input.</p> <p>We also define the <strong>global feature vector</strong> as:</p> \[\Psi(x, y) = \sum_i \Psi_i(x, y_{i-1}, y_i)\] <p>So that the score becomes:</p> \[h(x, y) = \langle w, \Psi(x, y) \rangle\] <p>So, in our example, this will be:</p> \[\Psi(x, y) = \Psi_1(x, y_0, y_1) + \Psi_2(x, y_1, y_2) + \Psi_3(x, y_2, y_3)\] <p>Then, the <strong>total compatibility score</strong> is:</p> \[h(x, y) = \langle w, \Psi(x, y) \rangle = \sum_{i=1}^3 \langle w, \Psi_i(x, y_{i-1}, y_i) \rangle\] <p><strong>Step 7: Prediction</strong></p> <p>Finally, to predict the best output sequence for a new input \(x\), we find:</p> \[f(x) = \arg\max_{y \in Y} \langle w, \Psi(x, y) \rangle\] <p>This means: “Find the label sequence \(y\) that gives the highest compatibility score with \(x\).”</p> <hr/> <h5 id="summary-of-the-complete-flow"><strong>Summary of the Complete Flow</strong></h5> <ol> <li><strong>Input</strong>: Sentence \(x =\) [START] He runs fast</li> <li><strong>Output space</strong>: All possible tag sequences of same length</li> <li><strong>For each sequence \(y\)</strong>: <ul> <li>Break it into local pairs: \((y_{i-1}, y_i)\)</li> <li>Construct local features \(\Psi_i(x, y_{i-1}, y_i)\)</li> <li>Compute local scores and sum them</li> </ul> </li> <li><strong>Choose</strong> the sequence \(y\) with highest score \(h(x, y)\)</li> </ol> <p>We’ve now built a clear understanding of how compatibility scores work in structured prediction—by combining <strong>decomposable local features</strong> across a sequence. This formulation helps capture both local label associations and dependencies between adjacent labels.</p> <p>In the <strong>next section</strong>, we’ll dive into <strong>Structured Perceptron</strong> and <strong>Structured SVMs</strong>, where we learn how to train these models using mistake-driven updates and margin-based losses.</p> <p>Take care!</p>]]></content><author><name></name></author><category term="ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[An in-depth yet intuitive walkthrough of structured prediction, covering sequence labeling, feature engineering, and scoring methods for complex outputs.]]></summary></entry><entry><title type="html">Multiclass Classification with SVM</title><link href="https://monishver11.github.io/blog/2025/multiclass-svm/" rel="alternate" type="text/html" title="Multiclass Classification with SVM"/><published>2025-04-13T02:31:00+00:00</published><updated>2025-04-13T02:31:00+00:00</updated><id>https://monishver11.github.io/blog/2025/multiclass-svm</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/multiclass-svm/"><![CDATA[<p>Support Vector Machines (SVMs) are widely used for binary classification, but how do we extend them to multiclass problems? This post dives into the <strong>generalization of SVMs to multiclass settings</strong>, focusing on deriving the loss function intuitively and mathematically.</p> <p><strong>Note:</strong> We’ve already covered SVMs in detail across multiple blog posts, so if any part of the SVM-related content here feels unclear, I highly recommend revisiting those earlier discussions. You can find the full list of all related blogs <a href="https://monishver11.github.io/blog/category/ml-nyu/">here</a>.</p> <hr/> <h5 id="from-binary-to-multiclass-revisiting-the-margin"><strong>From Binary to Multiclass: Revisiting the Margin</strong></h5> <p>For binary classification, the margin for a given training example \((\mathbf{x}^{(n)}, y^{(n)})\) is defined as:</p> \[y^{(n)} \mathbf{w}^\top \mathbf{x}^{(n)}\] <p>Here, we want this margin to be <strong>large and positive</strong>, meaning the classifier confidently assigns the correct label — i.e., the sign of \(\mathbf{w}^\top \mathbf{x}^{(n)}\) matches \(y^{(n)}\).</p> <p>In the <strong>multiclass setting</strong>, instead of a single weight vector \(\mathbf{w}\), we associate each class \(y \in \mathcal{Y}\) with a class-specific score function \(h(\mathbf{x}, y)\). The margin becomes a difference of scores:</p> \[h(\mathbf{x}^{(n)}, y^{(n)}) - h(\mathbf{x}^{(n)}, y)\] <p>This represents how much more confident the model is in the correct class over an incorrect one. Again, we want this margin to be large and positive for all \(y \neq y^{(n)}\).</p> <h5 id="multiclass-svm-the-separable-case"><strong>Multiclass SVM: The Separable Case</strong></h5> <p>Let’s build intuition by recalling the <strong>hard-margin binary SVM</strong>:</p> <p><strong>Binary Objective:</strong></p> \[\min_{\mathbf{w}} \ \frac{1}{2} \|\mathbf{w}\|^2\] <p>Subject to:</p> \[y^{(n)} \mathbf{w}^\top \mathbf{x}^{(n)} \geq 1 \quad \forall (\mathbf{x}^{(n)}, y^{(n)}) \in \mathcal{D}\] <p>Now, for the <strong>multiclass case</strong>, we again aim for a margin of at least 1, but now between the correct class and every other class:</p> <p>Define the <strong>margin</strong> for each incorrect class \(y\) as:</p> \[m_{n,y}(\mathbf{w}) \overset{\text{def}}{=} \langle \mathbf{w}, \Psi(\mathbf{x}^{(n)}, y^{(n)}) \rangle - \langle \mathbf{w}, \Psi(\mathbf{x}^{(n)}, y) \rangle\] <p>Then, the optimization becomes:</p> <p><strong>Multiclass Objective:</strong></p> \[\min_{\mathbf{w}} \ \frac{1}{2} \|\mathbf{w}\|^2\] <p>Subject to:</p> \[m_{n,y}(\mathbf{w}) \geq 1 \quad \forall (\mathbf{x}^{(n)}, y^{(n)}) \in \mathcal{D}, \quad y \neq y^{(n)}\] <p>This ensures the score of the correct class exceeds the score of every other class by at least 1.</p> <p><strong>Here’s a way to visualize it:</strong></p> <p>In contrast to the binary case, where the margin measures alignment between the weight vector and the input (modulated by the true label), the multiclass margin compares the model’s score for the correct label against its score for any incorrect label. This pairwise difference captures how much more the model “prefers” the correct class over a specific incorrect one. Intuitively, it’s no longer about pushing a single decision boundary away from the origin, but about ensuring the score of the true class is separated from all others by a margin — effectively enforcing a set of inequalities that distinguish the correct class from each competitor. This formulation naturally generalizes the binary margin while preserving the core idea: confident, separable predictions.</p> <blockquote> <p>Think of it like a race where the correct class isn’t just expected to win — it must outpace every other class by a clear stride. It’s not enough to cross the finish line first; it has to do so with a visible lead. The margin enforces this separation, ensuring the model’s predictions are not just accurate, but decisively confident.</p> </blockquote> <h5 id="from-hard-margins-to-hinge-loss"><strong>From Hard Margins to Hinge Loss</strong></h5> <p>In practice, perfect separation may not be possible, especially in noisy datasets or complex decision boundaries. To handle these scenarios, we shift to a <strong>soft-margin approach</strong> using <strong>hinge loss</strong>, which allows for some misclassification while still enforcing the desired separation between classes.</p> <p><strong>Binary Hinge Loss Recap:</strong></p> <p>Hinge loss provides a <strong>convex upper bound</strong> on the 0-1 loss, which is commonly used in classification tasks. The binary hinge loss is defined as:</p> \[\ell_{\text{hinge}}(y, \hat{y}) = \max(0, 1 - y h(\mathbf{x}))\] <p>Here, \(y\) is the true label, \(h(\mathbf{x})\) is the score or decision function (typically \(h(\mathbf{x}) = \mathbf{w}^\top \mathbf{x}\) for a linear classifier), and \(\hat{y}\) is the predicted label. This loss function penalizes predictions that are either <strong>incorrect</strong> (when \(y \neq \hat{y}\)) or <strong>too close</strong> to the decision boundary (when \(\vert 1 - y h(\mathbf{x}) \vert\) is small).</p> <div class="row justify-content-center"> <div class="col-sm-6 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Classification_Losses-480.webp 480w,/assets/img/Classification_Losses-800.webp 800w,/assets/img/Classification_Losses-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/Classification_Losses.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Classification_Losses" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h5 id="generalized-hinge-loss-for-multiclass-classification"><strong>Generalized Hinge Loss for Multiclass Classification</strong></h5> <p>In the case of <strong>multiclass classification</strong>, the situation is more complex because we are dealing with more than two possible classes. In this setting, the goal is to ensure that the classifier correctly ranks the true class higher than the others, with a margin that is as large as possible.</p> <p>Let’s define the <strong>multiclass 0-1 loss</strong> as:</p> \[\Delta(y, y') = \mathbb{I}[y \neq y']\] <p>Where \(\mathbb{I}[\cdot]\) is the <strong>indicator function</strong>, which is 1 if \(y \neq y'\) and 0 if \(y = y'\). More generally, \(\Delta\) can encode <strong>different misclassification costs</strong>, allowing for a more flexible model.</p> <p>The model’s predicted class \(\hat{y}\) is the one that maximizes the score function \(h(\mathbf{x}, y)\) across all classes:</p> \[\hat{y} \overset{\text{def}}{=} \arg\max_{y' \in \mathcal{Y}} \langle \mathbf{w}, \Psi(\mathbf{x}, y') \rangle\] <p>Here, \(\Psi(\mathbf{x}, y')\) represents the feature transformation for class \(y'\) and input \(\mathbf{x}\), and \(\mathcal{Y}\) is the set of all possible classes.</p> <p>For a correct prediction, we want:</p> \[\langle \mathbf{w}, \Psi(\mathbf{x}, y) \rangle \geq \langle \mathbf{w}, \Psi(\mathbf{x}, \hat{y}) \rangle\] <p>Where \(y\) is the true class. However, if this condition is violated and the classifier incorrectly chooses an alternative class, we need to quantify the degree of misclassification using the hinge loss.</p> <p>To upper-bound the 0-1 loss, we use the following inequality:</p> \[\Delta(y, \hat{y}) \leq \Delta(y, \hat{y}) - \langle \mathbf{w}, \Psi(\mathbf{x}, y) - \Psi(\mathbf{x}, \hat{y}) \rangle\] <p>This may seem a bit abstract at first, but here’s the intuition: if the model predicts \(\hat{y} \neq y\), then the 0-1 loss is 1, and we want to <strong>penalize the model based on how poorly it ranked the true class</strong>. The inner product difference quantifies how much higher the model scores the incorrect class \(\hat{y}\) over the true class \(y\). By subtracting this difference from the misclassification cost \(\Delta(y, \hat{y})\), we effectively create a <strong>margin-based upper bound</strong> on the discrete loss.</p> <p>This turns the hard-to-optimize, non-differentiable 0-1 loss into a <strong>continuous, convex surrogate</strong> that encourages the correct class to score higher than incorrect ones — making it suitable for optimization using gradient-based methods.</p> <p><strong>Example to Internalize the Intuition:</strong></p> <p>Suppose you’re classifying handwritten digits, and the true label is \(y = 3\). The model incorrectly predicts \(\hat{y} = 8\) with the following scores:</p> <ul> <li>Score for class 3: 7.2</li> <li>Score for class 8: 7.8</li> </ul> <p>So the model prefers class 8 over the correct class 3. The inner product difference is:</p> \[\langle \mathbf{w}, \Psi(\mathbf{x}, 3) - \Psi(\mathbf{x}, 8) \rangle = 7.2 - 7.8 = -0.6\] <p>Assuming a standard 0-1 loss with \(\Delta(3, 8) = 1\), the hinge loss upper bound becomes:</p> \[1 - (-0.6) = 1.6\] <p>The model is penalized more than 1 because it was <strong>confidently wrong</strong>.</p> <p>Now consider a less confident mistake:</p> <ul> <li>Score for class 3: 7.2</li> <li>Score for class 8: 7.1</li> </ul> <p>Then,</p> \[\langle \mathbf{w}, \Psi(\mathbf{x}, 3) - \Psi(\mathbf{x}, 8) \rangle = 7.2 - 7.1 = 0.1\] <p>and the hinge loss becomes:</p> \[1 - 0.1 = 0.9\] <p>Still incorrect, but the model is <strong>barely wrong</strong>, so the penalty is smaller. This example illustrates how the hinge loss upper bound captures <em>how wrong</em> a prediction is — not just whether it’s wrong.</p> <p>Finally with this, we arrive at the <strong>generalized multiclass hinge loss</strong>:</p> \[\ell_{\text{hinge}}(y, \mathbf{x}, \mathbf{w}) \overset{\text{def}}{=} \max_{y' \in \mathcal{Y}} \left[ \Delta(y, y') - \langle \mathbf{w}, \Psi(\mathbf{x}, y) - \Psi(\mathbf{x}, y') \rangle \right]\] <p>This loss function is designed to <strong>penalize misclassifications</strong> while ensuring that the true class \(y\) is clearly separated from all other classes \(y'\). It is <strong>zero</strong> if the margin between the true class and all other classes exceeds the corresponding cost, meaning the prediction is both <strong>correct</strong> and <strong>confident</strong>. In cases where the true class is not sufficiently separated from an incorrect class, the hinge loss penalizes the model, pushing it to improve the separation.</p> <p>This approach, by enforcing a margin between classes, ensures that the classifier learns to correctly distinguish between classes in a way that is robust to small errors or noise in the training data. The key difference from the binary case is that we now have to consider <strong>pairwise comparisons</strong> between the true class and each possible alternative class, making the task of learning the optimal decision boundaries more complex, but also more flexible.</p> <h5 id="final-objective-multiclass-svm-with-hinge-loss"><strong>Final Objective: Multiclass SVM with Hinge Loss</strong></h5> <p>To put everything together, we incorporate the generalized multiclass hinge loss into a regularized optimization framework — just like in the binary SVM case. The goal is to not only minimize classification errors but also control the model complexity to avoid overfitting.</p> <p>We achieve this by combining the hinge loss with an \(L_2\) regularization term. The resulting objective is:</p> <p><strong>Multiclass SVM Objective:</strong></p> \[\min_{\mathbf{w} \in \mathbb{R}^d} \ \frac{1}{2} \|\mathbf{w}\|^2 + C \sum_{n=1}^{N} \max_{y' \in \mathcal{Y}} \left[ \Delta(y^{(n)}, y') - \langle \mathbf{w}, \Psi(\mathbf{x}^{(n)}, y^{(n)}) - \Psi(\mathbf{x}^{(n)}, y') \rangle \right]\] <p>Here:</p> <ul> <li>The <strong>first term</strong>, \(\frac{1}{2} \|\mathbf{w}\|^2\), is the regularization term. It encourages the model to find a weight vector with small norm, promoting simpler decision boundaries and better generalization.</li> <li>The <strong>second term</strong> accumulates the hinge loss over all training examples, penalizing violations of the desired margins based on the cost function \(\Delta(y^{(n)}, y')\).</li> </ul> <p>Each training example contributes to the loss <strong>only if</strong> the margin between the correct class \(y^{(n)}\) and some incorrect class \(y'\) is <strong>less than</strong> the cost \(\Delta(y^{(n)}, y')\). If all margins exceed their respective costs, the hinge loss evaluates to zero for that example — meaning it’s classified correctly and confidently, with no penalty incurred.</p> <p>This objective function forms the basis of many structured and multiclass prediction models, striking a balance between fitting the training data and maintaining a margin-based decision boundary that generalizes well.</p> <h5 id="what-comes-next-optimization"><strong>What Comes Next: Optimization</strong></h5> <p>Now that we have a continuous, convex surrogate loss, the next step is to <strong>optimize the objective</strong>. This typically involves minimizing the regularized hinge loss using gradient-based methods or specialized algorithms like <strong>stochastic subgradient descent</strong>. The form of the loss allows us to compute subgradients efficiently, even though the max operator introduces non-smoothness. By iteratively updating the weights to reduce the loss, we arrive at a classifier that balances <strong>margin maximization</strong> with <strong>error minimization</strong>, and generalizes well to unseen data.</p> <hr/> <h5 id="wrapping-up"><strong>Wrapping Up</strong></h5> <p>Multiclass SVM loss builds on binary SVMs by comparing the score of the correct label with that of every other label, incorporating misclassification costs, and optimizing using hinge loss. The formulation retains interpretability and extends the margin-based principle elegantly into the multiclass realm.</p> <p>Stay tuned for a follow-up post on <strong>implementing multiclass SVMs using structured prediction techniques</strong>!</p> <h5 id="references"><strong>References</strong></h5> <ul> <li><a href="https://github.com/davidrosenberg/mlcourse/blob/gh-pages/Lectures/09.multiclass.pdf">Professor David S. Rosenberg’s Mutliclass Lecture Slides</a></li> </ul>]]></content><author><name></name></author><category term="ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[Learn how Support Vector Machines extend to multiclass classification with an intuitive breakdown of margin concepts, loss derivation, and the multiclass hinge loss formulation.]]></summary></entry><entry><title type="html">Multiclass Logistic Regression &amp;amp; Multiclass Perceptron Algorithm</title><link href="https://monishver11.github.io/blog/2025/multiclass-loss/" rel="alternate" type="text/html" title="Multiclass Logistic Regression &amp;amp; Multiclass Perceptron Algorithm"/><published>2025-04-12T00:32:00+00:00</published><updated>2025-04-12T00:32:00+00:00</updated><id>https://monishver11.github.io/blog/2025/multiclass-loss</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/multiclass-loss/"><![CDATA[<p>In real-world machine learning problems, we often need to classify data into multiple categories, not just two. While binary classification is a fundamental building block, it’s crucial to understand how we can extend these ideas to handle multiple classes. This transition from binary to multiclass classification is what we’ll explore in this blog. We’ll start by revisiting <strong>binary logistic regression</strong>, then step into <strong>multiclass logistic regression</strong>, and finally discuss how we can generalize algorithms like the perceptron for multiclass classification.</p> <hr/> <h5 id="binary-logistic-regression-recap"><strong>Binary Logistic Regression Recap</strong></h5> <p>Let’s begin with the most basic form of classification: binary logistic regression.</p> <p>Given an input \(x\), our goal is to predict whether it belongs to class 1 or class 0. The function we use for binary classification is called the <strong>sigmoid function</strong>, which outputs a probability between 0 and 1:</p> \[f(x) = \sigma(z) = \frac{1}{1 + \exp(-z)} = \frac{1}{1 + \exp(-w^\top x - b)} \quad (1)\] <p>The output \(f(x)\) represents the probability of class 1. The probability of the other class (class 0) is simply:</p> \[1 - f(x) = \frac{\exp(-w^\top x - b)}{1 + \exp(-w^\top x - b)} = \frac{1}{1 + \exp(w^\top x + b)} = \sigma(-z) \quad (2)\] <p>Another way to think about this is that one class corresponds to the parameters \(w\) and \(b\), while the other class corresponds to the parameters \(-w\) and \(-b\). This helps set the foundation for extending this concept to multiple classes.</p> <hr/> <h5 id="extending-to-multiclass-logistic-regression"><strong>Extending to Multiclass Logistic Regression</strong></h5> <p>Now that we have a solid understanding of binary logistic regression, let’s consider the case where we have more than two classes. This is where <strong>multiclass logistic regression</strong> comes in. For each class \(c\), we assign a weight vector \(w_c\) and a bias \(b_c\). The probability of belonging to class \(c\) given an input \(x\) is computed using the <strong>softmax function</strong>:</p> \[f_c(x) = \frac{\exp(w_c^\top x + b_c)}{\sum_{c'} \exp(w_{c'}^\top x + b_{c'})} \quad (3)\] <p>This formulation, known as <strong>softmax regression</strong>, allows us to calculate the probability for each class and select the class with the highest probability.</p> <h5 id="the-loss-function"><strong>The Loss Function</strong></h5> <p>To train the model, we use a <strong>cross-entropy loss</strong> function, which measures how well the model’s predicted probabilities match the true labels. Given a dataset \(\{(x^{(i)}, y^{(i)})\}\), the loss is defined as:</p> \[L = \sum_i -\log f_{y^{(i)}}(x^{(i)})\] <p>This loss function encourages the model to assign higher probabilities to the correct class. The gradient of the loss with respect to the pre-activation (logits) is:</p> \[\frac{\partial L}{\partial z} = f - y\] <p><strong>Derivation:</strong></p> <p>Assume the true class is \(k = y^{(i)}\). The loss for this example is:</p> \[\ell^{(i)} = -\log f_k^{(i)}\] <p>Substituting in the softmax definition:</p> \[\ell^{(i)} = -\log\left( \frac{\exp(z_k^{(i)})}{\sum_{j=1}^C \exp(z_j^{(i)})} \right) = -z_k^{(i)} + \log \left( \sum_{j=1}^C \exp(z_j^{(i)}) \right)\] <p>We differentiate the loss \(\ell^{(i)}\) with respect to each logit \(z_c^{(i)}\). There are two cases:</p> <ul> <li><strong>Case 1: \(c = k\) (the correct class)</strong></li> </ul> \[\frac{\partial \ell^{(i)}}{\partial z_k^{(i)}} = -1 + \frac{\exp(z_k^{(i)})}{\sum_{j=1}^C \exp(z_j^{(i)})} = f_k^{(i)} - 1\] <ul> <li><strong>Case 2: \(c \ne k\)</strong></li> </ul> \[\frac{\partial \ell^{(i)}}{\partial z_c^{(i)}} = \frac{\exp(z_c^{(i)})}{\sum_{j=1}^C \exp(z_j^{(i)})} = f_c^{(i)}\] <p>We can express both cases together using the one-hot encoded label vector \(y^{(i)}\):</p> \[\frac{\partial \ell^{(i)}}{\partial z^{(i)}} = f^{(i)} - y^{(i)}\] <p>Now, let \(f\) and \(y\) now represent the matrices of predicted probabilities and one-hot labels over the entire dataset. Then the total loss is:</p> \[L = \sum_{i=1}^N \ell^{(i)} = -\sum_{i=1}^N \log f_{y^{(i)}}^{(i)}\] <p>By stacking all gradients, the overall gradient of the loss with respect to the logits becomes:</p> \[\frac{\partial L}{\partial z} = f - y\] <p>This fully vectorized form allows efficient implementation and is similar to the gradient descent update used in binary logistic regression but generalized to multiple classes.</p> <hr/> <h5 id="quick-comparison-to-one-vs-all-ova-approach"><strong>Quick Comparison to One-vs-All (OvA) Approach</strong></h5> <p>In many multiclass problems, instead of learning a separate model for each class, we can use the <strong>One-vs-All (OvA)</strong> strategy. In OvA, we train a binary classifier for each class, where the classifier tries to distinguish one class from all others. The base hypothesis space in this case is:</p> \[\mathcal{H} = \{ h: \mathcal{X} \to \mathbb{R} \} \quad \text{(score functions)}\] <p>For \(k\) classes, the <strong>multiclass hypothesis space</strong> is:</p> \[\mathcal{F} = \left\{ x \mapsto \arg\max_i h_i(x) \ \big| \ h_1, \ldots, h_k \in \mathcal{H} \right\}\] <p>Intuitively, each function \(h_i(x)\) scores how likely \(x\) belongs to class \(i\). During training, we want each classifier to output positive values for examples from its own class and negative values for examples from all other classes. At test time, the classifier that outputs the highest score determines the predicted class.</p> <hr/> <h5 id="multiclass-perceptron-generalizing-the-perceptron-algorithm"><strong>Multiclass Perceptron: Generalizing the Perceptron Algorithm</strong></h5> <p>The classic Perceptron algorithm is designed for binary classification, but it can be naturally extended to multiclass problems. In the multiclass setting, instead of a single weight vector, we maintain <strong>one weight vector per class</strong>.</p> <p>For each class \(i\), we define a <strong>linear scoring function</strong>:</p> \[h_i(x) = w_i^\top x, \quad w_i \in \mathbb{R}^d\] <p>Given an input \(x\), the model predicts the class with the highest score:</p> \[\hat{y} = \arg\max_{i} w_i^\top x\] <p>The algorithm proceeds iteratively, updating the weights when it makes a mistake:</p> <ol> <li><strong>Initialize</strong>: Set all weight vectors to zero, \(w_i = 0\) for all classes $i$.</li> <li>For \(T\) iterations over the training set: <ul> <li>For each training example \((x, y)\): <ul> <li>Predict the label: \(\hat{y} = \arg\max_{i} w_i^\top x\)</li> <li>If \(\hat{y} \neq y\) (i.e., the prediction is incorrect): <ul> <li><strong>Promote</strong> the correct class:<br/> \(w_y \leftarrow w_y + x\)</li> <li><strong>Demote</strong> the incorrect prediction: \(w_{\hat{y}} \leftarrow w_{\hat{y}} - x\)</li> </ul> </li> </ul> </li> </ul> </li> </ol> <p>This update increases the score for the true class and decreases the score for the incorrect one, helping the model learn to separate them better in future iterations.</p> <h5 id="rewrite-the-scoring-function"><strong>Rewrite the scoring function</strong></h5> <p>When the number of classes \(k\) is large, storing and updating \(k\) separate weight vectors can become computationally expensive. To address this, we can rewrite the scoring function in a more compact form using a <strong>shared weight vector</strong>.</p> <p>We define a <strong>joint feature map</strong> \(\psi(x, i)\) that combines both the input \(x\) and a class label \(i\). Then, the score for class \(i\) can be written as:</p> \[h_i(x) = w_i^\top x = w^\top \psi(x, i) \tag{4}\] <p>Now, instead of maintaining a separate \(w_i\) for each class, we use <strong>a single global weight vector</strong> \(w\) that interacts with \(\psi(x, i)\) to compute scores for all classes:</p> \[h(x, i) = w^\top \psi(x, i) \tag{5}\] <p>This transformation allows us to use a single weight vector for all classes, which significantly reduces memory usage and computational complexity.</p> <p><strong>Concrete Example</strong></p> <p>Let:</p> <ul> <li>Input vector \(x \in \mathbb{R}^2\), e.g.,</li> </ul> \[x = \begin{bmatrix} 1 \\ 2 \end{bmatrix}\] <ul> <li>Number of classes \(k = 3\)</li> </ul> <p>We define \(\psi(x, i)\) as a vector in \(\mathbb{R}^{2k}\) (i.e., 6 dimensions). It places \(x\) into the block corresponding to class \(i\) and zeros elsewhere.</p> <p>For example, for class \(i = 2\):</p> \[\psi(x, 2) = \begin{bmatrix} 0 \\ 0 \\ 1 \\ 2 \\ 0 \\ 0 \\ \end{bmatrix}\] <p>Let \(w \in \mathbb{R}^6\) (since \(x \in \mathbb{R}^2\) and \(k = 3\)):</p> \[w = \begin{bmatrix} 0.5 \\ -1.0 \\ 0.2 \\ 0.3 \\ -0.4 \\ 1.0 \\ \end{bmatrix}\] <p>To compute the score for class 2:</p> \[h(x, 2) = w^\top \psi(x, 2)\] <p>Only the block for class 2 is active:</p> \[h(x, 2) = [0.2, 0.3]^\top \cdot [1, 2] = 0.2 \cdot 1 + 0.3 \cdot 2 = 0.8\] <p>We can now compute scores for all classes:</p> <ul> <li> <p>Class 1 uses block: \([0.5, -1.0]\)</p> \[h(x, 1) = 0.5 \cdot 1 + (-1.0) \cdot 2 = -1.5\] </li> <li> <p>Class 2: (already computed) \(0.8\)</p> </li> <li> <p>Class 3 uses block: \([-0.4, 1.0]\)</p> \[h(x, 3) = -0.4 \cdot 1 + 1.0 \cdot 2 = 1.6\] </li> </ul> <p>For final prediction, we select the class with the highest score:</p> \[\hat{y} = \arg\max_i h(x, i) = 3\] <p>So, for input \(x = [1, 2]\), the predicted class is <strong>3</strong>.</p> <p>And suppose the true label is:</p> \[y = 2\] <p>Since \(\hat{y} \ne y\), the prediction is incorrect.</p> <p>The classic multiclass Perceptron updates:</p> <ul> <li><strong>Promote</strong> the correct class (add input to the correct class block)</li> <li><strong>Demote</strong> the predicted class (subtract input from the predicted class block)</li> </ul> <p>Using the joint feature map:</p> \[w \leftarrow w + \psi(x, y) - \psi(x, \hat{y})\] <p>In our case:</p> <ul> <li> \[\psi(x, y) = \psi(x, 2) = [0, 0, 1, 2, 0, 0]^\top\] </li> <li> \[\psi(x, \hat{y}) = \psi(x, 3) = [0, 0, 0, 0, 1, 2]^\top\] </li> </ul> <p>Then:</p> \[w_{\text{new}} = w + \psi(x, 2) - \psi(x, 3)\] <p>Apply this update:</p> \[w = \begin{bmatrix} 0.5 \\ -1.0 \\ 0.2 \\ 0.3 \\ -0.4 \\ 1.0 \\ \end{bmatrix} + \begin{bmatrix} 0 \\ 0 \\ 1 \\ 2 \\ 0 \\ 0 \\ \end{bmatrix} - \begin{bmatrix} 0 \\ 0 \\ 0 \\ 0 \\ 1 \\ 2 \\ \end{bmatrix} = \begin{bmatrix} 0.5 \\ -1.0 \\ 1.2 \\ 2.3 \\ -1.4 \\ -1.0 \\ \end{bmatrix}\] <p>This update increases the score for the correct class (2) and decreases the score for the incorrect prediction (3), just like the original multiclass Perceptron but using a single shared weight vector and structured feature representation.</p> <hr/> <h5 id="formalising-via-multivector-construction"><strong>Formalising via Multivector Construction</strong></h5> <p>Consider a simple example where \(x \in \mathbb{R}^2\) and we have 3 classes \(Y = \{1, 2, 3\}\). Suppose we stack the weight vectors for each class together in the following way:</p> \[w = \begin{pmatrix} -\frac{\sqrt{2}}{2}, \frac{\sqrt{2}}{2}, 0, 1, \frac{\sqrt{2}}{2}, \frac{\sqrt{2}}{2} \end{pmatrix}^\top\] <p>Now, define the feature map \(\Psi(x, y)\) as follows:</p> <ul> <li> \[\Psi(x, 1) = (x_1, x_2, 0, 0, 0, 0)\] </li> <li> \[\Psi(x, 2) = (0, 0, x_1, x_2, 0, 0)\] </li> <li> \[\Psi(x, 3) = (0, 0, 0, 0, x_1, x_2)\] </li> </ul> <p>The dot product between the weight vector \(w\) and the feature map \(\Psi(x, y)\) is then:</p> \[\langle w, \Psi(x, y) \rangle = \langle w_y, x \rangle\] <p>This approach allows us to represent all classes using a single weight vector, which is more efficient and scalable.</p> <p>With the multivector construction in place, the multiclass perceptron algorithm can be rewritten as follows:</p> <ol> <li><strong>Initialize</strong> the weight vector \(w = 0\).</li> <li>For \(T\) iterations, repeat the following for each training example \((x, y)\): <ul> <li>Predict \(\hat{y} = \arg\max_{y'} w^\top \psi(x, y')\) (choose the class with the highest score).</li> <li>If \(\hat{y} \neq y\): <ul> <li>Update the weight vector: \(w \leftarrow w + \psi(x, y)\).</li> <li>Update the weight vector: \(w \leftarrow w - \psi(x, \hat{y})\).</li> </ul> </li> </ul> </li> </ol> <p>This version of the algorithm is computationally efficient and scales well to large datasets.</p> <p><strong>Question</strong>: What is the <strong>base binary classification problem</strong> in multiclass perceptron?</p> <p><strong>Answer</strong>: At each update step, the multiclass Perceptron reduces to a binary classification problem between the correct class \(y\) and the predicted class \(\hat{y}\). The model must adjust the weights so that \(y\) scores higher than \(\hat{y}\) — just like in a binary classification setting where one class must be separated from another.</p> <hr/> <h5 id="feature-engineering-for-multiclass-tasks"><strong>Feature Engineering for Multiclass Tasks</strong></h5> <p>To apply the multivector construction in practice, we need to define meaningful and informative features that capture the relationship between the input and each possible class. This is especially important in structured prediction tasks like <strong>part-of-speech (POS) tagging</strong>.</p> <p>Suppose our input space \(X\) consists of all possible words, and our label space \(Y\) contains the categories {NOUN, VERB, ADJECTIVE, ADVERB, etc.}. Each input word needs to be classified into one of these grammatical categories.</p> <p>We can define features that depend on both the input word and the target label — a natural fit for the joint feature map \(\Psi(x, y)\) introduced earlier. For example, some useful features might include:</p> <ul> <li>Whether the word is exactly a specific token (e.g., “run”, “apple”)</li> <li>Whether the word ends in certain suffixes (e.g., “ly” for adverbs)</li> <li>Capitalization or presence of digits (in named entity recognition)</li> </ul> <p>Here are a few sample features written in the multivector style:</p> <ul> <li> \[\psi_1(x, y) = 1[x = \text{apple} \land y = \text{NOUN}]\] </li> <li> \[\psi_2(x, y) = 1[x = \text{run} \land y = \text{NOUN}]\] </li> <li> \[\psi_3(x, y) = 1[x = \text{run} \land y = \text{VERB}]\] </li> <li> \[\psi_4(x, y) = 1[x \text{ ends in } \text{ly} \land y = \text{ADVERB}]\] </li> </ul> <p>Each of these features “activates” only when both the input word and the predicted class match a certain pattern. This is perfectly aligned with the multivector framework, where the model learns weights for specific combinations of features and labels.</p> <h5 id="feature-templates"><strong>Feature Templates</strong></h5> <p>In real-world applications, especially in natural language processing (NLP), we rarely hand-code features for every word. Instead, we use <strong>feature templates</strong> that automatically generate features from observed patterns.</p> <p><strong>What is a Feature Template?</strong></p> <p>A feature template is a <strong>rule or function</strong> that, given an input and a label, produces one or more binary features of the form \(\psi(x, y)\).</p> <p>Templates help create thousands or even millions of features in a structured and consistent way.</p> <p>Let’s say we want to predict the POS tag for the word <strong>“running”</strong> in the sentence:</p> <blockquote> <p>I am <strong>running</strong> late.</p> </blockquote> <p>We might use the following templates:</p> <hr/> <table> <thead> <tr> <th>Template Description</th> <th>Template Rule</th> <th>Example Feature</th> </tr> </thead> <tbody> <tr> <td>Current word</td> <td>\(\psi(x, y) = 1[x = w \land y = y']\)</td> <td>\(x = \text{"running"}, y = \text{VERB}\)</td> </tr> <tr> <td>Word suffix (3 chars)</td> <td>\(\psi(x, y) = 1[x[-3:] = s \land y = y']\)</td> <td>\(x[-3:] = \text{"ing"}, y = \text{VERB}\)</td> </tr> <tr> <td>Previous word is “am”</td> <td>\(\psi(x, y) = 1[\text{prev}(x) = \text{"am"} \land y = y']\)</td> <td>\(y = \text{VERB}\)</td> </tr> <tr> <td>Is capitalized</td> <td>\(\psi(x, y) = 1[x[0].\text{isupper()} \land y = y']\)</td> <td>—</td> </tr> <tr> <td>Prefix (first 2 letters)</td> <td>\(\psi(x, y) = 1[x[:2] = p \land y = y']\)</td> <td>\(x[:2] = \text{"ru"}, y = \text{VERB}\)</td> </tr> </tbody> </table> <hr/> <p>Each of these templates would produce many feature instances across a dataset — and each instance activates only when the corresponding condition holds.</p> <p><strong>Integration with the Model</strong></p> <p>In the multivector model, we don’t store a giant feature matrix explicitly. Instead, we treat each <strong>feature-label pair</strong> \(\psi(x, y)\) as a key that can be mapped to an <strong>index</strong> in a long feature vector. This is done using either:</p> <ul> <li>A <strong>dictionary lookup</strong>, if we predefine all feature-label pairs, or</li> <li>A <strong>hash function</strong>, if we want to compute the index on the fly (common in online or large-scale settings)</li> </ul> <p><strong>Why is this needed?</strong></p> <p>When \(\psi(x, y)\) is represented as a very large sparse vector (e.g. size 100,000+), we don’t want to store all zeros. So instead, we store only the <strong>nonzero features</strong> — each one identified by its <strong>feature name and associated label</strong>.</p> <p>Say we define a feature template:</p> <ul> <li>“Does the word end with ‘ing’?”</li> </ul> <p>Then for the input word <strong>“running”</strong>, and possible labels:</p> <ul> <li> \[\psi(x = \text{running}, y = \text{VERB}) = 1[\text{suffix} = ing \land y = \text{VERB}]\] </li> <li> \[\psi(x = \text{running}, y = \text{NOUN}) = 1[\text{suffix} = ing \land y = \text{NOUN}]\] </li> </ul> <p>These are <strong>two different features</strong>, because they are tied to different labels.</p> <p>We can assign an index to each:</p> <table> <thead> <tr> <th>Feature Name</th> <th>Label</th> <th>Combined Key</th> <th>Index</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">suffix=ing</code></td> <td>VERB</td> <td><code class="language-plaintext highlighter-rouge">suffix=ing_VERB</code></td> <td>1921</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">suffix=ing</code></td> <td>NOUN</td> <td><code class="language-plaintext highlighter-rouge">suffix=ing_NOUN</code></td> <td>2390</td> </tr> </tbody> </table> <p>So \(\psi(x, y)\) is implemented as:</p> <ul> <li>A vector of size (say) 50,000,</li> <li>With a single non-zero at position 1921 or 2390, depending on the label,</li> <li>And the model’s weight vector \(w\) has learned weights at those positions.</li> <li> <p>During prediction, we compute:</p> \[\hat{y} = \arg\max_{y'} w^\top \psi(x, y')\] </li> </ul> <p>This is how the model can <strong>distinguish between “ing” being a verb signal vs a noun signal</strong>, just by associating label-specific versions of the feature. And this feature-to-index mapping is what makes it possible to use linear classifiers with sparse high-dimensional features efficiently.</p> <p><strong>So, Why Feature Templates Matter?</strong></p> <ul> <li>They <strong>automate</strong> feature construction and ensure consistency across training and test data.</li> <li>They <strong>generalize well</strong> — e.g., instead of memorizing that “running” is a verb, a suffix-based feature can generalize that any word ending in “ing” is likely a verb.</li> <li>They are <strong>language-agnostic</strong> to some extent — and can be extended to other structured tasks like NER, chunking, or even machine translation.</li> </ul> <p>This feature-based view, combined with the multivector construction, gives us a powerful and scalable way to build multiclass classifiers, especially in domains like NLP where feature engineering plays a key role.</p> <hr/> <h5 id="conclusion"><strong>Conclusion</strong></h5> <p>We covered how multiclass classification can be tackled using multiclass loss and perceptron algorithms. We highlighted the importance of feature engineering, specifically through feature templates, which help automatically create relevant features for each class. This approach enables efficient, scalable models, especially in tasks like POS tagging. By mapping feature-label pairs to indices, we can handle large datasets without excessive memory usage.</p> <p>Having seen how to generalize the perceptron algorithm, we’ll now move on to explore how <strong>Support Vector Machines (SVMs)</strong> can be extended to handle multiclass classification. Stay tuned and Take care!</p>]]></content><author><name></name></author><category term="ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[Learn the essentials of multiclass classification, focusing on logistic regression, perceptron algorithms, and efficient model building techniques.]]></summary></entry></feed>