<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://monishver11.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://monishver11.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-02T23:43:54+00:00</updated><id>https://monishver11.github.io/feed.xml</id><title type="html">blank</title><subtitle>A clear, theory-focused approach to machine learning, designed to take you beyond the basics. </subtitle><entry><title type="html">Follow the Leader (FL) and Follow the Perturbed Leader (FPL) in Online Learning</title><link href="https://monishver11.github.io/blog/2025/FPL/" rel="alternate" type="text/html" title="Follow the Leader (FL) and Follow the Perturbed Leader (FPL) in Online Learning"/><published>2025-02-01T17:50:00+00:00</published><updated>2025-02-01T17:50:00+00:00</updated><id>https://monishver11.github.io/blog/2025/FPL</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/FPL/"><![CDATA[<p>Online learning is a fascinating area of machine learning where an agent makes sequential decisions, aiming to minimize loss over time. Unlike traditional supervised learning, where a model is trained on a fixed dataset, online learning involves continuously adapting based on feedback from past decisions. One of the simplest and most natural strategies in this setting is <strong>Follow the Leader (FL)</strong>—a method that always picks the action that has performed best in hindsight.</p> <p>While FL is intuitive, it has critical weaknesses that make it unreliable in adversarial settings. To address these limitations, a more robust strategy called <strong>Follow the Perturbed Leader (FPL)</strong> was introduced, which introduces randomness to stabilize decision-making. In this post, we will explore the core ideas behind FL and FPL, develop their mathematical formulations, and derive their performance bounds.</p> <h5 id="learning-from-structure-decomposing-losses"><strong>Learning from Structure: Decomposing Losses</strong></h5> <p>Many learning problems can be framed in terms of minimizing cumulative loss, which often decomposes naturally across substructures. For instance, in structured prediction tasks, the total loss may be expressed as a sum over smaller components such as:</p> <ul> <li>The sum of losses along edges in a tree.</li> <li>The sum of losses along a specific path in a graph.</li> <li>The sum of individual substructure losses in a discrete optimization problem.</li> <li>The cumulative loss incurred in an expert setting, where multiple strategies are available, and the goal is to learn from the best-performing one.</li> </ul> <p>This decomposition plays a key role in designing online learning algorithms, as it allows us to analyze decision-making strategies in a structured manner.</p> <p>[What?]</p> <h4 id="the-follow-the-leader-fl-strategy"><strong>The Follow the Leader (FL) Strategy</strong></h4> <p>To formalize the <strong>Follow the Leader</strong> approach, let’s consider a general linear decision problem. At each round \(t\), a player selects a decision \(w_t\) from a set \(W\). Once the decision is made, the environment reveals a loss vector \(x_t\), and the player incurs a loss given by the inner product:</p> \[L_t = w_t \cdot x_t\] <p>The objective is to minimize the cumulative loss over \(T\) rounds:</p> \[L_T = \sum_{t=1}^{T} w_t \cdot x_t\] <p>Alternatively, we can evaluate performance through <strong>regret</strong>, which measures how much worse our strategy is compared to the best fixed action in hindsight:</p> \[\text{Regret}_T = L_T - \min_{w \in W} \sum_{t=1}^{T} w \cdot x_t\] <p>The <strong>Follow the Leader</strong> strategy takes a straightforward approach: at each step, it selects the action that has performed best so far. Mathematically, this means choosing:</p> \[w_t = \arg\min_{w \in W} \sum_{s=1}^{t-1} w \cdot x_s\] <p>This approach, sometimes referred to as <strong>fictitious play</strong>, seems reasonable—after all, picking the historically best-performing action should be a good idea, right? However, FL has a major flaw: it can be <strong>highly unstable</strong>. In adversarial settings, small changes in past losses can cause large shifts in decisions, leading to poor performance.</p> <p>To illustrate this, consider a simple scenario where we alternate between two actions. If FL starts with an initial action and then alternates between two different ones, it can end up incurring a loss of 1 at every round, whereas a fixed expert strategy would accumulate much less loss. This instability calls for a more robust alternative.</p> <p>[Example not very clear. Need a better intuition and anology to interpret this.]</p> <h4 id="follow-the-perturbed-leader-fpl-adding-randomization"><strong>Follow the Perturbed Leader (FPL): Adding Randomization</strong></h4> <p>A simple yet effective modification to FL is <strong>Follow the Perturbed Leader (FPL)</strong>. The idea is to <strong>introduce random noise</strong> before selecting the best action, preventing the algorithm from making overly rigid choices based on past data.</p> <p>Instead of selecting the exact leader, FPL picks an action by solving:</p> \[w_t = \arg\min_{w \in W} \left( \sum_{s=1}^{t-1} w \cdot x_s + w \cdot p_t \right)\] <p>where \(p_t\) is a random perturbation added to the cumulative loss. This small tweak dramatically improves performance in adversarial settings by preventing sudden shifts in decisions.</p> <p>A common choice for the perturbation is uniform noise:</p> \[p_t \sim U([0, 1/\epsilon]^N)\] <p>which ensures that no two actions have exactly the same cumulative loss, effectively breaking ties in a randomized manner. Another approach is to use <strong>multiplicative perturbations</strong>, where the noise follows a Laplacian distribution:</p> \[f(x) = \frac{\epsilon}{2} e^{-\epsilon \|x\|_1}\] <p>This version, referred to as <strong>FPL</strong>*, has even stronger guarantees and is particularly effective in adversarial settings. The theoretical analysis of FPL dates back to <strong>Hannan (1957)</strong> and was later refined by <strong>Kalai &amp; Vempala (2004)</strong>.</p> <hr/> <blockquote> <p>Follow-Up Questions!</p> </blockquote> <h5 id="is-fpl-an-online-learning-strategy-similar-to-the-randomized-weighted-majority-algorithm-rwma-or-is-it-something-else-designed-for-specific-cases"><strong>Is FPL an online learning strategy similar to the Randomized Weighted Majority Algorithm (RWMA), or is it something else designed for specific cases?</strong></h5> <p>Yes, Follow the Perturbed Leader (FPL) is an online learning strategy, and it shares some similarities with the Randomized Weighted Majority Algorithm (RWMA) in that both incorporate randomness to improve decision-making and achieve better regret bounds. However, their underlying mechanisms differ.</p> <ul> <li> <p><strong>RWMA (Randomized Weighted Majority Algorithm)</strong>:<br/> This is an expert-based algorithm where the learner maintains a set of expert weights, updating them multiplicatively based on incurred losses. RWMA is particularly effective in adversarial settings and can be viewed as a special case of Exponentiated Gradient (EG) methods. Its main idea is to give more weight to the experts who perform well, based on past performance.</p> </li> <li> <p><strong>FPL (Follow the Perturbed Leader)</strong>:<br/> FPL, on the other hand, introduces random perturbations to the past loss values before selecting the best action. This process smooths decision-making, avoiding the instability seen in Follow the Leader (FL) while keeping the simplicity of choosing the best historical action.</p> </li> </ul> <p>FPL is especially useful when working with linear loss functions and structured decision spaces, such as combinatorial optimization problems (e.g., shortest paths, spanning trees). It is closely related to mirror descent and regularization-based algorithms and, in some cases, can be viewed as an implicit form of regularization via perturbations.</p> <p><strong>Key Differences:</strong></p> <ul> <li><strong>RWMA</strong> is expert-based, where weights are adjusted multiplicatively based on performance.</li> <li><strong>FPL</strong> uses random perturbations to past losses, making it more general and suitable for structured decision-making problems, particularly in combinatorial settings.</li> </ul> <p>In summary, while both algorithms use randomness to stabilize learning, RWMA is more tailored to expert settings, while FPL is a broader decision-making framework effective for combinatorial and structured problems.</p> <h5 id="what-do-we-mean-by-structured-problems"><strong>What Do We Mean by Structured Problems?</strong></h5> <p>A <strong>structured problem</strong> refers to a decision-making setting where the available choices or actions have an underlying structure, often governed by combinatorial, geometric, or graph-based constraints. Instead of choosing from a simple finite set of actions (like in a standard multi-armed bandit or expert setting), the learner must select complex objects such as:</p> <ul> <li><strong>Paths in a graph</strong> (e.g., shortest path routing)</li> <li><strong>Spanning trees</strong> (e.g., network design)</li> <li><strong>Matchings in a bipartite graph</strong> (e.g., job allocation)</li> <li><strong>Binary vectors with constraints</strong> (e.g., feature selection)</li> <li><strong>Matrices or sequences</strong> (e.g., scheduling problems)</li> </ul> <p>In these cases, the decision space is often exponentially large, making direct enumeration or simple expert-based approaches infeasible.</p> <hr/> <h5 id="why-does-flfpl-apply-to-structured-problems"><strong>Why Does FL/FPL Apply to Structured Problems?</strong></h5> <p>The <strong>Follow the Leader (FL)</strong> and <strong>Follow the Perturbed Leader (FPL)</strong> strategies naturally extend to structured problems because:</p> <ol> <li> <p><strong>Linear Loss Structure</strong>: Many structured problems can be formulated in terms of a linear loss function over the structure. For example, if selecting a path in a graph, the total loss might be the sum of edge losses along the path. FL/FPL directly works with such additive losses.</p> </li> <li> <p><strong>Combinatorial Decision Spaces</strong>: Since the space of possible decisions is structured (e.g., spanning trees, paths), explicitly maintaining weights over all choices, as in the Weighted Majority Algorithm, is impractical. Instead, FL/FPL selects actions by solving an optimization problem over the structured space.</p> </li> <li> <p><strong>Computational Feasibility</strong>: The FL and FPL updates involve solving an argmin optimization problem over past losses:</p> </li> </ol> \[w_t = \arg \min_{w \in W} \sum_{s=1}^{t-1} w \cdot x_s\] <p>This optimization often reduces to a well-known combinatorial problem, such as minimum spanning tree, shortest path, or maximum matching, which can be solved efficiently using algorithms from combinatorial optimization.</p> <hr/> <h5 id="how-does-flfpl-work-in-structured-settings"><strong>How Does FL/FPL Work in Structured Settings?</strong></h5> <ul> <li> <p><strong>Follow the Leader (FL)</strong>:<br/> FL picks the structure (e.g., path, tree) that has accumulated the lowest loss so far. However, FL is unstable in adversarial settings because a small change in losses can drastically change the optimal structure.</p> </li> <li> <p><strong>Follow the Perturbed Leader (FPL)</strong>:<br/> FPL introduces random perturbations to smooth decision-making. The learner solves:</p> </li> </ul> \[w_t = \arg \min_{w \in W} \sum_{s=1}^{t-1} w \cdot x_s + w \cdot p_t\] <p>where \(p_t\) is a noise vector. This prevents overfitting to small loss differences and ensures better stability.</p> <hr/> <p><strong>Key Takeaways:</strong></p> <ul> <li><strong>FL/FPL</strong> applies well to structured problems where decisions involve combinatorial choices rather than simple finite sets.</li> <li><strong>FL</strong> works when losses are additive over substructures, but it is unstable in adversarial settings.</li> <li><strong>FPL</strong> improves stability by adding randomness, making it a powerful tool for structured online learning.</li> </ul> <p>This is why FL/FPL is commonly used in structured online learning, where actions have combinatorial dependencies, and stability is crucial.</p> <h5 id="understanding-structured-problems-an-intuition"><strong>Understanding Structured Problems: An Intuition</strong></h5> <p>Imagine you’re navigating a city using Google Maps, and every road has a <strong>traffic delay</strong> (which changes over time).</p> <p>Your goal is to pick the best route (shortest travel time) every day. The total delay you experience is the sum of individual road delays along your chosen path.</p> <p>This is an example of a <strong>structured decision problem</strong>, because:</p> <ul> <li>✅ You’re not picking a single element (e.g., a traffic light or a road segment).</li> <li>✅ You’re picking a structured object—a full <strong>path</strong> (set of roads that form a connected route).</li> <li>✅ The <strong>loss</strong> (delay) of a path is determined by the sum of its parts (individual road delays).</li> </ul> <hr/> <h5 id="contrast-with-expert-based-settings"><strong>Contrast with Expert-Based Settings</strong></h5> <p>Now, contrast this with a typical <strong>expert-based setting</strong>, like a multi-armed bandit:</p> <ul> <li>If Google simply gave you a few pre-defined <strong>expert routes</strong>, and you chose among them, it wouldn’t be flexible.</li> <li>If a road suddenly gets blocked, <strong>all routes</strong> using that road become bad at once, and the whole system collapses.</li> <li><strong>Expert algorithms</strong> assume fixed actions, but in <strong>structured problems</strong>, you can dynamically build better solutions.</li> </ul> <p>Instead of treating entire routes as fixed “experts,” <strong>FL/FPL</strong> can adaptively construct the best route based on updated delays.</p> <hr/> <h5 id="why-flfpl-is-better-for-structured-problems"><strong>Why FL/FPL is Better for Structured Problems</strong></h5> <p><strong>Expert-Based Methods Struggle with Exponentially Large Action Spaces</strong></p> <p>If we use an <strong>expert-based algorithm</strong>, we’d need to maintain weights over all possible routes, but the number of possible paths grows exponentially. Instead of tracking every possible path, <strong>FL/FPL</strong> works directly with roads (substructures), summing losses efficiently.</p> <p><strong>Follow the Leader (FL) Uses the Best Past Route</strong></p> <p>In each round, FL picks the route with the <strong>lowest total delay</strong> so far. However, FL is <strong>unstable</strong>—if one road suddenly gets bad, it can completely switch to a totally different route, causing large fluctuations.</p> <p><strong>Follow the Perturbed Leader (FPL) Adds Stability</strong></p> <p>Instead of blindly trusting past delays, <strong>FPL adds a small random perturbation</strong> to each road’s delay before choosing a route. This prevents overcommitting to minor variations and makes the algorithm <strong>more robust</strong> to sudden changes.</p> <p><strong>Analogy to Buying Stocks</strong></p> <p>Imagine you’re <strong>investing in stocks</strong>, but instead of picking one stock, you must build a <strong>diverse portfolio</strong> that balances risk and return.</p> <ul> <li><strong>Expert-based algorithms</strong>: Pick among a few predefined portfolios (e.g., S&amp;P 500, Tech stocks, Bonds).</li> <li><strong>FL/FPL</strong>: Dynamically construct a portfolio on the fly, adjusting based on the sum of individual stock performances.</li> </ul> <p>If one stock suddenly crashes, expert-based strategies might still stick to a bad portfolio, while <strong>FL/FPL</strong> <strong>rebalances adaptively</strong>.</p> <p><strong>Final Takeaway:</strong></p> <ul> <li><strong>FL/FPL</strong> works well for structured problems where decisions are not independent (like picking a single stock) but instead composed of multiple interacting elements (like building a portfolio or choosing a route).</li> <li><strong>FL</strong> is too <strong>reactive</strong>, making drastic changes when small variations happen.</li> <li><strong>FPL</strong> stabilizes decisions, avoiding erratic shifts and leading to <strong>better long-term performance</strong>.</li> </ul> <p>This is why <strong>FL/FPL</strong> is widely used in <strong>structured online learning</strong>, like routing, combinatorial optimization, and dynamic decision-making.</p> <hr/> <h4 id="theoretical-bounds-for-fpl"><strong>Theoretical Bounds for FPL</strong></h4> <p>A crucial advantage of FPL is that it achieves <strong>sublinear regret</strong>, meaning that over time, its cumulative loss approaches that of the best fixed decision. We now present regret bounds for both the <strong>additive</strong> and <strong>multiplicative</strong> versions of FPL.</p> <h5 id="additive-fpl-bound"><strong>Additive FPL Bound</strong></h5> <p>For a fixed \(\epsilon &gt; 0\), the expected cumulative loss of <strong>FPL with additive perturbations</strong> is bounded as:</p> \[E[L_T] \leq L_T^{\min} + \epsilon R X_1 T + \frac{W_1}{\epsilon}\] <p>By choosing an optimal \(\epsilon\) value:</p> \[\epsilon = \sqrt{\frac{W_1}{R X_1 T}}\] <p>we obtain the bound:</p> \[E[L_T] \leq L_T^{\min} + 2 \sqrt{X_1 W_1 R T}\] <p>which ensures that the regret grows sublinearly with \(T\), implying that as time progresses, the algorithm performs nearly as well as the best fixed action in hindsight.</p> <h5 id="multiplicative-fpl-bound"><strong>Multiplicative FPL* Bound</strong></h5> <p>For <strong>FPL</strong>* with multiplicative perturbations, the expected cumulative loss is bounded by:</p> \[E[L_T] \leq L_T^{\min} + 4 \sqrt{L_T^{\min} X_1 W_1 (1 + \log N)} + 4 X_1 W_1 (1 + \log N)\] <p>where the optimal choice of \(\epsilon\) is:</p> \[\epsilon = \min \left( \frac{1}{2X_1}, \sqrt{\frac{W_1(1 + \log N)}{X_1 L_T^{\min}}} \right)\] <p>This bound highlights the benefits of <strong>multiplicative perturbations</strong>, which further stabilize decision-making in adversarial scenarios.</p> <h5 id="conclusion"><strong>Conclusion</strong></h5> <p>The <strong>Follow the Leader (FL)</strong> algorithm, while simple, suffers from instability in adversarial settings. By introducing <strong>random perturbations</strong>, the <strong>Follow the Perturbed Leader (FPL)</strong> approach overcomes these weaknesses, ensuring better performance over time.</p> <ul> <li><strong>Additive perturbations</strong> smooth out decision-making, reducing instability.</li> <li><strong>Multiplicative perturbations (FPL*)</strong> provide even stronger guarantees, particularly in adversarial environments.</li> </ul> <p>By leveraging <strong>randomization</strong>, FPL achieves <strong>better regret bounds</strong>, making it a powerful tool in online learning. These ideas form the foundation for many modern online learning algorithms, and understanding them provides valuable insight into sequential decision-making strategies.</p> <p>If you’re interested in diving deeper into online learning, stay tuned for more explorations into regret minimization techniques and advanced algorithms!</p>]]></content><author><name></name></author><category term="ADV-ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[Discover how Follow the Leader (FL) and Follow the Perturbed Leader (FPL) work in online learning, their mathematical foundations, and how perturbations help achieve better stability and regret bounds.]]></summary></entry><entry><title type="html">Bayesian Conditional Models</title><link href="https://monishver11.github.io/blog/2025/bayes-conditional-models/" rel="alternate" type="text/html" title="Bayesian Conditional Models"/><published>2025-01-31T19:37:00+00:00</published><updated>2025-01-31T19:37:00+00:00</updated><id>https://monishver11.github.io/blog/2025/bayes-conditional-models</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/bayes-conditional-models/"><![CDATA[<p>In machine learning, making predictions is not just about estimating the most likely outcome. It’s also about understanding <strong>uncertainty</strong> and making informed decisions based on available data. Traditional <strong>frequentist methods</strong> typically estimate a single best-fit parameter using approaches like Maximum Likelihood Estimation (MLE). While effective, this approach does not quantify the uncertainty in parameter estimates or predictions.</p> <p>Bayesian conditional models, on the other hand, take a <strong>probabilistic approach</strong>. Instead of committing to a single parameter estimate, they maintain a <strong>distribution over possible parameters</strong>. By incorporating prior beliefs and updating them as new data arrives, Bayesian models allow us to make <strong>predictions that inherently capture uncertainty</strong>. This is achieved through <strong>posterior predictive distributions</strong>, which average over all possible models rather than selecting just one.</p> <p>In this post, we will explore Bayesian conditional models in depth—how they work, how they differ from frequentist approaches, and how they allow for <strong>more robust decision-making under uncertainty</strong>.</p> <h4 id="bayesian-conditional-models-the-basics"><strong>Bayesian Conditional Models: The Basics</strong></h4> <p>To set up the problem, consider the following:</p> <ul> <li><strong>Input space</strong>: \(X = \mathbb{R}^d\), representing feature vectors.</li> <li><strong>Outcome space</strong>: \(Y = \mathbb{R}\), representing target values.</li> </ul> <p>A <strong>Bayesian conditional model</strong> consists of two main components:</p> <ol> <li> <p>A <strong>parametric family</strong> of conditional probability densities:</p> \[\{ p(y \mid x, \theta) : \theta \in \Theta \}\] </li> <li> <p>A <strong>prior distribution</strong> \(p(\theta)\), which represents our beliefs about \(\theta\) before observing any data.</p> </li> </ol> <p>The prior acts as a <strong>regularization mechanism</strong>, preventing overfitting by incorporating external knowledge into our model. Once we observe data, we update this prior to obtain a <strong>posterior distribution</strong> over the parameters.</p> <hr/> <p><strong>Q: How does the prior prevent overfitting?</strong><br/> The prior \(p(\theta)\) assigns probability to different parameter values before seeing any data. This prevents the model from fitting noise in the data by <strong>restricting extreme values</strong> of \(\theta\). When combined with the likelihood, it balances between prior beliefs and observed data.</p> <p><strong>Q: Why does this help?</strong></p> <ul> <li>It <strong>controls model complexity</strong>, ensuring we don’t fit spurious patterns.</li> <li>It <strong>biases the model toward reasonable solutions</strong>, especially in low-data regimes.</li> <li>It <strong>smooths predictions</strong>, preventing sharp jumps caused by noisy observations.</li> </ul> <p><strong>Q: What happens after observing data?</strong><br/> The prior is updated using Bayes’ rule to form the <strong>posterior</strong>:</p> \[p(\theta \mid D) \propto p(D \mid \theta) p(\theta)\] <p>This posterior now reflects both the <strong>initial beliefs</strong> and the <strong>information from the data</strong>, striking a balance between flexibility and regularization.</p> <p><strong>Q: How is this similar to frequentist regularization?</strong><br/> In frequentist methods, regularization terms (e.g., L2 in ridge regression) <strong>penalize large parameter values</strong>. Bayesian priors achieve a similar effect, but instead of a fixed penalty, they provide a <strong>probabilistic framework</strong> that adapts as more data is observed.</p> <p>Thus, the prior serves as a <strong>principled way to regularize models</strong>, ensuring robustness while allowing adaptation as more evidence accumulates.</p> <hr/> <h5 id="the-posterior-distribution"><strong>The Posterior Distribution</strong></h5> <p>The <strong>posterior distribution</strong> is the foundation of Bayesian inference. It represents our updated belief about the parameter \(\theta\) after observing data \(D\). Using <strong>Bayes’ theorem</strong>, we compute:</p> \[p(\theta \mid D, x) \propto p(D \mid \theta, x) p(\theta)\] <p>where:</p> <ul> <li>\(p(D \mid \theta, x)\) is the <strong>likelihood function</strong> \(L_D(\theta)\), describing how likely the data is given the parameter \(\theta\).</li> <li>\(p(\theta)\) is the <strong>prior</strong> distribution, encoding our prior knowledge about \(\theta\).</li> </ul> <p>This updated posterior distribution allows us to make <strong>probabilistically sound predictions</strong> while explicitly incorporating uncertainty.</p> <h5 id="estimating-parameters-point-estimates"><strong>Estimating Parameters: Point Estimates</strong></h5> <p>While Bayesian inference provides a full posterior distribution over \(\theta\), sometimes we may need a single point estimate. Different choices arise depending on the loss function we minimize:</p> <ul> <li> <p><strong>Posterior mean</strong>:</p> \[\hat{\theta} = \mathbb{E}[\theta \mid D, x]\] <p>This minimizes squared error loss.</p> </li> <li> <p><strong>Posterior median</strong>:</p> \[\hat{\theta} = \text{median}(\theta \mid D, x)\] <p>This minimizes absolute error loss.</p> </li> <li> <p><strong>Maximum a posteriori (MAP) estimate</strong>:</p> \[\hat{\theta} = \arg\max_{\theta \in \Theta} p(\theta \mid D, x)\] <p>This finds the most probable parameter value under the posterior.</p> </li> </ul> <p>Each approach has its advantages, and the choice depends on the <strong>application and the cost of different types of errors</strong>.</p> <h4 id="bayesian-prediction-function"><strong>Bayesian Prediction Function</strong></h4> <p>The goal of any supervised learning method is to learn a function that maps input \(x \in X\) to a distribution over outputs \(Y\). The key difference between frequentist and Bayesian approaches lies in how they achieve this.</p> <h5 id="frequentist-approach"><strong>Frequentist Approach</strong></h5> <p>In a frequentist framework:</p> <ol> <li>We choose a <strong>hypothesis space</strong>—a family of conditional probability densities.</li> <li>We estimate a single best-fit parameter \(\hat{\theta}(D)\) using MLE or another optimization method.</li> <li>We make predictions using \(p(y \mid x, \hat{\theta}(D))\), ignoring uncertainty in \(\theta\).</li> </ol> <h5 id="bayesian-approach"><strong>Bayesian Approach</strong></h5> <p>In contrast, Bayesian methods:</p> <ol> <li>Define a <strong>parametric family</strong> of conditional densities \(\{ p(y \mid x, \theta) : \theta \in \Theta \}\).</li> <li>Specify a <strong>prior distribution</strong> \(p(\theta)\).</li> <li>Instead of selecting a single best-fit \(\theta\), integrate over all possible parameters using the posterior.</li> </ol> <p>This results in a <strong>predictive distribution</strong> that <strong>preserves model uncertainty</strong> rather than discarding it.</p> <h5 id="the-prior-and-posterior-predictive-distributions"><strong>The Prior and Posterior Predictive Distributions</strong></h5> <p>Even before observing any data, we can make predictions using the <strong>prior predictive distribution</strong>:</p> \[p(y \mid x) = \int p(y \mid x, \theta) p(\theta) d\theta\] <p>This represents an average over all conditional densities, weighted by the prior \(p(\theta)\). Once we observe data \(D\), we compute the <strong>posterior predictive distribution</strong>:</p> \[p(y \mid x, D) = \int p(y \mid x, \theta) p(\theta \mid D) d\theta\] <p>This distribution takes into account both the likelihood and prior, providing <strong>updated predictions</strong> that reflect the data.</p> <p>[How to make intuitive sense of this? and What happens if we do this? and What if not?]</p> <hr/> <p><strong>Q: What does the prior predictive distribution represent?</strong><br/> It represents predictions before observing data, averaging over all possible parameter values based on the prior:</p> \[p(y \mid x) = \int p(y \mid x, \theta) p(\theta) d\theta\] <p><strong>Q: What changes after observing data?</strong><br/> We update our predictions using the <strong>posterior predictive distribution</strong>, which incorporates both prior beliefs and observed data:</p> \[p(y \mid x, D) = \int p(y \mid x, \theta) p(\theta \mid D) d\theta\] <p><strong>Q: Why use the posterior predictive distribution?</strong></p> <ul> <li>It refines predictions using observed data.</li> <li>It accounts for uncertainty by integrating over posterior \(p(\theta \mid D)\).</li> <li>It prevents overconfident predictions from a single parameter estimate.</li> </ul> <p><strong>Q: What if we don’t use it?</strong></p> <ul> <li>Using only the prior predictive distribution leads to uninformed predictions.</li> <li>Relying on a single \(\theta\) (e.g., MLE) ignores uncertainty, increasing overconfidence.</li> <li>Ignoring parameter uncertainty may lead to suboptimal decisions.</li> </ul> <p><strong>Takeaway:</strong> The posterior predictive distribution provides well-calibrated, data-driven predictions while maintaining uncertainty estimates.</p> <hr/> <h5 id="comparing-bayesian-and-frequentist-approaches"><strong>Comparing Bayesian and Frequentist Approaches</strong></h5> <p>A fundamental difference between Bayesian and frequentist methods is how they treat parameters:</p> <ul> <li>In <strong>Bayesian inference</strong>, \(\theta\) is a <strong>random variable</strong> with a prior \(p(\theta)\) and a posterior \(p(\theta \mid D)\).</li> <li>In <strong>frequentist inference</strong>, \(\theta\) is a <strong>fixed but unknown</strong> quantity estimated from data.</li> </ul> <p>This distinction leads to different prediction strategies:</p> <ul> <li> <p><strong>Frequentist prediction</strong>: Select \(\hat{\theta}(D)\) and compute:</p> \[p(y \mid x, \hat{\theta}(D))\] </li> <li> <p><strong>Bayesian prediction</strong>: Integrate over all possible values of \(\theta\):</p> \[p(y \mid x, D) = \int p(y \mid x, \theta) p(\theta \mid D) d\theta\] </li> </ul> <p>By integrating over all plausible parameter values, Bayesian methods naturally handle <strong>uncertainty and variability</strong> in the data.</p> <p>[Still how integrating over theta handles the uncertainity?]</p> <hr/> <p><strong>Q: What does uncertainty mean in this context?</strong><br/> Uncertainty refers to the fact that we don’t know the exact value of \(\theta\), the parameter governing our model. Instead of picking a single estimate, we recognize multiple plausible values.</p> <p><strong>Q: How does the frequentist approach handle uncertainty?</strong><br/> It estimates a single \(\hat{\theta}(D)\) from data and assumes it to be the true value. Any uncertainty in \(\hat{\theta}\) is typically quantified using confidence intervals but isn’t directly incorporated into predictions.</p> <p><strong>Q: How does the Bayesian approach handle uncertainty?</strong><br/> Instead of selecting a single \(\theta\), Bayesian methods integrate over all possible values weighted by their posterior probability:</p> \[p(y \mid x, D) = \int p(y \mid x, \theta) p(\theta \mid D) d\theta\] <p>This accounts for parameter uncertainty by considering all plausible models rather than committing to just one.</p> <p><strong>Q: Is Integrating Over \(\theta\) the Same as Marginalizing It?</strong></p> <p>Yes, integrating over \(\theta\) in Bayesian inference is effectively <strong>marginalizing</strong> it out. When computing the <strong>posterior predictive distribution</strong>,</p> \[p(y \mid x, D) = \int p(y \mid x, \theta) p(\theta \mid D) d\theta\] <p>we sum (integrate) over all possible values of \(\theta\), weighted by their posterior probability \(p(\theta \mid D)\). This removes \(\theta\) as an explicit parameter, ensuring predictions reflect all plausible values rather than relying on a single estimate. In contrast, frequentist methods select a single \(\hat{\theta}\) (e.g., MLE or MAP), which does not account for uncertainty in \(\theta\). By marginalizing \(\theta\), Bayesian inference naturally incorporates parameter uncertainty, leading to more robust and well-calibrated predictions.</p> <hr/> <h5 id="making-point-predictions-from-py-mid-x-d"><strong>Making Point Predictions from \(p(y \mid x, D)\)</strong></h5> <p>Once we have the full predictive distribution, we can extract <strong>point predictions</strong> depending on the loss function we wish to minimize:</p> <ul> <li> <p><strong>Mean prediction</strong> (minimizing squared error loss):</p> \[\mathbb{E}[y \mid x, D]\] </li> <li> <p><strong>Median prediction</strong> (minimizing absolute error loss):</p> \[\text{median}(y \mid x, D)\] </li> <li> <p><strong>Mode (MAP estimate of \(y\))</strong> (minimizing 0/1 loss):</p> \[\arg\max_{y \in Y} p(y \mid x, D)\] </li> </ul> <p>Each of these choices is derived directly from the <strong>posterior predictive distribution</strong>, making Bayesian methods highly flexible for different objectives.</p> <hr/> <blockquote> <p>Okay, everything makes sense now, but what’s the real difference between all these Bayesian topics we’ve learned?</p> </blockquote> <p>Bayesian Conditional Models, Bayes Point Estimation, and Bayesian Decision Theory are all part of the broader Bayesian framework, but they serve different purposes. Here’s how they differ:</p> <h5 id="1-bayesian-conditional-models-bcm--a-probabilistic-approach-to-prediction"><strong>1. Bayesian Conditional Models (BCM) – A Probabilistic Approach to Prediction</strong></h5> <p>Bayesian Conditional Models focus on modeling <strong>conditional distributions</strong> of an outcome \(Y\) given an input \(X\). Instead of choosing a single best function or parameter, BCM maintains a <strong>distribution over possible models</strong> and integrates over uncertainty.</p> <ul> <li><strong>Key Idea</strong>: Instead of selecting a fixed hypothesis (as in frequentist methods), we consider an entire <strong>distribution over models</strong> and use it for making predictions.</li> <li><strong>Mathematical Formulation</strong>: <ul> <li><strong>Prior Predictive Distribution</strong> (before observing data):<br/> \(p(y | x) = \int p(y | x, \theta) p(\theta) d\theta\)</li> <li><strong>Posterior Predictive Distribution</strong> (after observing data \(D\)):<br/> \(p(y | x, D) = \int p(y | x, \theta) p(\theta | D) d\theta\)</li> </ul> </li> <li><strong>Relation to Other Concepts</strong>: BCM extends Bayesian inference to <strong>predictive modeling</strong>, ensuring that uncertainty is incorporated directly into the predictions.</li> </ul> <h5 id="2-bayes-point-estimation-bpe--a-single-best-estimate-of-parameters"><strong>2. Bayes Point Estimation (BPE) – A Single Best Estimate of Parameters</strong></h5> <p>Bayes Point Estimation, in contrast, is about finding a <strong>single “best” estimate</strong> for the model parameters \(\theta\), given the posterior distribution \(p(\theta \mid D)\). It’s a simplification of full Bayesian inference when we need a point estimate rather than an entire distribution.</p> <ul> <li><strong>Key Idea</strong>: Instead of integrating over all possible parameters, we select a <strong>single representative parameter</strong> from the posterior.</li> <li><strong>Common Choices</strong>: <ul> <li><strong>Posterior Mean</strong>:<br/> \(\hat{\theta} = \mathbb{E}[\theta \mid D]\)<br/> (Minimizes squared error)</li> <li><strong>Posterior Median</strong>:<br/> \(\hat{\theta} = \text{median}(\theta \mid D)\)<br/> (Minimizes absolute error)</li> <li><strong>Maximum a Posteriori (MAP) Estimate</strong>:<br/> \(\hat{\theta} = \arg\max_{\theta} p(\theta \mid D)\)<br/> (Maximizes posterior probability)</li> </ul> </li> <li><strong>Difference from BCM</strong>: BCM keeps the full predictive distribution, while BPE collapses uncertainty into a single parameter choice.</li> </ul> <h5 id="3-bayesian-decision-theory-bdt--making-optimal-decisions-with-uncertainty"><strong>3. Bayesian Decision Theory (BDT) – Making Optimal Decisions with Uncertainty</strong></h5> <p>Bayesian Decision Theory extends Bayesian inference to <strong>decision-making</strong>. It incorporates a <strong>loss function</strong> to determine the best action given uncertain outcomes.</p> <ul> <li><strong>Key Idea</strong>: Instead of just estimating parameters, we aim to make an <strong>optimal decision</strong> that minimizes expected loss.</li> <li> <p><strong>Mathematical Formulation</strong>: Given a loss function \(L(a, y)\) for action \(a\) and outcome \(y\), the optimal action is:<br/> \(a^* = \arg\min_a \mathbb{E}[L(a, Y) \mid D]\)</p> </li> <li><strong>Relation to BCM</strong>: <ul> <li>BCM provides a <strong>full predictive distribution</strong> of \(Y\), which is then used in BDT to make optimal decisions.</li> <li>If we only care about a <strong>single estimate</strong>, we apply Bayes Point Estimation within BDT.</li> </ul> </li> </ul> <h5 id="summary-of-differences"><strong>Summary of Differences</strong></h5> <hr/> <table> <thead> <tr> <th>Concept</th> <th>Focus</th> <th>Key Idea</th> <th>Output</th> </tr> </thead> <tbody> <tr> <td><strong>Bayesian Conditional Models (BCM)</strong></td> <td>Predicting \(Y\) given \(X\)</td> <td>Maintain a <strong>distribution over possible models</strong></td> <td>A full <strong>predictive distribution</strong> \(p(y \vert x, D)\)</td> </tr> <tr> <td><strong>Bayes Point Estimation (BPE)</strong></td> <td>Estimating model parameters \(\theta\)</td> <td>Choose a <strong>single best estimate</strong> from the posterior</td> <td>A point estimate \(\hat{\theta}\) (e.g., posterior mean, MAP)</td> </tr> <tr> <td><strong>Bayesian Decision Theory (BDT)</strong></td> <td>Making optimal decisions</td> <td>Select the <strong>best action</strong> based on a loss function</td> <td>An action \(a^*\) that minimizes expected loss</td> </tr> </tbody> </table> <hr/> <h5 id="how-are-they-related"><strong>How Are They Related?</strong></h5> <ul> <li><strong>BCM</strong> gives a full probabilistic model.</li> <li><strong>BPE</strong> summarizes that model by choosing a single parameter estimate.</li> <li><strong>BDT</strong> takes the <strong>posterior predictive distribution</strong> (from BCM) and <strong>makes decisions</strong> by minimizing expected loss.</li> </ul> <p>So, <strong>Bayesian Conditional Models are a more general framework</strong> that encompasses both Bayesian Point Estimation and Bayesian Decision Theory as special cases when we either want a point estimate or a decision-making strategy.</p> <hr/> <h5 id="practical-applications-of-bayesian-conditional-models"><strong>Practical Applications of Bayesian Conditional Models</strong></h5> <p>Bayesian conditional models are widely used in various fields where uncertainty plays a crucial role:</p> <ul> <li><strong>Medical Diagnosis &amp; Healthcare</strong>: Bayesian models help in probabilistic disease prediction, patient risk assessment, and adaptive clinical trials where data is limited.</li> <li><strong>Finance &amp; Risk Management</strong>: Used for credit scoring, fraud detection, and portfolio optimization, where uncertainty in market conditions needs to be modeled explicitly.</li> <li><strong>Autonomous Systems &amp; Robotics</strong>: Bayesian approaches help robots and self-driving cars make <strong>decisions under uncertainty</strong>, such as obstacle avoidance and motion planning.</li> <li><strong>Recommendation Systems</strong>: Bayesian methods improve user personalization by adapting to changing preferences with uncertainty-aware updates.</li> </ul> <hr/> <h5 id="conclusion"><strong>Conclusion</strong></h5> <p>Bayesian conditional models provide a <strong>principled and uncertainty-aware</strong> approach to prediction. Unlike frequentist methods, which estimate a single best-fit parameter, Bayesian inference maintains <strong>a full distribution over parameters</strong> and updates beliefs as new data arrives. This allows for <strong>more robust, probabilistically grounded predictions</strong>, making Bayesian methods an essential tool in modern machine learning.</p> <p>By integrating over possible hypotheses rather than committing to one, Bayesian models naturally <strong>quantify uncertainty</strong> and adapt to new information, making them particularly useful in scenarios with limited data or high variability.</p> <hr/> <p>Questions to answer:</p> <ul> <li>How its integrated in ML or how to use it with all that we learned?</li> <li>where it’s practically applied?</li> </ul>]]></content><author><name></name></author><category term="ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[Learn how Bayesian conditional models leverage prior knowledge, posterior updates, and predictive distributions to make principled, uncertainty-aware predictions in machine learning.]]></summary></entry><entry><title type="html">On-line to Batch Conversion</title><link href="https://monishver11.github.io/blog/2025/online-to-batch/" rel="alternate" type="text/html" title="On-line to Batch Conversion"/><published>2025-01-30T15:00:00+00:00</published><updated>2025-01-30T15:00:00+00:00</updated><id>https://monishver11.github.io/blog/2025/online-to-batch</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/online-to-batch/"><![CDATA[<p>In previous sections, we explored various algorithms for online learning, such as the <strong>Perceptron</strong> and <strong>Winnow algorithms</strong>, analyzing their performance within the <strong>mistake model</strong>—a setting where no assumptions are made about how the training sequence is generated.</p> <p>A natural question arises:</p> <blockquote> <p>Can these algorithms be leveraged to derive hypotheses with <strong>small generalization error</strong> in a standard <strong>stochastic setting</strong>?<br/> Moreover, how can the intermediate hypotheses they generate be combined to form an <strong>accurate predictor</strong>?</p> </blockquote> <p>These questions are the focus of this section.</p> <hr/> <h5 id="problem-setup"><strong>Problem Setup</strong></h5> <p>We consider a <strong>supervised learning</strong> setting where we have a labeled sample:</p> \[S = \{(x_1, y_1), (x_2, y_2), \dots, (x_T, y_T)\} \subset (X \times Y)^T\] <p>drawn <strong>i.i.d.</strong> from some unknown but fixed distribution \(D\).</p> <p>Let \(H\) be a <strong>hypothesis class</strong> consisting of functions mapping \(X\) to \(Y'\), and let \(L: Y' \times Y \to \mathbb{R}^+\) be a <strong>bounded loss function</strong>, meaning there exists a constant \(M \geq 0\) such that:</p> \[L \leq M.\] <p>An <strong>online learning algorithm</strong> \(A\) sequentially processes the dataset \(S\), generating hypotheses:</p> \[h_1, h_2, \dots, h_T \in H.\] <p>It starts with an initial hypothesis \(h_1\) and updates it after processing each training example \((x_t, y_t)\), for \(t \in [T]\).</p> <hr/> <h4 id="regret-and-generalization-error"><strong>Regret and Generalization Error</strong></h4> <p>Before we tackle the question we started with, let’s first clarify why it’s important to address it. Also, let’s define the key terms and concepts to ensure everything is clear and aligned as we proceed.</p> <h5 id="1-regret">1. <strong>Regret:</strong></h5> <p>The <strong>regret</strong> of an algorithm is a measure of how much worse the algorithm’s performance is compared to the best possible hypothesis in the class \(H\), in hindsight.</p> <p>Formally, it’s defined as:</p> \[R_T = \sum_{t=1}^{T} L(h_t(x_t), y_t) - \min_{h \in H} \sum_{t=1}^{T} L(h(x_t), y_t)\] <p>Let’s break this down:</p> <ul> <li>\(h_t(x_t)\) is the prediction of the algorithm at time \(t\), after processing the \(t\)-th training example \((x_t, y_t)\).</li> <li>The term \(\sum_{t=1}^{T} L(h_t(x_t), y_t)\) is the total loss the algorithm incurs by predicting \(h_t(x_t)\) for each training example.</li> <li>\(\min_{h \in H} \sum_{t=1}^{T} L(h(x_t), y_t)\) represents the loss of the best hypothesis \(h \in H\) if it were chosen in advance and used to predict every \(x_t\) in the sequence.</li> </ul> <p><strong>Why regret matters:</strong><br/> Regret tells us how far off the algorithm’s performance is compared to the best possible performance it could have had with a perfect hypothesis. If the regret is small, it means the algorithm is making predictions that are close to the best possible predictions, at least in terms of total loss.</p> <h5 id="2-generalization-error">2. <strong>Generalization Error:</strong></h5> <p>The <strong>generalization error</strong> of a hypothesis \(h \in H\) refers to how well it performs on unseen data from the same distribution \(D\), and it’s typically measured by the <strong>expected loss</strong>:</p> \[R(h) = \mathbb{E}_{(x,y) \sim D} [L(h(x), y)]\] <p>In other words, the generalization error measures how well the hypothesis \(h\) performs on future data (or on data drawn from the same distribution) as opposed to just the training data. This is crucial because we want our hypothesis to not just perform well on the training set (which can be overfit) but also to generalize well to new, unseen examples.</p> <p><strong>How does this tie into the problem setup?</strong><br/> The goal in this section is to bound the <strong>average generalization error</strong> of the sequence of hypotheses \(h_1, h_2, \dots, h_T\) generated by the algorithm \(A\). You want to know if the algorithm can generate hypotheses whose <strong>average loss</strong> on the training dataset \(S\) is a good predictor of their <strong>generalization error</strong>—meaning, will the algorithm’s performance on the training set reflect its performance on unseen data?</p> <h5 id="connecting-regret-to-generalization-error"><strong>Connecting Regret to Generalization Error:</strong></h5> <p>Now, let’s dive into the key insight of this section:</p> <ul> <li>The algorithm generates a sequence of hypotheses \(h_1, h_2, \dots, h_T\), but we don’t necessarily care about each individual hypothesis. Rather, we care about the <strong>average performance</strong> over all of them.</li> </ul> <p>Let’s assume the <strong>average loss</strong> of the hypotheses on the training data is:</p> \[\hat{L} = \frac{1}{T} \sum_{t=1}^{T} L(h_t(x_t), y_t)\] <p>The idea is that, if the average loss \(\hat{L}\) is small (i.e., the algorithm has done well on the training set), then the <strong>generalization error</strong> (i.e., the expected loss on unseen data) should also be small. The question here is how small, and whether we can bound this generalization error using the average loss on the training set.</p> <h5 id="key-insights-and-the-challenge"><strong>Key Insights and the Challenge:</strong></h5> <p>The big challenge in this problem setup is to establish a <strong>connection between regret and generalization error</strong>. Specifically, you are interested in showing that even though the algorithm has no prior knowledge of the distribution \(D\), the average loss of the hypotheses it generates will give you a good idea of their <strong>generalization performance</strong>.</p> <h5 id="how-do-we-approach-this"><strong>How do we approach this?</strong></h5> <p>To answer the question of how to use the average loss to bound the generalization error, we might use tools from <strong>PAC learning</strong> (Probably Approximately Correct) theory, where we can bound the generalization error of a hypothesis by looking at its empirical loss on the training set and how much variability exists due to the randomness in the sampling process.</p> <p>In simple terms:</p> <ul> <li>If the training loss is small, can we show that the hypothesis will likely also perform well on unseen data?</li> <li>Can we bound how much the training loss differs from the generalization error for the hypotheses \(h_1, h_2, \dots, h_T\)?</li> </ul> <p>This section would likely explore these questions in greater detail, using concepts such as <strong>concentration inequalities</strong> (e.g., Hoeffding’s inequality) or tools from statistical learning theory (e.g., uniform convergence) to establish these bounds.</p> <h5 id="key-takeaways"><strong>Key Takeaways:</strong></h5> <ul> <li><strong>Regret</strong> measures how well the algorithm’s performance compares to the best possible hypothesis over the sequence.</li> <li><strong>Generalization error</strong> measures how well a hypothesis performs on new, unseen data.</li> <li>The main goal is to relate the <strong>average loss</strong> of the hypotheses generated by the online algorithm to their <strong>generalization error</strong>, so that we can prove the algorithm produces good generalizers, not just good fitters to the training data.</li> </ul> <p>Alright, we’re all set! Now, let’s take a look at the actual bounds that are available.</p> <hr/> <h4 id="generalization-error-bound"><strong>Generalization Error Bound</strong></h4> <p>The following lemma provides a bound on the average generalization error in terms of the empirical loss:</p> <h5 id="lemma-814"><strong>Lemma 8.14</strong></h5> <p>Let \(S = \{(x_1,y_1), ..., (x_T,y_T)\}\) be an i.i.d. sample from \(D\), and let \(h_1, ..., h_T\) be the sequence of hypotheses generated by an online algorithm \(A\) processing \(S\). If the loss function is bounded by \(M\), then for any \(\delta &gt; 0\), with probability at least \(1 - \delta\):</p> \[\frac{1}{T} \sum_{t=1}^{T} R(h_t) \leq \frac{1}{T} \sum_{t=1}^{T} L(h_t(x_t), y_t) + M \sqrt{\frac{2 \log(1/\delta)}{T}}\] <h5 id="proof-sketch"><strong>Proof Sketch:</strong></h5> <p>We begin by defining the random variable:</p> \[V_t = R(h_t) - L(h_t(x_t), y_t)\] <p>This represents the difference between the <strong>true expected loss</strong> (generalization error) of \(h_t\) and the <strong>empirical loss</strong> observed on the sample \((x_t, y_t)\).</p> <p><strong>Step 1: Establishing Expectation Property</strong></p> <p>Since the data points \((x_t, y_t)\) are drawn <strong>i.i.d.</strong> from the distribution \(D\), the expectation of the empirical loss over the randomness in the sample should match the expected loss:</p> \[\mathbb{E}[L(h_t(x_t), y_t) | h_t] = R(h_t)\] <p>Rearranging this gives:</p> \[\mathbb{E}[V_t | x_1, ..., x_{t-1}] = R(h_t) - \mathbb{E}[L(h_t(x_t), y_t) | h_t] = 0\] <p>Thus, the sequence \(\{V_t\}_{t=1}^{T}\) forms a <strong>martingale difference sequence</strong>, meaning that the expected value of \(V_t\) at any step remains zero given all past observations. This ensures that there is no systematic drift in expectations.</p> <p>This means that knowing past values does not help predict the next value’s expectation—it remains centered around zero. No systematic drift means that the sequence does not consistently increase or decrease over time; it behaves like a fair game in probability.</p> <p><strong>Step 2: Bounding the Range of \(V_t\)</strong></p> <p>Since the loss function is <strong>bounded</strong> by \(M\), we get:</p> \[L(h_t(x_t), y_t) \in [0, M] \quad \Rightarrow \quad V_t = R(h_t) - L(h_t(x_t), y_t) \in [-M, +M]\] <p>This ensures that \(V_t\) is always within a fixed range.</p> <p><strong>Step 3: Applying Azuma’s Inequality</strong></p> <p>Azuma’s inequality states that for a martingale difference sequence \(V_t\) with bounded differences \(\vert V_t \vert \leq M\), the probability of the empirical mean deviating from its expectation satisfies:</p> \[P\left( \frac{1}{T} \sum_{t=1}^{T} V_t \geq \epsilon \right) \leq \exp \left( -\frac{2T\epsilon^2}{4M^2} \right)\] <p>Rearranging the denominator:</p> \[P\left( \frac{1}{T} \sum_{t=1}^{T} V_t \geq \epsilon \right) \leq \exp \left( -\frac{T\epsilon^2}{2M^2} \right)\] <p><strong>Step 4: Solving for \(\epsilon\)</strong></p> <p>We now set the right-hand side equal to \(\delta &gt; 0\):</p> \[\exp \left( -\frac{T\epsilon^2}{2M^2} \right) = \delta\] <p>Taking the natural logarithm on both sides:</p> \[-\frac{T\epsilon^2}{2M^2} = \log \delta\] <p>Solving for \(\epsilon\):</p> \[\epsilon = M \sqrt{\frac{2 \log(1/\delta)}{T}}\] <p><strong>Step 5: Concluding the Bound</strong></p> <p>Since \(\frac{1}{T} \sum_{t=1}^{T} V_t\) represents the difference between the <strong>average generalization error</strong> and the <strong>empirical average loss</strong>, we obtain:</p> \[\frac{1}{T} \sum_{t=1}^{T} R(h_t) \leq \frac{1}{T} \sum_{t=1}^{T} L(h_t(x_t), y_t) + M \sqrt{\frac{2 \log(1/\delta)}{T}}\] <p>This completes the proof.</p> <hr/> <p>Before we move forward, let’s break down what all of this means and how we’re using it to reach our desired outcome.</p> <h5 id="why-does-the-martingale-difference-property-allow-us-to-apply-azumas-inequality"><strong>Why does the martingale difference property allow us to apply Azuma’s inequality?</strong></h5> <ul> <li>The key idea of a <strong>martingale difference sequence</strong> is that at each step, the expectation of the difference \(V_t\) is <strong>zero</strong> given past observations.</li> <li>This means that on average, the sequence doesn’t drift systematically in any direction—it’s <strong>balanced</strong> in expectation.</li> <li>Moreover, since each \(V_t\) is <strong>bounded</strong> within \([-M, M]\), there are no extreme jumps.</li> <li><strong>Azuma’s inequality</strong> applies precisely in such cases—it tells us that despite small fluctuations at each step, the <strong>cumulative deviation from zero</strong> remains <strong>small with high probability</strong>.</li> </ul> <p>💡 <strong>Analogy:</strong> Imagine you’re walking on a balance beam with a safety harness.</p> <ul> <li>You might take small steps to the left or right, but <strong>each step is unbiased</strong>, meaning you’re not favoring one direction over time.</li> <li>Also, your steps are limited in size (bounded).</li> <li><strong>Azuma’s inequality is like saying that, with high probability, you won’t drift too far from the center because of these properties.</strong></li> </ul> <h5 id="how-does-this-help-bound-generalization-error"><strong>How does this help bound generalization error?</strong></h5> <ul> <li>The empirical loss over the training sample is what we observe, but what we <strong>really care about</strong> is the generalization error (expected loss over unseen data).</li> <li>The sum \(\sum_{t=1}^{T} V_t\) captures how much our empirical loss <strong>deviates</strong> from the true generalization error.</li> <li>Since we established that this deviation behaves like a <strong>martingale difference sequence</strong>, we can now use Azuma’s inequality to show that this deviation is <strong>small with high probability</strong>.</li> <li><strong>This means that our empirical loss is a good estimate of the true generalization error, up to a small correction term!</strong></li> </ul> <p>💡 <strong>Analogy:</strong> Think of a weather forecast model trained on past temperature data.</p> <ul> <li>If the model is unbiased and doesn’t systematically overestimate or underestimate temperatures, then <strong>on average</strong>, its predictions should be close to reality.</li> <li><strong>Azuma’s inequality tells us that, with high probability, the difference between past observed temperatures (empirical loss) and future actual temperatures (generalization error) remains small.</strong></li> <li>This justifies why our training loss is a <strong>reliable estimate</strong> of test loss.</li> </ul> <hr/> <h4 id="application-averaging-hypotheses"><strong>Application: Averaging Hypotheses</strong></h4> <p>When the loss function is <strong>convex</strong> in its first argument, we can bound the generalization error of the <strong>average hypothesis</strong>:</p> \[\bar{h} = \frac{1}{T} \sum_{t=1}^{T} h_t\] <p>Since expectation is <strong>linear</strong>, we can use <strong>Jensen’s inequality</strong>, which states that for a convex function \(f\):</p> \[f\left(\frac{1}{T} \sum_{t=1}^{T} x_t\right) \leq \frac{1}{T} \sum_{t=1}^{T} f(x_t)\] <p>Applying this to the generalization error:</p> \[R(\bar{h}) = \mathbb{E}_{(x,y) \sim D} [L(\bar{h}(x), y)]\] <p>By convexity of \(L\), we get:</p> \[R(\bar{h}) \leq \frac{1}{T} \sum_{t=1}^{T} R(h_t)\] <p>From our previous bound:</p> \[\frac{1}{T} \sum_{t=1}^{T} R(h_t) \leq \frac{1}{T} \sum_{t=1}^{T} L(h_t(x_t), y_t) + M \sqrt{\frac{2 \log(1/\delta)}{T}}\] <p>Thus, we obtain:</p> \[R(\bar{h}) \leq \frac{1}{T} \sum_{t=1}^{T} L(h_t(x_t), y_t) + M \sqrt{\frac{2 \log(1/\delta)}{T}}\] <p><strong>Key Insights:</strong></p> <ul> <li>The generalization error of the <strong>averaged</strong> hypothesis is controlled by the <strong>average loss</strong> of the individual hypotheses plus a small correction term.</li> <li>This shows that averaging hypotheses is a simple yet powerful way to obtain a <strong>low generalization error</strong> in an online learning setting.</li> </ul> <h5 id="connection-to-regret-minimization"><strong>Connection to Regret Minimization</strong></h5> <p>If the online learning algorithm has <strong>small regret</strong> \(R_T\), then:</p> \[\frac{1}{T} \sum_{t=1}^{T} L(h_t(x_t), y_t) \approx \inf_{h \in H} \frac{1}{T} \sum_{t=1}^{T} L(h(x_t), y_t)\] <p>Since the second term in our bound vanishes as \(T \to \infty\), we conclude:</p> \[R(\bar{h}) \approx \inf_{h \in H} R(h)\] <p>This means that the average hypothesis is nearly <strong>optimal</strong> in terms of generalization error.</p> <p>If the above result feels a bit half-baked for you to process, no worries—we’ll work through it and figure out what it means next.</p> <hr/> <h4 id="theorem-815-generalization-error-of-averaged-hypotheses"><strong>Theorem 8.15: Generalization Error of Averaged Hypotheses</strong></h4> <p>Let \(S = ((x_1, y_1), \dots, (x_T, y_T))\) be a labeled sample drawn <strong>i.i.d.</strong> according to distribution \(D\). Let \(L\) be a <strong>loss function</strong> that is <strong>bounded</strong> by \(M\) and <strong>convex</strong> with respect to its first argument. Consider a sequence of hypotheses \(h_1, \dots, h_T\) generated by an online learning algorithm \(A\) processing \(S\) sequentially.</p> <p>Then, for any \(\delta &gt; 0\), with probability at least \(1 - \delta\), the following bounds hold:</p> \[R\left(\frac{1}{T} \sum_{t=1}^{T} h_t\right) \leq \frac{1}{T} \sum_{t=1}^{T} L(h_t(x_t), y_t) + M \sqrt{\frac{2 \log \frac{1}{\delta}}{T}}.\] \[R\left(\frac{1}{T} \sum_{t=1}^{T} h_t\right) \leq \inf_{h \in \mathcal{H}} R(h) + \frac{R_T}{T} + 2M \sqrt{\frac{2 \log \frac{2}{\delta}}{T}}.\] <hr/> <h5 id="proof"><strong>Proof</strong></h5> <p><strong>Step 1: Bounding the Generalization Error of the Averaged Hypothesis</strong></p> <p>By the convexity of \(L\) in its first argument, for any \((x, y)\), we have (via <strong>Jensen’s inequality</strong>):</p> \[L\left(\frac{1}{T} \sum_{t=1}^{T} h_t(x), y\right) \leq \frac{1}{T} \sum_{t=1}^{T} L(h_t(x), y).\] <p>Taking expectations over the data distribution \(D\):</p> \[R\left(\frac{1}{T} \sum_{t=1}^{T} h_t\right) = \mathbb{E}_{(x,y) \sim D} \left[ L\left(\frac{1}{T} \sum_{t=1}^{T} h_t(x), y\right) \right] \leq \frac{1}{T} \sum_{t=1}^{T} R(h_t).\] <p>Using <strong>Lemma 8.14</strong>, we get:</p> \[R\left(\frac{1}{T} \sum_{t=1}^{T} h_t\right) \leq \frac{1}{T} \sum_{t=1}^{T} L(h_t(x_t), y_t) + M \sqrt{\frac{2 \log \frac{1}{\delta}}{T}}.\] <p><strong>Step 2: Connection to Regret Minimization</strong></p> <p>By definition of the <strong>regret</strong> \(R_T\), for any \(\delta &gt; 0\), the following holds with probability at least \(1 - \delta/2\):</p> \[R\left(\frac{1}{T} \sum_{t=1}^{T} h_t\right) \leq \frac{1}{T} \sum_{t=1}^{T} L(h_t(x_t), y_t) + M \sqrt{\frac{2 \log \frac{2}{\delta}}{T}}.\] <p>Since the learner attempts to minimize regret, we take the <strong>minimum</strong> over all hypotheses:</p> \[\frac{1}{T} \sum_{t=1}^{T} L(h_t(x_t), y_t) \leq \min_{h \in \mathcal{H}} \frac{1}{T} \sum_{t=1}^{T} L(h(x_t), y_t) + \frac{R_T}{T}.\] <p><strong>Note:</strong> Not sure how we got this. Actually, this is what we started with, right? The definition of regret as defined above when we started, just dividing by T across.</p> <p>Thus, with probability at least \(1 - \delta/2\):</p> \[R\left(\frac{1}{T} \sum_{t=1}^{T} h_t\right) \leq \min_{h \in \mathcal{H}} \frac{1}{T} \sum_{t=1}^{T} L(h(x_t), y_t) + \frac{R_T}{T} + M \sqrt{\frac{2 \log \frac{2}{\delta}}{T}}.\] <p>Using Hoeffding’s inequality, we can show that for any optimal hypothesis \(h^*\), with probability at least \(1 - \delta/2\):</p> \[\frac{1}{T} \sum_{t=1}^{T} L(h^*(x_t), y_t) \leq R(h^*) + M \sqrt{\frac{2 \log \frac{2}{\delta}}{T}}.\] <p>Combining these results:</p> \[R\left(\frac{1}{T} \sum_{t=1}^{T} h_t\right) \leq R(h^*) + \frac{R_T}{T} + 2M \sqrt{\frac{2 \log \frac{2}{\delta}}{T}}.\] <p>By the definition of \(\inf_{h \in H} R(h)\), for any \(\epsilon &gt; 0\), there exists \(h^* \in H\) with</p> \[R(h^*) \leq \inf_{h \in H} R(h) + \epsilon.\] <p>Since \(h^*\) is chosen optimally, which gives:</p> \[R\left(\frac{1}{T} \sum_{t=1}^{T} h_t\right) \leq \inf_{h \in \mathcal{H}} R(h) + \frac{R_T}{T} + 2M \sqrt{\frac{2 \log \frac{2}{\delta}}{T}}.\] <p>Since the inequality holds for all \(\epsilon &gt; 0\), it proves the second statement.</p> <hr/> <h5 id="application-to-online-learning-algorithms"><strong>Application to Online Learning Algorithms</strong></h5> <p>The theorem can be applied to a variety of <strong>online regret minimization algorithms</strong>. A key case is when:</p> \[\frac{R_T}{T} = O(1/\sqrt{T}).\] <p>In particular, we can apply this theorem to the <strong>exponentially weighted average algorithm</strong>. Assuming:</p> <ul> <li>The loss function \(L\) is <strong>bounded</strong> by \(M = 1\).</li> <li>The number of rounds \(T\) is <strong>known</strong> to the algorithm.</li> </ul> <p>Then, using the <strong>regret bound from Theorem 8.6</strong>, we obtain:</p> \[R_T \leq \sqrt{(T/2) \log N}\] <p>where \(N\) is the number of experts, or the <strong>dimension of the weight vectors</strong>.</p> <p>If \(T\) is <strong>not</strong> known in advance, we can apply the <strong>doubling trick</strong> (Theorem 8.7) to derive a similar bound.</p> <p>Before we wrap up, just one last thing: Hoeffding’s Inequality. I think I’ll split this blog into two parts for better readability—it’s a bit too much to cover in one post.</p> <h4 id="hoeffdings-inequality-and-its-application-in-generalization-bounds"><strong>Hoeffding’s Inequality and Its Application in Generalization Bounds</strong></h4> <p>Hoeffding’s inequality is a fundamental concentration inequality that provides a bound on the probability that the sum of bounded independent random variables deviates from its expected value.</p> <h5 id="statement-of-hoeffdings-inequality"><strong>Statement of Hoeffding’s Inequality</strong></h5> <p>Let \(X_1, X_2, \dots, X_T\) be independent random variables such that for each \(t\),</p> \[a_t \leq X_t \leq b_t.\] <p>Define the sum:</p> \[S_T = \sum_{t=1}^{T} X_t.\] <p>Then, the probability that \(S_T\) deviates from its expected value by more than \(\epsilon\) satisfies:</p> \[P\left( \left| S_T - \mathbb{E}[S_T] \right| \geq \epsilon \right) \leq 2 \exp \left( -\frac{2 \epsilon^2}{\sum_{t=1}^{T} (b_t - a_t)^2} \right).\] <p>If each \(X_t\) is bounded in the range \([a, b]\), this simplifies to:</p> \[P\left( \left| S_T - \mathbb{E}[S_T] \right| \geq \epsilon \right) \leq 2 \exp \left( -\frac{2 \epsilon^2}{T (b - a)^2} \right).\] <h5 id="application-in-generalization-bounds"><strong>Application in Generalization Bounds</strong></h5> <p>In our proof, we use Hoeffding’s inequality to control the deviation of the empirical risk from the expected risk.</p> <p>Define the random variables:</p> \[X_t = L(h^*(x_t), y_t),\] <p>where \(h^*\) is the optimal hypothesis. Since the loss function is <strong>bounded by</strong> \(M\), we have:</p> \[0 \leq X_t \leq M.\] <p>Thus, the sum:</p> \[\sum_{t=1}^{T} L(h^*(x_t), y_t)\] <p>is a sum of <strong>bounded</strong> independent random variables. Applying Hoeffding’s inequality, we get:</p> \[P\left( \left| \frac{1}{T} \sum_{t=1}^{T} L(h^*(x_t), y_t) - R(h^*) \right| \geq \epsilon \right) \leq 2 \exp \left( -\frac{2 T \epsilon^2}{M^2} \right).\] <p>Setting \(\epsilon = M \sqrt{\frac{2 \log \frac{2}{\delta}}{T}}\) and solving for \(\delta\), we obtain the bound:</p> \[P\left( \frac{1}{T} \sum_{t=1}^{T} L(h^*(x_t), y_t) \geq R(h^*) + M \sqrt{\frac{2 \log \frac{2}{\delta}}{T}} \right) \leq \frac{\delta}{2}.\] <p>This bound ensures that, with high probability, the empirical loss is <strong>close</strong> to the expected loss, which is crucial for proving the generalization bounds of the learning algorithm.</p> <p>A few questions that i had and you might too:</p> <p><strong>Why Does the Optimal \(h^*\) Minimize the Loss?</strong><br/> The optimal hypothesis \(h^*\) is defined as the one that minimizes the <strong>expected loss</strong> over the data distribution:</p> \[h^* = \arg\min_{h \in \mathcal{H}} R(h),\] <p>where the <strong>expected loss</strong> (also called the risk) is:</p> \[R(h) = \mathbb{E}_{(x,y) \sim D} [L(h(x), y)].\] <p>Since \(h^*\) minimizes this risk, it achieves the <strong>smallest possible expected loss</strong> over all hypotheses in \(\mathcal{H}\).</p> <hr/> <p><strong>Why This Justifies Applying Hoeffding’s Inequality</strong></p> <p>We consider the empirical loss:</p> \[\frac{1}{T} \sum_{t=1}^{T} L(h^*(x_t), y_t),\] <p>which is an <strong>estimate</strong> of the true expected loss \(R(h^*)\). However, since the sample is drawn <strong>i.i.d.</strong>, there is some randomness, so the empirical loss might deviate from the expected loss.</p> <p>Since the loss function is <strong>bounded</strong> (i.e., \(0 \leq L(h^*(x), y) \leq M\)), we can apply <strong>Hoeffding’s inequality</strong> to bound this deviation. This ensures that, with high probability, the empirical loss <strong>does not stray too far</strong> from \(R(h^*)\), giving us a reliable way to estimate the generalization error.</p> <hr/> <p><strong>Intuitive Explanation</strong></p> <p>Think of this as estimating the <strong>average height of people in a city</strong> by measuring the height of a random sample. The true average height (analogous to \(R(h^*)\)) is unknown, but if we take a large enough sample, the average height in our sample (empirical loss) will be <strong>close to the true average height</strong> with high probability.</p> <p>By Hoeffding’s inequality, the probability that our sample average <strong>significantly deviates</strong> from the true mean is exponentially small, ensuring our empirical loss is a good approximation of the expected loss.</p> <hr/> <p><strong>Key Insights</strong></p> <ul> <li>\(h^*\) is optimal since it minimizes the expected loss.</li> <li>The empirical loss is a sample-based approximation of \(R(h^*)\).</li> <li>Hoeffding’s inequality guarantees that the empirical loss is close to the true loss with high probability.</li> <li>This allows us to <strong>confidently generalize from training data to unseen data</strong>.</li> </ul> <hr/> <h5 id="conclusion"><strong>Conclusion</strong></h5> <p>This analysis demonstrates that online learning algorithms, despite being designed for <strong>adversarial settings</strong>, can be effectively converted into batch learning methods. By averaging the hypotheses they produce, we can derive strong <strong>generalization guarantees</strong>, bridging the gap between <strong>online and batch learning</strong> paradigms.</p> <p>This insight is particularly valuable in large-scale machine learning, where online learning methods can be computationally efficient while still ensuring strong predictive performance.</p> <h5 id="to-do">To-Do:</h5> <ul> <li>Split this Blog into two.</li> </ul> <h5 id="references"><strong>References</strong></h5> <ul> <li><a href="https://cs.nyu.edu/~mohri/mlbook/">Foundations of Machine Learning Book</a></li> </ul>]]></content><author><name></name></author><category term="ADV-ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[Understanding how online learning algorithms can be used to derive hypotheses with small generalization error in a stochastic setting.]]></summary></entry><entry><title type="html">Randomized Weighted Majority Algorithm</title><link href="https://monishver11.github.io/blog/2025/RWM/" rel="alternate" type="text/html" title="Randomized Weighted Majority Algorithm"/><published>2025-01-29T16:59:00+00:00</published><updated>2025-01-29T16:59:00+00:00</updated><id>https://monishver11.github.io/blog/2025/RWM</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/RWM/"><![CDATA[<p>The <strong>Randomized Weighted Majority (RWM) algorithm</strong> is an extension of the <strong>deterministic Weighted Majority (WM) algorithm</strong>, designed to overcome its limitations in adversarial settings, particularly in the <strong>zero-one loss</strong> scenario. This post explores why the deterministic approach struggles, how randomization helps, and what makes the RWM algorithm effective.</p> <h4 id="problem-with-the-deterministic-wm-algorithm"><strong>Problem with the Deterministic WM Algorithm</strong></h4> <p>The <strong>deterministic Weighted Majority (WM) algorithm</strong> operates by maintaining a set of experts, assigning them weights, and updating these weights based on their correctness. However, this approach suffers from <strong>high regret</strong> in adversarial settings.</p> <ul> <li> <p><strong>Regret in adversarial settings</strong><br/> No deterministic algorithm can achieve a <strong>sublinear regret</strong> of \(R_T = o(T)\) for all possible sequences under zero-one loss.</p> </li> <li> <p><strong>Worst-case scenario leading to linear regret</strong><br/> If the adversary knows the algorithm’s strategy, it can force it to make mistakes at every step.</p> <ul> <li>Suppose we have two experts: one always predicts <strong>0</strong>, the other always predicts <strong>1</strong>.</li> <li>If the best expert is correct <strong>only half the time</strong>, it makes at most <strong>\(T/2\)</strong> mistakes.</li> <li>The regret is defined as: \(R_T = m_T - m_T^*\)<br/> where: <ul> <li>\(m_T\) is the number of mistakes made by the algorithm.</li> <li>\(m_T^*\) is the number of mistakes made by the best expert.</li> </ul> </li> </ul> <p>Since \(m_T^* \leq T/2\), the regret in the worst case is at least: \(R_T \geq T/2\) which grows <strong>linearly</strong> with \(T\).</p> </li> </ul> <h4 id="the-randomized-weighted-majority-algorithm"><strong>The Randomized Weighted Majority Algorithm</strong></h4> <p>To address this issue, the <strong>Randomized Weighted Majority (RWM)</strong> algorithm introduces <strong>randomness</strong> into the decision-making process. Instead of deterministically following the highest-weighted expert, it assigns a <strong>probabilistic prediction</strong> based on expert weights.</p> <h5 id="key-idea-behind-rwm"><strong>Key Idea Behind RWM</strong></h5> <ul> <li>Instead of picking the expert with the highest weight <strong>deterministically</strong>, the algorithm selects predictions <strong>probabilistically</strong>, based on expert weights.</li> <li>Experts that have made fewer mistakes are given <strong>higher weights</strong>, making them more likely to be followed.</li> <li>This <strong>randomization prevents the adversary</strong> from forcing the algorithm to always make the same mistakes.</li> </ul> <h5 id="benefits-of-randomization"><strong>Benefits of Randomization</strong></h5> <ul> <li> <p><strong>Sublinear regret in adversarial settings</strong><br/> Unlike the deterministic approach, RWM can achieve: \(R_T = O(\sqrt{T})\) making it significantly better in the long run.</p> </li> <li> <p><strong>More balanced decision-making</strong><br/> By updating expert weights probabilistically, the algorithm avoids overly trusting any one expert too soon.</p> </li> </ul> <h4 id="the-randomized-weighted-majority-algorithm-step-by-step"><strong>The Randomized Weighted Majority Algorithm: Step-by-Step</strong></h4> <p>The algorithm follows these steps:</p> <ol> <li><strong>Initialize Weights:</strong> Each expert starts with an equal weight of <strong>1</strong>.</li> <li><strong>Compute Probabilities:</strong> The probability of selecting an expert is proportional to its weight.</li> <li><strong>Make a Prediction:</strong> Instead of following a single expert, the algorithm chooses its prediction probabilistically.</li> <li><strong>Update Weights:</strong> Experts that make mistakes have their weights <strong>decreased</strong> by a factor \(\beta\), where \(0 &lt; \beta &lt; 1\).</li> </ol> <p><strong><mark>Pseudocode:</mark></strong></p> \[\begin{array}{l} \textbf{Randomized-Weighted-Majority} \ (N) \\[5pt] \quad 1. \quad \textbf{for } i \gets 1 \text{ to } N \textbf{ do} \\ \quad 2. \quad \quad w_{1,i} \gets 1 \\ \quad 3. \quad \quad p_{1,i} \gets \frac{1}{N} \\[5pt] \quad 4. \quad \textbf{for } t \gets 1 \text{ to } T \textbf{ do} \\ \quad 5. \quad \quad \textbf{Receive } l_t \\ \quad 6. \quad \quad \textbf{for } i \gets 1 \text{ to } N \textbf{ do} \\ \quad 7. \quad \quad \quad \textbf{if } (l_{t,i} = 1) \textbf{ then} \\ \quad 8. \quad \quad \quad \quad w_{t+1,i} \gets \beta w_{t,i} \\ \quad 9. \quad \quad \quad \textbf{else} \\ \quad10. \quad \quad \quad \quad w_{t+1,i} \gets w_{t,i} \\[5pt] \quad11. \quad \quad W_{t+1} \gets \sum_{i=1}^{N} w_{t+1,i} \\[5pt] \quad12. \quad \quad \textbf{for } i \gets 1 \text{ to } N \textbf{ do} \\ \quad13. \quad \quad \quad p_{t+1,i} \gets w_{t+1,i} / W_{t+1} \\[5pt] \quad14. \quad \textbf{return } \mathbf{w}_{T+1} \end{array}\] <p>At this point, we’ve introduced the RWM algorithm, but a key question remains:</p> <blockquote> <p>How does randomization <strong>actually prevent</strong> the algorithm from making repeated mistakes, and how is the probabilistic selection <strong>used effectively</strong>?</p> </blockquote> <p>We’ll dive into this in the next section.</p> <hr/> <h4 id="how-randomization-prevents-repeated-mistakes"><strong>How Randomization Prevents Repeated Mistakes</strong></h4> <p>The <strong>Randomized Weighted Majority (RWM)</strong> algorithm prevents repeated mistakes in adversarial settings by making predictions <strong>probabilistically based on expert weights</strong>. Here’s how this works step by step:</p> <p><strong>1. Maintaining Expert Weights</strong></p> <ul> <li>We assign an initial weight to each expert, typically \(w_i^{(1)} = 1\) for all experts \(i\).</li> <li>Over time, we <strong>update the weights</strong> of experts based on their performance, penalizing those who make mistakes.</li> </ul> <p><strong>2. Making Probabilistic Predictions</strong></p> <ul> <li>Instead of deterministically following the best expert (which an adversary could exploit), RWM <strong>randomly selects a prediction</strong> based on the current expert weights.</li> <li>The probability of choosing a particular expert’s prediction is proportional to their weight: \(P(y_t = y_i) = \frac{w_i^{(t)}}{\sum_{j=1}^{N} w_j^{(t)}}\)<br/> where \(w_i^{(t)}\) is the weight of expert \(i\) at time \(t\).</li> <li>This means that if an expert has a high weight (i.e., has made fewer mistakes), their prediction is <strong>more likely</strong> to be chosen, but not always.</li> <li>If an adversary tries to force mistakes by targeting a specific deterministic strategy, the randomization ensures that the algorithm <strong>does not always follow a single pattern</strong>, making it harder for the adversary to exploit.</li> </ul> <p><strong>3. Weight Update Rule</strong></p> <ul> <li>After making a prediction, the algorithm observes the true outcome \(y_t\).</li> <li>The weights of experts who made mistakes are <strong>exponentially decreased</strong> using a multiplicative update rule: \(w_i^{(t+1)} = w_i^{(t)} \cdot \beta^{\ell_i^{(t)}}\)<br/> where: <ul> <li>\(\ell_i^{(t)}\) is the loss (1 if the expert made a mistake, 0 otherwise),</li> <li>\(\beta \in (0,1)\) is a parameter that determines how aggressively the weights are updated.</li> </ul> </li> <li>This ensures that over time, experts who consistently make mistakes lose influence, while those with good predictions gain more say in future predictions.</li> </ul> <p><strong>4. Why This Prevents Repeated Mistakes</strong></p> <ul> <li>Since the algorithm chooses predictions probabilistically, it does not <strong>consistently</strong> make the same mistakes like a deterministic algorithm would.</li> <li>Even if an adversary tries to construct a sequence that forces a mistake, RWM’s randomization means that <strong>the same incorrect choice won’t always be made</strong>.</li> <li>Moreover, since weights adjust dynamically, experts who perform better in the long run <strong>gradually dominate</strong> the prediction process.</li> </ul> <h5 id="takeaways"><strong><mark>Takeaways:</mark></strong></h5> <ul> <li><strong>Randomization prevents predictable failures</strong>: The algorithm does not follow a fixed pattern, making it harder for an adversary to force mistakes.</li> <li><strong>Probabilities favor better experts</strong>: Instead of blindly following one expert, the algorithm balances between exploration (randomization) and exploitation (favoring high-weight experts).</li> <li><strong>Weights adjust over time</strong>: Poor-performing experts lose influence, ensuring the algorithm improves as more data is observed.</li> </ul> <p>By incorporating randomness, the <strong>Randomized Weighted Majority Algorithm</strong> provides a <strong>powerful and adaptive approach</strong> to online learning, making it a fundamental tool in adversarial learning settings.</p> <hr/> <p>Here’s an analogy to make the <strong>Randomized Weighted Majority (RWM) algorithm</strong> more intuitive:</p> <p>Imagine you are in a <strong>new city</strong> for an extended stay, and you have to decide <strong>where to eat dinner every night</strong>. There are multiple restaurants (experts), and each night, you choose one based on your past experiences.</p> <p><strong>1. Initial Equal Preference (Assigning Weights)</strong></p> <p>At the start, you <strong>have no idea</strong> which restaurant is the best. So, you assign them equal preference:</p> <ul> <li>Restaurant A, B, and C all seem equally good, so you <strong>randomly pick one</strong>.</li> </ul> <p><strong>2. Evaluating Performance (Tracking Mistakes)</strong></p> <p>Each time you eat at a restaurant, you observe whether the meal was <strong>good</strong> or <strong>bad</strong>.</p> <ul> <li>If the meal was great, you <strong>trust the restaurant more</strong>.</li> <li>If it was terrible, you <strong>trust it less</strong>.</li> </ul> <p><strong>3. Adjusting Your Choices Over Time (Weight Updates)</strong></p> <p>Instead of always sticking to a single restaurant (which might backfire if it suddenly declines in quality), you <strong>adjust your preferences probabilistically</strong>:</p> <ul> <li>If <strong>Restaurant A</strong> has served consistently good food, you start <strong>choosing it more often</strong>, but you <strong>don’t completely ignore</strong> B and C.</li> <li>If <strong>Restaurant B</strong> has had a few bad meals, you reduce your visits there <strong>but still give it a chance occasionally</strong>.</li> </ul> <p><strong>4. Why Randomization Helps</strong></p> <p>Imagine there’s a <strong>food critic (the adversary)</strong> trying to ruin your dining experience.</p> <ul> <li>If you <strong>always follow a deterministic rule</strong> (e.g., always picking the currently best restaurant), the critic can <strong>sabotage your choices</strong>—perhaps by tipping off the restaurant to serve bad food only when you visit.</li> <li>However, by <strong>randomizing your choices</strong> (with a bias toward better restaurants), the critic <strong>can’t predict where you’ll go</strong>, making it much harder to force repeated bad experiences.</li> </ul> <p><strong>5. Long-Term Adaptation (Minimizing Regret)</strong></p> <p>Over time, bad restaurants get <strong>fewer chances</strong>, and good ones <strong>dominate your choices</strong>. But, because you <strong>never completely eliminate</strong> any option, you still have room to adjust if a once-bad restaurant improves.</p> <h5 id="mapping-back-to-rwm"><strong>Mapping Back to RWM</strong></h5> <ul> <li><strong>Restaurants = Experts</strong></li> <li><strong>Your decision = Algorithm’s prediction</strong></li> <li><strong>Good meal = Correct prediction (no loss)</strong></li> <li><strong>Bad meal = Mistake (loss)</strong></li> <li><strong>Reducing visits to bad restaurants = Lowering expert weights</strong></li> <li><strong>Randomly choosing where to eat = Making probabilistic predictions</strong></li> </ul> <p>By <strong>not always following the same pattern</strong>, you prevent predictable failures and <strong>gradually learn the best strategy</strong> while adapting to changes.</p> <hr/> <h4 id="randomized-weighted-majority-algorithm-regret-bound-and-proof"><strong>Randomized Weighted Majority Algorithm: Regret Bound and Proof</strong></h4> <p>The main objective of the RWM algorithm is to minimize the <strong>regret</strong>, which is the difference between the cumulative loss of the algorithm and that of the best possible decision (in hindsight) over time.</p> <p>Now, we’ll dive into the <strong>regret bound</strong> for the RWM algorithm. Specifically, we’ll present a theorem that gives a strong guarantee on the regret \(R_T\) of the algorithm, and follow up with a proof that demonstrates the result.</p> <h5 id="setting--notations"><strong>Setting &amp; Notations</strong></h5> <p>At each round \(t \in [T]\), an online algorithm \(A\) selects a distribution \(p_t\) over the set of actions, receives a loss vector \(\mathbf{l}_t\), whose \(i\)-th component \(l_{t,i} \in [0, 1]\) is the loss associated with action \(i\), and incurs the expected loss:</p> \[L_t = \sum_{i=1}^{N} p_{t,i} l_{t,i}\] <p>The total loss incurred by the algorithm over \(T\) rounds is:</p> \[\mathcal{L}_T = \sum_{t=1}^{T} L_t\] <p>The total loss associated with action \(i\) is:</p> \[\mathcal{L}_{T,i} = \sum_{t=1}^{T} l_{t,i}\] <p>The minimal loss of a single action is denoted by:</p> \[\mathcal{L}_{\text{min}}^T = \min_{i \in A} \mathcal{L}_{T,i}\] <p>The regret \(R_T\) of the algorithm after \(T\) rounds is typically defined as the difference between the loss of the algorithm and that of the best single action:</p> \[R_T = \mathcal{L}_T - \mathcal{L}_{\text{min}}^T\] <p><strong>Note:</strong> Whenever you’re confused by the notations of \(L\) and \(\mathcal{L}\), refer to this.</p> <hr/> <h5 id="rwm-regret-bound"><strong>RWM Regret Bound</strong></h5> <p>The following <strong>theorem</strong> provides a regret bound for the RWM algorithm, showing that the regret \(R_T\) is in \(O(\sqrt{T \log N})\), where \(T\) is the number of rounds, and \(N\) is the number of experts.</p> <p><strong>Theorem</strong> : Fix \(\beta \in [\frac{1}{2}, 1)\). Then, for any \(T \geq 1\), the loss of the algorithm \(\text{RWM}\) on any sequence of decisions can be bounded as follows:</p> \[\mathcal{L}_T \leq \frac{\log N}{1 - \beta} + (2 - \beta) \mathcal{L}^{\min}_T \tag{1}\] <p>In particular, for \(\beta = \max\left(\frac{1}{2}, 1 - \sqrt{\frac{\log N}{T}}\right)\), the loss can be further bounded as:</p> \[\mathcal{L}_T \leq \mathcal{L}^{\min}_T + 2 \sqrt{T \log N} \tag{2}\] <p>Here, \(\mathcal{L}_T\) is the total loss incurred by the algorithm till \(T\) rounds, and \(\mathcal{L}^{\min}_T\) is the minimal possible loss achievable by any expert till \(T\) rounds.</p> <hr/> <h5 id="proof-outline-deriving-the-regret-bound"><strong>Proof Outline: Deriving the Regret Bound</strong></h5> <p>The proof of this result relies on analyzing the <strong>potential function</strong> \(W_t\), which represents the total weight assigned to the experts at each round \(t\). We derive upper and lower bounds for \(W_t\) and combine them to establish the regret bound.</p> <p>Let’s walk through the key steps of the proof.</p> <hr/> <p><strong>Step 1: The Weight Update Rule</strong> The weight of expert \(i\) at round \(t+1\) is updated based on their incurred loss \(l_{t,i}\):</p> \[w_{t+1, i} = \begin{cases} w_{t, i} \cdot \beta, &amp; \text{if } l_{t, i} = 1 \\ w_{t, i}, &amp; \text{if } l_{t, i} = 0 \end{cases}\] <p>where \(\beta \in (0,1)\) is a fixed discount factor.</p> <p>The total weight at round \(t+1\) is then:</p> \[W_{t+1} = \sum_{i=1}^{N} w_{t+1, i}\] <hr/> <p><strong>Step 2: Evolution of Total Weight</strong> Using the update rule, we can express \(W_{t+1}\) in terms of \(W_t\):</p> \[W_{t+1} = \sum_{i: l_{t,i} = 0} w_{t,i} + \beta \sum_{i: l_{t,i} = 1} w_{t,i}\] \[= W_t + (\beta - 1) \sum_{i: l_{t,i} = 1} w_{t,i}\] \[= W_t + (\beta - 1) W_t \sum_{i: l_{t,i} = 1} p_{t,i}\] \[= W_t + (\beta - 1) W_t L_t\] \[= W_t (1 - (1 - \beta) L_t)\] <hr/> <p><strong>Note:</strong> If you’re unsure, refer to the items listed below, which should be used appropriately to achieve the desired result.</p> <p>Using the probability interpretation of the weights:</p> \[\sum_{i: l_{t,i}=1} w_{t,i} = W_t L_t,\] <p>where \(L_t\) is the expected loss at time \(t\):</p> \[L_t = \sum_{i=1}^{N} p_{t,i} l_{t,i}\] <p>Thus, we obtain:</p> \[W_{t+1} = W_t(1 - (1 - \beta) L_t)\] <hr/> <p>By recursion, since \(W_1 = N\), we get:</p> \[W_{T+1} = N \prod_{t=1}^{T} (1 - (1 - \beta) L_t)\] <hr/> <p><strong>Step 3: Lower Bound on \(W_{T+1}\)</strong> The minimum weight of any expert at round \(T+1\) satisfies:</p> \[W_{T+1} \geq \max_{i \in [N]} w_{T+1, i} = \beta^{\mathcal{L}_T^{\min}}\] <p>where \(\mathcal{L}_T^{\min}\) is the loss of the best expert.</p> <p>How did we arrive at this version?</p> <p>Each expert’s weight evolves according to the <strong>multiplicative update rule</strong>. If expert \(i\) incurs a loss \(l_{t,i}\) at round \(t\), its weight is updated as:</p> \[w_{t+1, i} = w_{t,i} \cdot \beta^{l_{t,i}}\] <p>where \(\beta \in (0,1]\) is the update factor.</p> <p>Define the <strong>best expert</strong> as the one with the <strong>minimum cumulative loss</strong> over \(T\) rounds. Let \(\mathcal{L}_T^{\min}\) denote this minimum loss:</p> \[\mathcal{L}_T^{\min} = \min_{i \in [N]} \sum_{t=1}^{T} l_{t,i}\] <p>For this best expert (say expert \(i^*\)), its weight after \(T\) rounds evolves as:</p> \[w_{T+1, i^*} = w_{1, i^*} \cdot \prod_{t=1}^{T} \beta^{l_{t,i^*}}\] <p>Since all experts start with an equal initial weight \(w_{1, i} = 1\) (assuming uniform initialization), we have:</p> \[w_{T+1, i^*} = \beta^{\mathcal{L}_T^{\min}}\] <p>Since the <strong>total weight</strong> at round \(T+1\) is at least the weight of the best expert, we get:</p> \[W_{T+1} = \sum_{i=1}^{N} w_{T+1, i} \geq w_{T+1, i^*} = \beta^{\mathcal{L}_T^{\min}}\] <p>Thus, the lower bound holds:</p> \[W_{T+1} \geq \beta^{\mathcal{L}_T^{\min}}\] <p>This ensures that the total weight does not shrink too fast, preserving a lower bound based on the best expert’s performance.</p> <hr/> <p><strong>Step 4: Taking Logarithms</strong> Taking the logarithm of both bounds:</p> \[\log W_{T+1} = \log N + \sum_{t=1}^{T} \log (1 - (1 - \beta) L_t)\] <p>For the second term, using the inequality \(\log(1 - x) \leq -x\) for \(x &lt; 1\), we get:</p> \[\sum_{t=1}^{T} \log (1 - (1 - \beta) L_t) \leq \sum_{t=1}^{T} - (1 - \beta) L_T = - (1 - \beta) \mathcal{L}_T\] <p>Thus,</p> \[\log W_{T+1} \leq \log N - (1 - \beta) \mathcal{L}_T.\] <p>Similarly, for the lower bound:</p> \[\log W_{T+1} \geq \mathcal{L}_T^{\min} \log \beta\] <p>Combining these,</p> \[\mathcal{L}_T^{\min} \log \beta \leq \log N - (1 - \beta) \mathcal{L}_T.\] <p>Rearranging,</p> \[\mathcal{L}_T \leq \frac{\log N}{1 - \beta} - \frac{\log \beta}{1 - \beta} \mathcal{L}_T^{\min}\] \[\mathcal{L}_T \leq \log N - \frac{\log (1 - (1 - \beta))}{1 - \beta} \mathcal{L}_T^{\min}\] <p>Again, for this second term, using the inequality \(-\log(1 - x) \leq x+x^2\) for \(x \in [0, \frac{1}{2}]\), we get:</p> \[\mathcal{L}_T \leq \frac{\log N}{1 - \beta} + (2 - \beta) \mathcal{L}_T^{\min} \tag{1}\] <p>This is the main result, and it provides a clear bound on the cumulative loss \(\mathcal{L}_T\).</p> <hr/> <p><strong>Step 5: Choosing Optimal \(\beta\)</strong></p> <p>We differentiate with respect to \(\beta\) and setting it to zero gives:</p> \[\frac{\log N}{(1 - \beta)^2} - T = 0\] <p>Solving for \(\beta\):</p> \[\beta = 1 - \sqrt{\frac{\log N}{T}} &lt; 1\] <p>If \(1 - \sqrt{\frac{\log N}{T}} \geq \frac{1}{2}\), then:</p> \[\beta_0 = 1 - \sqrt{\frac{\log N}{T}}\] <p>Otherwise, we use the boundary value \(\beta_0 = \frac{1}{2}\) is the optimal value.</p> <p>Substituting this choice in \((1)\), we get:</p> \[\mathcal{L}_T \leq \mathcal{L}_T^{\min} + 2\sqrt{T \log N} \tag{2}\] <p>Thus, the <strong>regret bound</strong> is:</p> \[R_T = \mathcal{L}_T - \mathcal{L}_T^{\min} \leq 2 \sqrt{T \log N}\] <p><strong>Key Essence:</strong></p> <ul> <li>The <strong>regret</strong> of the RWM algorithm is \(O(\sqrt{T \log N})\).</li> <li>The <strong>average regret per round \(R_T/T\)</strong> decreases as \(O(1/\sqrt{T})\).</li> </ul> <p>This result shows that RWM achieves <strong>sublinear regret</strong>, meaning that as the number of rounds \(T\) grows, the algorithm performs almost as well as the best expert.</p> <hr/> <p>Do we really grasp what this formula is conveying? It highlights a remarkable bound in online learning. Alright, let’s dig into that further.</p> <p><strong>What does sublinear regret mean?</strong></p> <p>When we say that an algorithm has <strong>sublinear regret</strong>, we mean that the total regret <strong>grows slower than the number of rounds</strong>. As the number of rounds \(T\) increases, the gap between the algorithm’s performance and the best expert’s performance doesn’t increase linearly. Instead, it grows at a slower rate (e.g., \(\sqrt{T}\)).</p> <p><strong>The meaning of the formula:</strong></p> <ul> <li> <p><strong>Regret \(O(\sqrt{T \log N})\)</strong>: This tells you that after \(T\) rounds, the total regret will grow roughly as \(\sqrt{T}\), with an additional logarithmic factor based on \(N\) (the number of possible actions). The logarithmic term grows slowly and doesn’t significantly affect the overall growth for large \(T\).</p> </li> <li> <p><strong>Average regret per round \(O(1/\sqrt{T})\)</strong>: This shows that, on average, the regret per round decreases as the number of rounds increases. As \(T\) gets larger, the average regret (the loss per round) decreases.</p> </li> </ul> <p><strong>Sublinear regret in action:</strong></p> <ol> <li><strong>At the start</strong>, when the algorithm has few rounds to learn, it might perform poorly (larger regret).</li> <li><strong>Over time</strong>, as \(T\) grows, the algorithm’s performance improves. It makes fewer mistakes as it “learns” from past rounds, and the regret per round decreases.</li> <li><strong>After many rounds</strong>, the algorithm performs almost as well as the best possible action, and the regret becomes quite small.</li> </ol> <p><strong>Key takeaway:</strong></p> <ul> <li><strong>Sublinear regret</strong> means that the algorithm’s performance gets closer to the best possible action as the number of rounds increases, but it does so at a slower pace than linear growth. The algorithm doesn’t just keep getting worse with more rounds; instead, it converges toward optimal performance.</li> </ul> <p><strong>Note:</strong> The bound \((2)\) assumes that the algorithm additionally receives as a parameter the number of rounds \(T\). However, as we learned from the <a href="https://monishver11.github.io/blog/2025/doubling-trick/">Doubling trick</a> in the previous blog, this requirement can be relaxed at the cost of a small constant factor increase.</p> <hr/> <h5 id="conclusion"><strong>Conclusion</strong></h5> <p>The <strong>Randomized Weighted Majority (RWM) Algorithm</strong> provides a powerful and efficient method for decision-making and prediction in online learning. The regret bound we’ve derived shows that, under the right conditions, the RWM algorithm can perform nearly as well as the best possible expert in hindsight, with a regret that grows at most as \(O(\sqrt{T \log N})\).</p> <p>This result is optimal, as demonstrated by further lower bound theorems, and provides a strong theoretical guarantee for the RWM algorithm’s performance in practice.</p> <h5 id="references"><strong>References</strong></h5>]]></content><author><name></name></author><category term="ADV-ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[Learn how the Randomized Weighted Majority (RWM) Algorithm leverages probabilistic prediction to minimize regret and defend against adversarial strategies in online learning environments.]]></summary></entry><entry><title type="html">Bayesian Decision Theory - Concepts and Recap</title><link href="https://monishver11.github.io/blog/2025/bayes-decision-theory/" rel="alternate" type="text/html" title="Bayesian Decision Theory - Concepts and Recap"/><published>2025-01-28T16:18:00+00:00</published><updated>2025-01-28T16:18:00+00:00</updated><id>https://monishver11.github.io/blog/2025/bayes-decision-theory</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/bayes-decision-theory/"><![CDATA[<p>Bayesian decision theory is a powerful framework for making decisions under uncertainty. It provides a principled way to combine prior knowledge with observed data to make optimal choices. In this post, we’ll take a closer look at its key components, revisit Bayesian point estimation, and connect these ideas to classical probability modeling. Let’s dive in!</p> <hr/> <h4 id="ingredients-of-bayesian-decision-theory"><strong>Ingredients of Bayesian Decision Theory</strong></h4> <p>At the heart of Bayesian decision theory lie several key components. First, we have the <strong>parameter space</strong>, denoted as \(\Theta\), which represents all possible values of the unknown parameter we aim to estimate or make decisions about. Next, we have the <strong>prior distribution</strong>, \(p(\theta)\), which encodes our beliefs about \(\theta\) before observing any data. This prior serves as a starting point in the Bayesian framework.</p> <p>Equally important is the <strong>action space</strong>, \(A\), which includes all possible actions we might take. To evaluate these actions, we rely on a <strong>loss function</strong>, \(\ell : A \times \Theta \to \mathbb{R}\), which quantifies the cost of taking a specific action \(a \in A\) when the true parameter value is \(\theta \in \Theta\).</p> <p>With these components, we can define the <strong>posterior risk</strong> of an action \(a \in A\), which represents the expected loss under the posterior distribution:</p> \[r(a) = \mathbb{E}[\ell(\theta, a) \mid D] = \int \ell(\theta, a) p(\theta \mid D) d\theta\] <p>The goal is to minimize this risk. The action that achieves this minimization is called the <strong>Bayes action</strong>, \(a^*\), which satisfies:</p> \[r(a^*) = \min_{a \in A} r(a)\] <h5 id="bayesian-point-estimation"><strong>Bayesian Point Estimation</strong></h5> <p>Bayesian point estimation builds upon this foundation. Imagine we have data \(D\) generated from some distribution \(p(y \mid \theta)\), where \(\theta \in \Theta\) is unknown. Our task is to find a single point estimate, \(\hat{\theta}\), that best represents \(\theta\).</p> <p>To do this, we first specify a prior distribution \(p(\theta)\) over \(\Theta\), which reflects our beliefs about \(\theta\) before observing the data. We then define a loss function, \(\ell(\hat{\theta}, \theta)\), to measure the cost of estimating \(\theta\) with \(\hat{\theta}\). Finally, we seek the point estimate \(\hat{\theta} \in \Theta\) that minimizes the posterior risk:</p> \[r(\hat{\theta}) = \mathbb{E}[\ell(\hat{\theta}, \theta) \mid D] = \int \ell(\hat{\theta}, \theta) p(\theta \mid D) d\theta.\] <h5 id="important-loss-functions-and-their-role"><strong>Important Loss Functions and Their Role</strong></h5> <p>The choice of loss function significantly influences the optimal estimate. Here are three commonly used loss functions and the corresponding Bayes actions:</p> <ul> <li> <p><strong>Squared Loss</strong>: \(\ell(\hat{\theta}, \theta) = (\theta - \hat{\theta})^2\).<br/> For squared loss, the Bayes action is the <strong>posterior mean</strong>, \(\mathbb{E}[\theta \mid D]\).</p> </li> <li> <p><strong>Zero-One Loss</strong>: \(\ell(\hat{\theta}, \theta) = 1[\theta \neq \hat{\theta}]\).<br/> For zero-one loss, the Bayes action is the <strong>posterior mode</strong>, the most probable value of \(\theta\) under the posterior.</p> </li> <li> <p><strong>Absolute Loss</strong>: \(\ell(\hat{\theta}, \theta) = |\theta - \hat{\theta}|\).<br/> For absolute loss, the Bayes action is the <strong>posterior median</strong>, the value that splits the posterior distribution into two equal halves.</p> </li> </ul> <h5 id="example-card-drawing"><strong>Example: Card Drawing</strong></h5> <p>To see this in action, consider drawing a card from a deck consisting of the values \(\{2, 3, 3, 4, 4, 5, 5, 5\}\). Suppose you are asked to guess the value of the card. Based on the posterior distribution:</p> <ul> <li>The <strong>mean</strong> of the distribution is \(3.875\).</li> <li>The <strong>mode</strong> (most frequent value) is \(5\).</li> <li>The <strong>median</strong> (middle value) is \(4\).</li> </ul> <p>This simple example highlights how different loss functions lead to different optimal estimates.</p> <h5 id="bayesian-point-estimation-with-squared-loss"><strong>Bayesian Point Estimation with Squared Loss</strong></h5> <p>We seek an action \(\hat{\theta}\) that minimizes the <strong>posterior risk</strong>, given by:</p> \[r(\hat{\theta}) = \int (\theta - \hat{\theta})^2 p(\theta | \mathcal{D}) \, d\theta\] <p>To find the optimal \(\hat{\theta}\), we differentiate:</p> \[\frac{d r(\hat{\theta})}{d\hat{\theta}} = - \int 2 (\theta - \hat{\theta}) p(\theta | \mathcal{D}) \, d\theta\] <p>Rearranging,</p> \[= -2 \int \theta p(\theta | \mathcal{D}) \, d\theta + 2\hat{\theta} \int p(\theta | \mathcal{D}) \, d\theta\] <p>Since the total probability integrates to 1,</p> \[\int p(\theta | \mathcal{D}) \, d\theta = 1,\] <p>this simplifies to:</p> \[\frac{d r(\hat{\theta})}{d\hat{\theta}} = -2 \int \theta p(\theta | \mathcal{D}) \, d\theta + 2\hat{\theta}\] <p>Setting the derivative to zero,</p> \[-2 \int \theta p(\theta | \mathcal{D}) \, d\theta + 2\hat{\theta} = 0\] <p>Solving for \(\hat{\theta}\),</p> \[\hat{\theta} = \int \theta p(\theta \mid D) d\theta = \mathbb{E}[\theta \mid D]\] <p>Thus, under squared loss, the Bayes action is the <strong>posterior mean</strong>.</p> <hr/> <h4 id="recap-and-interpretation"><strong>Recap and Interpretation</strong></h4> <p>Bayesian Decision Theory is built on a few core ideas that tie together probability, decision-making, and inference. Let’s revisit these concepts and unpack their meaning(again) all at once to gain the full picture.</p> <p><strong>Note:</strong> If you feel this isn’t necessary, feel free to skip it. However, I believe it’s helpful to reinforce these concepts periodically to build strong intuition and apply them effectively when needed.</p> <h5 id="the-prior-ptheta"><strong>The Prior (\(p(\theta)\))</strong></h5> <p>The prior represents our initial beliefs about the unknown parameter \(\theta\) before observing any data. It encapsulates what we know (or assume) about \(\theta\) based on prior knowledge, expert opinion, or historical data.</p> <p>For example, if \(\theta\) represents the probability of success in a coin toss, a reasonable prior might be a Beta distribution centered around 0.5, reflecting our belief that the coin is fair.</p> <h5 id="the-posterior-ptheta-mid-d"><strong>The Posterior (\(p(\theta \mid D)\))</strong></h5> <p>The posterior is the updated belief about \(\theta\) after observing the data \(D\). It combines the prior \(p(\theta)\) with the likelihood of the data \(p(D \mid \theta)\) using Bayes’ theorem:</p> \[p(\theta \mid D) = \frac{p(D \mid \theta) p(\theta)}{p(D)}\] <p>The posterior is the foundation of all Bayesian inference. It reflects how the data has rationally updated our initial beliefs.</p> <h5 id="inferences-and-actions"><strong>Inferences and Actions</strong></h5> <p>In the Bayesian framework, all inferences (e.g., estimating \(\theta\)) and actions (e.g., making decisions) are based on the posterior distribution. This is because the posterior contains all the information we have about \(\theta\), combining both prior knowledge and observed data.</p> <p>For example, if we want to estimate \(\theta\), we might compute the posterior mean, median, or mode, depending on the loss function we choose.</p> <h5 id="no-need-to-justify-an-estimator"><strong>No Need to Justify an Estimator</strong></h5> <p>In classical statistics, we often need to justify why a particular estimator (e.g., the sample mean) is a good choice. In Bayesian statistics, this issue doesn’t arise because the estimator is derived directly from the posterior distribution, which is fully determined by the prior and the data.</p> <p>The only choices we need to make are:</p> <ol> <li>The family of distributions (e.g., Gaussian, Beta) that model the data.</li> <li>The prior distribution on the parameter space \(\Theta\).</li> </ol> <p><strong>Role of the Loss Function</strong></p> <p>The loss function \(\ell(a, \theta)\) quantifies the cost of taking action \(a\) when the true parameter is \(\theta\). It bridges the gap between inference and decision-making.</p> <p>The optimal action \(a^*\) is the one that minimizes the posterior risk, which is the expected loss under the posterior distribution:</p> \[r(a) = \mathbb{E}[\ell(a, \theta) \mid D] = \int \ell(a, \theta) p(\theta \mid D) \, d\theta\] <p>Different loss functions lead to different optimal actions. For example:</p> <ul> <li><strong>Squared loss</strong> leads to the posterior mean.</li> <li><strong>Absolute loss</strong> leads to the posterior median.</li> <li><strong>Zero-one loss</strong> leads to the posterior mode.</li> </ul> <h5 id="philosophical-interpretation"><strong>Philosophical Interpretation</strong></h5> <p>Bayesian Decision Theory is fundamentally about rational decision-making under uncertainty. It provides a coherent framework for updating beliefs and making decisions that minimize expected loss.</p> <p>Unlike frequentist methods, which focus on long-run properties of estimators, Bayesian methods focus on the current state of knowledge, as represented by the posterior distribution.</p> <h5 id="why-does-this-matter"><strong>Why Does This Matter?</strong></h5> <p>Understanding these concepts is crucial because they form the backbone of Bayesian thinking. Here’s why:</p> <ol> <li><strong>Flexibility</strong>: The Bayesian approach allows us to incorporate prior knowledge into our analysis, which can be especially useful when data is limited.</li> <li><strong>Transparency</strong>: All assumptions (e.g., the choice of prior) are explicitly stated, making the analysis transparent and interpretable.</li> <li><strong>Decision-Oriented</strong>: By focusing on minimizing expected loss, Bayesian Decision Theory directly addresses the practical goal of making optimal decisions.</li> </ol> <h5 id="example-estimating-the-mean-of-a-normal-distribution"><strong>Example: Estimating the Mean of a Normal Distribution</strong></h5> <p>Suppose we want to estimate the mean \(\theta\) of a normal distribution based on observed data \(D\). Here’s how the Bayesian approach works:</p> <ol> <li><strong>Prior</strong>: We choose a normal prior \(p(\theta) = N(\mu_0, \sigma_0^2)\), where \(\mu_0\) and \(\sigma_0^2\) reflect our initial beliefs about \(\theta\).</li> <li><strong>Likelihood</strong>: The data \(D\) is modeled as \(p(D \mid \theta) = N(\theta, \sigma^2)\).</li> <li><strong>Posterior</strong>: Using Bayes’ theorem, the posterior \(p(\theta \mid D)\) is also a normal distribution, with updated mean and variance that balance the prior and the data.</li> <li><strong>Decision</strong>: If we use squared loss, the optimal estimate \(\hat{\theta}\) is the posterior mean.</li> </ol> <p>This example illustrates how the Bayesian approach seamlessly integrates prior knowledge with observed data to produce a rational and optimal estimate.</p> <h5 id="example-estimating-the-mean-of-a-normal-distribution-frequentist-approach"><strong>Example: Estimating the Mean of a Normal Distribution (Frequentist Approach)</strong></h5> <ol> <li> <p><strong>Model Assumption</strong>:<br/> Assume the data \(D\) comes from a normal distribution: \(p(D \mid \theta) = N(\theta, \sigma^2),\)<br/> where \(\theta\) is the unknown mean and \(\sigma^2\) is the known variance.</p> </li> <li> <p><strong>Estimator</strong>:<br/> Use the sample mean: \(\bar{D} = \frac{1}{n} \sum_{i=1}^n D_i\)<br/> as the estimator for \(\theta\). This is derived as the <strong>maximum likelihood estimator (MLE)</strong> because it maximizes the likelihood function:</p> \[L(\theta) = \prod_{i=1}^n p(D_i \mid \theta) = \prod_{i=1}^n \frac{1}{\sqrt{2\pi\sigma^2}} \exp\left(-\frac{(D_i - \theta)^2}{2\sigma^2}\right).\] </li> <li><strong>Properties of the Estimator</strong>: <ul> <li>The sample mean \(\bar{D}\) is an <strong>unbiased estimator</strong> of \(\theta\), meaning: \(E[\bar{D}] = \theta.\)</li> <li>Its variance is: \(\text{Var}(\bar{D}) = \frac{\sigma^2}{n},\)<br/> which decreases as the sample size \(n\) increases.</li> </ul> </li> <li><strong>Decision</strong>:<br/> The sample mean \(\bar{D}\) is reported as the estimate of \(\theta\). There is no explicit loss function in the frequentist framework; instead, the sample mean is justified by its desirable properties (e.g., unbiasedness, efficiency, and consistency).</li> </ol> <p><strong>Note:</strong> If you’re unsure about this derivation from MLE, check out this <a href="https://monishver11.github.io/blog/2025/NB-continuous-features/">link</a> for clarification.</p> <p><strong><mark>Key Takeaways</mark></strong></p> <ol> <li>The prior represents initial beliefs, the posterior represents updated beliefs, and the loss function guides decision-making.</li> <li>Bayesian methods are inherently decision-oriented, focusing on minimizing expected loss.</li> <li>The only choices we need to make are the family of distributions and the prior—everything else follows logically from these choices.</li> </ol> <hr/> <p>A few follow-up questions you might have:</p> <h5 id="explanation-of-actionsdecision-making"><strong>Explanation of “Actions/Decision-Making”</strong></h5> <p>In the Bayesian framework, <strong>actions</strong> or <strong>decision-making</strong> refer to the choices or decisions we make based on the information encoded in the posterior distribution. These decisions could range from estimating a parameter to choosing between different courses of action based on the expected outcomes.</p> <p>For example:</p> <ul> <li>If you’re estimating a parameter \(\theta\), the <strong>action</strong> could be selecting the posterior mean, median, or mode as your estimate.</li> <li>If you’re deciding whether to launch a product, the <strong>action</strong> could involve calculating the probability of success using the posterior and deciding based on a predefined threshold.</li> <li>In medical diagnostics, the <strong>action</strong> could be choosing a treatment plan based on the likelihood of a disease inferred from the posterior.</li> </ul> <p>In essence, <strong>actions</strong> are the outcomes of the decision-making process, guided by the posterior distribution and a loss function that quantifies the cost of making an incorrect decision.</p> <h5 id="what-is-an-estimator-in-the-frequentist-approach"><strong>What is an “Estimator” in the frequentist approach?</strong></h5> <p>An <strong>estimator</strong> is a statistical function or rule used to estimate an unknown parameter \(\theta\) based on observed data. In frequentist statistics, estimators are often chosen based on their theoretical properties, such as:</p> <ul> <li><strong>Unbiasedness</strong>: The estimator’s expected value equals the true parameter value.</li> <li><strong>Efficiency</strong>: The estimator has the smallest possible variance among all unbiased estimators.</li> <li><strong>Consistency</strong>: The estimator converges to the true parameter value as the sample size increases.</li> </ul> <p>For example:</p> <ul> <li>The <strong>sample mean</strong> is a common estimator for the population mean.</li> <li>The <strong>sample variance</strong> is an estimator for the population variance.</li> </ul> <p>In Bayesian statistics, however, the <strong>estimator</strong> is derived directly from the posterior distribution. For instance:</p> <ul> <li>The <strong>posterior mean</strong> minimizes squared error loss.</li> <li>The <strong>posterior median</strong> minimizes absolute error loss.</li> <li>The <strong>posterior mode</strong> corresponds to the most likely value of \(\theta\).</li> </ul> <p>The key difference is that Bayesian methods do not require separate justification for an estimator because the posterior distribution naturally incorporates both the prior beliefs and observed data, making the choice of estimator a consequence of the decision-making process.</p> <hr/> <p>We’ve covered most of it, right? Now, let’s revisit the foundational concepts that underpin everything we’ve discussed so far, including conditional probability, the likelihood function, and MLE in a general sense.</p> <h5 id="conditional-probability-modeling"><strong>Conditional Probability Modeling</strong></h5> <p>In this context, we have:</p> <ul> <li>An <strong>input space</strong>, \(X\), which represents the features or predictors.</li> <li>An <strong>outcome space</strong>, \(Y\), which represents the possible outputs.</li> <li>An <strong>action space</strong>, \(A\), consisting of probability distributions on \(Y\).</li> </ul> <p>A prediction function \(f : X \to A\) maps each input \(x \in X\) to a distribution on \(Y\). This setup allows us to model the relationship between inputs and outputs probabilistically.</p> <p>In a parametric framework, we define a family of conditional densities:</p> \[\{p(y \mid x, \theta) : \theta \in \Theta\},\] <p>where \(p(y \mid x, \theta)\) is a density on \(Y\) for each \(x \in X\), and \(\theta\) is a parameter in the finite-dimensional space \(\Theta\). This is the common starting point for either classical or Bayesian regression.</p> <h5 id="classical-treatment-likelihood-function"><strong>Classical Treatment: Likelihood Function</strong></h5> <p>In the classical approach, we begin with data \(D = (y_1, \dots, y_n)\) and assume it is generated by the conditional density \(p(y \mid x, \theta)\). The probability of the data is:</p> \[p(D \mid x_1, \dots, x_n, \theta) = \prod_{i=1}^n p(y_i \mid x_i, \theta)\] <p>For fixed \(D\), the likelihood function is defined as:</p> \[L_D(\theta) = p(D \mid x, \theta),\] <p>where \(x = (x_1, \dots, x_n)\).</p> <h5 id="maximum-likelihood-estimator-mle"><strong>Maximum Likelihood Estimator (MLE)</strong></h5> <p>The <strong>Maximum Likelihood Estimator (MLE)</strong> for \(\theta\) is the value that maximizes the likelihood function:</p> \[\hat{\theta}_{\text{MLE}} = \arg\max_{\theta \in \Theta} L_D(\theta)\] <p>Interestingly, MLE corresponds to <strong>Empirical Risk Minimization (ERM)</strong> if we set the loss function to the negative log-likelihood. The resulting prediction function is:</p> \[\hat{f}(x) = p(y \mid x, \hat{\theta}_{\text{MLE}})\] <hr/> <h5 id="conclusion"><strong>Conclusion</strong></h5> <p>So, we’ve reached the end of this blog. I know it can be confusing at times—I’ve been confused too—but take your time to get a solid grasp on it. This is the foundation of Bayesian ML. In the past few blogs, we’ve discussed these concepts, but do you recall if we’ve applied them to any prediction tasks yet? The answer is no. In the next one, we’ll put them into practice through Bayesian conditional models.</p> <h5 id="references"><strong>References</strong></h5>]]></content><author><name></name></author><category term="ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[A comprehensive guide to Bayesian decision theory, exploring its key components, point estimation, loss functions, and connections to classical probability modeling.]]></summary></entry><entry><title type="html">Reinforcement Learning - An Introductory Guide</title><link href="https://monishver11.github.io/blog/2025/rl-intro/" rel="alternate" type="text/html" title="Reinforcement Learning - An Introductory Guide"/><published>2025-01-28T03:45:00+00:00</published><updated>2025-01-28T03:45:00+00:00</updated><id>https://monishver11.github.io/blog/2025/rl-intro</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/rl-intro/"><![CDATA[<p>Reinforcement Learning (RL) is a fascinating field that focuses on teaching agents how to make decisions based on their environment. The agent’s goal is to learn a strategy that maximizes a cumulative reward over time by interacting with its surroundings. But before we dive into the details of RL, let’s explore the fundamental concepts of decision-making and intelligence.</p> <h5 id="what-is-decision-making"><strong>What is Decision Making?</strong></h5> <p>At its core, decision-making is the process of choosing the best possible action from a set of alternatives. It lies at the heart of intelligence and is fundamental to building intelligent systems.</p> <h5 id="what-is-intelligence"><strong>What is Intelligence?</strong></h5> <p>Intelligence can be broadly defined as the ability to:</p> <ul> <li>Understand and process what’s happening around you.</li> <li>Make informed decisions.</li> <li>Reason and analyze complex situations.</li> </ul> <p>In simpler terms, intelligence enables us to learn, adapt, and tackle new or challenging scenarios effectively.</p> <h5 id="why-intelligence-and-how-does-it-work"><strong>Why Intelligence and How Does It Work?</strong></h5> <p>A strong driving force for the evolution of intelligence is survival. For instance, early single-celled organisms relied on simple hunting strategies. Over time, the emergence of multicellular organisms, like <em>C. elegans</em>, marked a leap in complexity. They developed neurons, enabling coordination and more sophisticated strategies.</p> <p>While the exact mechanisms of intelligence remain elusive, certain principles stand out:</p> <ul> <li>Neurons form the foundation of biological intelligence.</li> <li>Artificial neural networks via backpropagation, despite their inspiration from biology, cannot replicate human intelligence <strong>yet</strong>.</li> <li>Understanding the principles of intelligence is arguably more important than mimicking its mechanisms.</li> </ul> <hr/> <h4 id="six-lessons-from-babies"><strong>Six Lessons from Babies</strong></h4> <p>Developmental psychology offers valuable insights into intelligence. Here are six key lessons we can learn from how babies develop:</p> <ol> <li><strong>Be Multimodal</strong>: Babies combine sensory inputs (sight, sound, touch, etc.) to create a cohesive understanding of their environment.</li> <li><strong>Be Incremental</strong>: Learning is gradual. Babies adapt as they encounter new information. <ul> <li>Unlike i.i.d. data in supervised learning, real-world learning is sequential and non-i.i.d., posing unique challenges.</li> <li>RL algorithms often simulate i.i.d.-like scenarios to work effectively.</li> </ul> </li> <li><strong>Be Physical</strong>: Interaction with the environment is crucial. Babies learn by manipulating objects and observing the outcomes.</li> <li><strong>Explore</strong>: Exploration is central to learning. Babies experiment with their surroundings to gather information and refine their actions.</li> <li><strong>Be Social</strong>: Social interactions play a significant role. Babies learn by observing and imitating others.</li> <li><strong>Learn a Language</strong>: Language serves as a symbolic framework to organize thoughts and retrieve information efficiently.</li> </ol> <p>These principles are directly relevant to reinforcement learning (RL), where agents learn by interacting with and exploring their environment.</p> <h5 id="takeaways-thus-far"><strong>Takeaways Thus Far;</strong></h5> <ul> <li>Intelligence is fundamentally rooted in decision-making.</li> <li>Decision-making occurs at various levels, from low-level motor control to high-level reasoning and coordination.</li> <li>Algorithms for decision-making depend heavily on the specific task.</li> <li>Neuroscience, motor control, and cognitive psychology provide valuable insights for designing intelligent systems.</li> <li>Translating biological insights into computational systems remains challenging due to a lack of foundational understanding.</li> </ul> <hr/> <h4 id="a-computational-lens-on-decision-making"><strong>A Computational Lens on Decision Making</strong></h4> <p>Decision-making can be viewed through the following computational frameworks:</p> <h5 id="from-an-agents-perspective"><strong>From an Agent’s Perspective:</strong></h5> <div class="row justify-content-center"> <div class="col-sm-7 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Agent_Persepective-480.webp 480w,/assets/img/Agent_Persepective-800.webp 800w,/assets/img/Agent_Persepective-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/Agent_Persepective.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Agent_Persepective" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ol> <li>Sense</li> <li>Think</li> <li>Act</li> <li>Repeat</li> </ol> <h5 id="from-a-global-perspective"><strong>From a Global Perspective:</strong></h5> <div class="row justify-content-center"> <div class="col-sm-7 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Global_Persepective-480.webp 480w,/assets/img/Global_Persepective-800.webp 800w,/assets/img/Global_Persepective-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/Global_Persepective.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Global_Persepective" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ol> <li>Observations</li> <li>Sense → Think → Act</li> <li>Effects of Actions</li> <li>Repeat</li> </ol> <p>Alternate terminologies for decision-making systems include policy, strategy, and controller.</p> <h5 id="examples-of-computational-decision-making"><strong>Examples of Computational Decision Making</strong></h5> <ul> <li><strong>Atari Games (Deep RL)</strong>: Agents maximize scores by analyzing game frames and selecting actions accordingly.</li> <li><strong>Google Robots</strong>: Robots perform complex tasks using intricate joint control mechanisms.</li> <li><strong>Go</strong>: RL has enabled agents to outperform humans in this game with a vast decision space.</li> <li><strong>Dota 2</strong>: RL systems have been trained to defeat top human players by optimizing strategies in a dynamic environment. Though this success is currently limited to controlled and restricted settings.</li> </ul> <p>Reinforcement learning provides a robust framework to model decision-making by teaching agents to optimize actions based on rewards.</p> <h5 id="the-rewards-mechanism-and-sequential-decision-making"><strong>The Rewards Mechanism and Sequential Decision Making</strong></h5> <p>In RL, decision-making unfolds over time through a sequence of observations, actions, and rewards. This sequence can be represented as:</p> \[(o_1, a_1, r_1) \to (o_2, a_2, r_2) \to \dots \to (o_n, a_n, r_n)\] <p>Where:</p> <ul> <li>\(o_t\): Observation at time \(t\),</li> <li>\(a_t\): Action taken at time \(t\),</li> <li>\(r_t\): Reward received after taking action \(a_t\).</li> </ul> <p>The objective is to maximize the cumulative reward:</p> \[\max_{a_1, a_2, \dots, a_{T-1}} \sum_{t=1}^{T} r_t\] <p>The key challenge is determining the optimal actions \(a_t\) at each time step to achieve the maximum long-term reward. This leads to the concept of <em>policy optimization</em>.</p> <h5 id="planning-and-world-models"><strong>Planning and World Models</strong></h5> <p>Another approach to decision-making is through planning, where the agent uses a model of the world to simulate the effects of its actions. This allows the agent to reason about potential future states and make decisions accordingly.</p> <p>However, planning is limited in its applicability:</p> <ul> <li>It works well in discrete, well-defined environments like games.</li> <li>It struggles with complex, dynamic tasks like conversational AI or real-world robotics.</li> </ul> <h5 id="the-limits-of-current-approaches"><strong>The Limits of Current Approaches</strong></h5> <p>Despite their potential, RL and planning-based models face significant challenges:</p> <ul> <li>Real-world scenarios often lack the i.i.d. assumption that RL sometime relies on.</li> <li>Bridging the gap between controlled simulations and dynamic real-world environments remains a key hurdle.</li> </ul> <h5 id="a-note-of-caution-amidst-progress"><strong>A Note of Caution Amidst Progress</strong></h5> <p>While reinforcement learning and computational decision-making have seen remarkable progress, it’s important to recognize the challenges that remain. This brings us to <strong>Moravec’s Paradox</strong>, a fascinating insight into the nature of artificial intelligence:</p> <blockquote> <p>“It is comparatively easy to make computers exhibit adult-level performance on intelligence tests or play games like chess, yet it is extremely difficult to give them the skills of a one-year-old when it comes to perception and mobility.”<br/> — <strong>Hans Moravec, 1988</strong></p> </blockquote> <p>Steven Pinker elaborated further:</p> <blockquote> <p>“The main lesson of thirty-five years of AI research is that the hard problems are easy, and the easy problems are hard.”<br/> — <strong>Steven Pinker, 1994</strong></p> </blockquote> <p>What this paradox highlights is that tasks humans find effortless—such as walking, recognizing faces, or interacting physically with the environment—require immense computational power and intricate modeling to replicate in machines. Conversely, tasks like playing chess, solving mathematical problems, or optimizing game strategies are relatively easier for computers.</p> <p>This paradox underscores the fact that intelligence, especially in its perceptual and physical forms, is deeply rooted in evolutionary processes. The interplay of sensory data, motor control, and real-world adaptation—elements essential for robust intelligence—remains a significant challenge for machines.</p> <p>In reinforcement learning, we see this reflected in the difficulty of training agents to generalize to unstructured, real-world environments. RL agents perform admirably in games like <strong>Atari</strong> or <strong>Go</strong>, but replicating even the basic capabilities of a human child—like balancing on uneven surfaces or adapting to novel stimuli—remains an open frontier.</p> <hr/> <h5 id="conclusion"><strong>Conclusion</strong></h5> <p>Reinforcement learning provides a powerful framework for decision-making, allowing agents to learn from their interactions with the environment. By leveraging concepts such as reward mechanisms, policy optimization, and planning, we have achieved significant milestones in fields like gaming, robotics, and autonomous systems.</p> <p>However, the journey toward creating truly intelligent systems is far from over. While computational models continue to evolve, there is a need for a deeper understanding of the principles of intelligence, both biological and artificial.</p> <p>As we wrap up this introduction to reinforcement learning and decision-making, it’s clear that intelligence is fundamentally about making informed decisions. Whether through supervised learning, reinforcement learning, or planning, the goal remains the same: enabling machines to reason, adapt, and thrive in dynamic environments.</p> <p>In the next post, we’ll dive deeper into decision-making in supervised learning and explore how it serves as the foundation for many modern AI systems. Stay tuned!</p> <h5 id="references"><strong>References</strong></h5> <ul> <li></li> </ul>]]></content><author><name></name></author><category term="RL-NYU"/><category term="ML"/><summary type="html"><![CDATA[Explore the foundations of intelligence, decision-making principles, and their application in reinforcement learning.]]></summary></entry><entry><title type="html">Conjugate Priors and Bayes Point Estimates</title><link href="https://monishver11.github.io/blog/2025/bayes-point-estimate/" rel="alternate" type="text/html" title="Conjugate Priors and Bayes Point Estimates"/><published>2025-01-27T16:38:00+00:00</published><updated>2025-01-27T16:38:00+00:00</updated><id>https://monishver11.github.io/blog/2025/bayes-point-estimate</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/bayes-point-estimate/"><![CDATA[<p>Bayesian statistics provides us with a framework to incorporate prior knowledge, update our beliefs with new evidence, and make principled decisions. Two key concepts in this framework are <strong>Bayes Point Estimates</strong> and <strong>Conjugate Priors</strong>, which we will explore in this blog post. These ideas not only simplify computations but also help us build intuition for Bayesian inference.</p> <hr/> <h4 id="what-are-conjugate-priors"><strong>What are Conjugate Priors?</strong></h4> <p>Imagine having a prior belief about the world, represented by a probability distribution. When new data arrives, Bayesian inference updates this belief, resulting in a posterior distribution. Now, if the updated posterior distribution belongs to the same family as the prior, we call the prior <strong>conjugate</strong> for the chosen likelihood model.</p> <p>Formally, let \(\pi\) denote a family of prior distributions over the parameter space \(\Theta\), and let \(P\) represent a parametric likelihood model. We say that the family \(\pi\) is <strong>conjugate</strong> to \(P\) if, for any prior in \(\pi\), the posterior distribution also belongs to \(\pi\).</p> <p>A classic example of conjugate priors is the <strong>Beta distribution</strong> for the <strong>Bernoulli model</strong> (used to model coin flips). If the prior belief about a coin’s bias follows a Beta distribution, the posterior distribution after observing the coin flips will also follow a Beta distribution. This conjugacy greatly simplifies the mathematical computations in Bayesian updating.</p> <p>A simple way to form an intuition about this is to think of conjugate priors as allowing the mathematical form of your beliefs (prior) and your updated beliefs (posterior) to stay consistent. It’s like using a “<strong>familiar language</strong>” for both your starting beliefs and your updated beliefs—making things easier to compute and interpret.</p> <p>So, with this, you can see why we chose the beta distribution in the last blog, right? Great! Now, let’s continue with the same example to explore further.</p> <hr/> <h4 id="a-concrete-example-coin-flipping"><strong>A Concrete Example: Coin Flipping</strong></h4> <p>Let’s make this more concrete by revisiting the example from the last blog. Suppose we have a coin that may be biased, and we want to estimate its bias \(\theta\) (the probability of landing heads).</p> <p><strong>Note:</strong> If the notation or its meaning is unclear, check out the previous <a href="http://localhost:8080/blog/2025/Bayesian-ML/">blog</a> for clarification.</p> <p>The probability model for a single coin flip is given by:</p> \[P(\text{Heads} \mid \theta) = \theta, \quad \theta \in [0,1]\] <p>Before flipping the coin, we encode our prior belief about \(\theta\) using a <strong>Beta distribution</strong>: \(\theta \sim \text{Beta}(2, 2).\)</p> <p>This Beta distribution reflects a prior belief that the coin is likely fair (centered around \(\theta = 0.5\)), but with some uncertainty.</p> <p>Now, we flip the coin multiple times and observe the following data: \(D = \{\text{H, H, T, T, T, T, T, H, ..., T}\},\)<br/> where the coin lands on heads 75 times and tails 60 times.</p> <h5 id="updating-beliefs-the-posterior-distribution"><strong>Updating Beliefs: The Posterior Distribution</strong></h5> <p>Using Bayes’ theorem, we combine the prior and the likelihood of the observed data to compute the posterior distribution:</p> \[p(\theta \mid D) \propto p(D \mid \theta) p(\theta)\] <p>For the Beta-Bernoulli model, the posterior distribution is also Beta-distributed, with updated parameters:</p> \[\theta \mid D \sim \text{Beta}(\alpha + \text{Heads}, \beta + \text{Tails})\] <p>In our example, the prior parameters are \(\alpha = 2\) and \(\beta = 2\). After observing 75 heads and 60 tails, the posterior becomes:</p> \[\theta \mid D \sim \text{Beta}(2 + 75, 2 + 60) = \text{Beta}(77, 62)\] <p>This posterior distribution captures our updated belief about the coin’s bias after incorporating the observed data.</p> <div class="row justify-content-sm-center"> <div class="col-sm-6 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Bayes-Prior-480.webp 480w,/assets/img/Bayes-Prior-800.webp 800w,/assets/img/Bayes-Prior-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/Bayes-Prior.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Bayes-Prior" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm-6 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Bayes-Posterior-480.webp 480w,/assets/img/Bayes-Posterior-800.webp 800w,/assets/img/Bayes-Posterior-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/Bayes-Posterior.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Bayes-Posterior" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><strong><mark>Takeaway:</mark></strong> The Beta distribution’s conjugacy with the Bernoulli likelihood model makes updating beliefs straightforward. The posterior parameters are simply the sum of the prior parameters and the counts of heads and tails, which means Bayesian updating is computationally efficient and intuitive in this case.</p> <h4 id="bayesian-point-estimates"><strong>Bayesian Point Estimates</strong></h4> <p>Once we have the posterior distribution, the next question is: how do we summarize it into a single value? This is where Bayes Point Estimates come into play. These estimates provide a representative value for \(\theta\) based on the posterior.</p> <p>One common approach is the <strong>posterior mean</strong>, which represents the expected value of \(\theta\) under the posterior distribution:</p> \[\hat{\theta}_{\text{mean}} = \mathbb{E}[\theta \mid D] = \frac{\alpha + \text{Heads}}{\alpha + \beta + \text{Heads} + \text{Tails}}\] <p>Substituting the parameters from our example:</p> \[\hat{\theta}_{\text{mean}} = \frac{77}{77 + 62} \approx 0.554\] <p>Another popular estimate is the <strong>Maximum a Posteriori (MAP)</strong> estimate, which is the mode of the posterior distribution. For the Beta distribution, the MAP estimate is given by:</p> \[\hat{\theta}_{\text{MAP}} = \frac{\alpha - 1}{\alpha + \beta - 2}, \quad \text{if } \alpha &gt; 1 \text{ and } \beta &gt; 1\] <p>Alternatively, the MAP estimate can be expressed as:</p> \[\hat{\theta}_{\text{MAP}} = \arg\max_\theta p(\theta \mid D)\] <p>Using our parameters:</p> \[\hat{\theta}_{\text{MAP}} = \frac{77 - 1}{77 + 62 - 2} = \frac{76}{137} \approx 0.555\] <p>Both the posterior mean and the MAP estimate provide valuable insights into the coin’s bias, with slight differences depending on how they summarize the posterior.</p> <h5 id="posterior-mean-vs-map-estimate"><strong>Posterior Mean vs. MAP Estimate</strong></h5> <ol> <li><strong>Posterior Mean (Expected Value)</strong>: <ul> <li><strong>Analogy</strong>: Think of the posterior mean like a <strong>“balanced average”</strong>. It provides a representative value for \(\theta\) by averaging all possible values, weighted by their likelihood under the posterior distribution. This is especially useful when you want an overall estimate that incorporates all the data.</li> <li><strong>When to use</strong>: The posterior mean is often a good choice when the data is <strong>symmetric</strong> or you have a <strong>large sample size</strong>, and you need a balanced estimate.</li> <li><strong>Example</strong>: The posterior mean gives us a fair estimate of the coin’s bias, accounting for both the prior belief and the observed data.</li> </ul> </li> <li><strong>Maximum a Posteriori (MAP) Estimate (Mode)</strong>: <ul> <li><strong>Analogy</strong>: The MAP estimate is like finding the <strong>“peak”</strong> of a hill. It’s the value of \(\theta\) where the posterior distribution is most concentrated. This is useful when you care about the <strong>most probable</strong> value of \(\theta\) based on both the data and the prior.</li> <li><strong>When to use</strong>: The MAP estimate is helpful when you have a <strong>strong prior</strong> or <strong>sparse data</strong>. It gives you the point estimate where the posterior distribution is maximized.</li> <li><strong>Example</strong>: The MAP estimate gives us the most likely value of the coin’s bias after considering both the data and prior belief.</li> </ul> </li> </ol> <p>So, The <strong>posterior mean</strong> gives a more <strong>general</strong>, balanced estimate, while the <strong>MAP</strong> estimate is more focused on the <strong>most likely</strong> value based on your prior and data. The choice between the two depends on your data, the role of your prior, and what you want to emphasize in your estimate.</p> <hr/> <h4 id="beyond-point-estimates-what-else-can-we-do-with-the-posterior"><strong>Beyond Point Estimates: What Else Can We Do with the Posterior?</strong></h4> <p>The posterior distribution is far more than just a tool for calculating point estimates. It encapsulates the full range of uncertainty about \(\theta\) and opens up a variety of analytical possibilities. Here are a few ways we can make use of the posterior:</p> <h5 id="visualize-uncertainty"><strong>Visualize Uncertainty</strong></h5> <ul> <li><strong>Means</strong>: One of the most powerful features of the posterior distribution is its ability to represent uncertainty. By plotting the posterior, we can visually assess how concentrated or spread out our beliefs about \(\theta\) are.</li> <li><strong>Mental Image</strong>: Imagine you’re standing at the top of a mountain, looking at a wide valley. The <strong>posterior distribution</strong> is like the shape of the valley, and the <strong>height of the valley</strong> at each point shows how likely that value of \(\theta\) is. A tall peak indicates a strong belief in that value, while a flatter, broader area indicates more uncertainty.</li> <li><strong>When to Use</strong>: Visualizing uncertainty helps you understand not just where the most likely value lies, but also how uncertain we are about that estimate. A wide, flat posterior suggests we’re less confident about \(\theta\), while a narrow, tall one suggests we’re very confident.</li> </ul> <h5 id="construct-credible-intervals"><strong>Construct Credible Intervals</strong></h5> <ul> <li><strong>Means</strong>: A <strong>credible interval</strong> is the Bayesian equivalent of a confidence interval.</li> <li><strong>Mental Image</strong>: Think of a credible interval as a <strong>fence</strong> that you build around the values of \(\theta\) that you believe are most likely. If you set a 95% credible interval, the fence will surround the areas where there’s a 95% chance that \(\theta\) falls within, based on the data.</li> <li><strong>When to Use</strong>: Credible intervals are great when you want a <strong>range of plausible values</strong>. It’s like saying, “We’re 95% confident that \(\theta\) lies somewhere in this range.” The fence keeps out the outliers and shows you where the most likely values lie.</li> </ul> <h5 id="make-decisions-using-loss-functions"><strong>Make Decisions Using Loss Functions</strong></h5> <ul> <li><strong>Means</strong>: Bayesian decision theory provides a framework for making decisions based on the posterior distribution, incorporating a specific loss function.</li> <li><strong>Mental Image</strong>: Imagine you’re a chess player deciding on the best move based on the board’s current state. The <strong>loss function</strong> is like your strategy guide, telling you which move will minimize your risk or maximize your reward. In the case of Bayesian decision theory, the <strong>posterior distribution</strong> is your chessboard, and the <strong>loss function</strong> guides you to the best move. <ul> <li>For <strong>mean-squared error</strong>, it’s like choosing the move that <strong>optimizes</strong> your position across the entire game (this corresponds to the <strong>posterior mean</strong>).</li> <li>For <strong>0-1 loss</strong>, you’re making a more <strong>focused decision</strong>, like trying to choose the most <strong>immediate</strong> or <strong>most probable</strong> move (this corresponds to the <strong>MAP estimate</strong>).</li> </ul> </li> <li><strong>When to Use</strong>: Loss functions help you make decisions based on the costs or benefits of various choices. If you’re optimizing for accuracy and minimizing error, go with the posterior mean. If you’re trying to maximize the most likely outcome, go with the MAP.</li> </ul> <p>These tools allow for flexible, data-driven decision-making, enabling us to quantify uncertainty and select the best possible estimate of \(\theta\) based on our specific objectives.</p> <hr/> <h5 id="conclusion"><strong>Conclusion</strong></h5> <p>In this post, we explored the concepts of <strong>conjugate priors</strong> and <strong>Bayesian point estimates</strong> through the lens of a coin-flipping example. Conjugate priors simplify Bayesian updating by keeping the posterior distribution within the same family as the prior. Meanwhile, point estimates and posterior analysis allow us to extract actionable insights and communicate uncertainty effectively.</p> <p>By mastering these foundational concepts, we’re now equipped to apply Bayesian inference to a variety of real-world problems. But, if you feel like you’re still struggling to link all the pieces together and form a high-level view of what’s happening, you’re not alone—I felt the same way too. So, next, we’ll dive into Bayesian decision theory and see how all these concepts connect, helping us make predictions for our ML problems at hand. Stay tuned!</p> <h5 id="references"><strong>References</strong></h5>]]></content><author><name></name></author><category term="ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[Learn how conjugate priors streamline Bayesian inference and discover ways to summarize posterior distributions using Bayes point estimates.]]></summary></entry><entry><title type="html">Doubling Trick - A Clever Strategy to Handle Unknown Horizons</title><link href="https://monishver11.github.io/blog/2025/doubling-trick/" rel="alternate" type="text/html" title="Doubling Trick - A Clever Strategy to Handle Unknown Horizons"/><published>2025-01-25T17:38:00+00:00</published><updated>2025-01-25T17:38:00+00:00</updated><id>https://monishver11.github.io/blog/2025/doubling-trick</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/doubling-trick/"><![CDATA[<p>Online learning algorithms often rely on carefully chosen parameters, such as the learning rate (\(\eta\)), to achieve good performance. However, many theoretical analyses assume that the total time horizon (\(T\)) is known in advance. In practical scenarios, this is rarely the case.</p> <p>The <strong>Doubling Trick</strong> is a clever method to overcome this limitation. By dividing time into intervals of exponentially increasing lengths and resetting parameters at the start of each interval, this method ensures that the algorithm performs almost as well as if \(T\) were known from the beginning.</p> <hr/> <h5 id="why-do-we-need-the-doubling-trick"><strong>Why Do We Need the Doubling Trick?</strong></h5> <p>Imagine you’re tasked with predicting the weather for the next \(T\) days using an algorithm. If you knew \(T\), you could optimize your algorithm’s parameters to minimize prediction errors. But what if you don’t know how long you’ll be predicting for? Setting parameters without knowing \(T\) can lead to suboptimal performance.</p> <p>The Doubling Trick resolves this problem by <strong>resetting the algorithm at specific intervals</strong>. These intervals grow exponentially, ensuring that the algorithm adapts dynamically without sacrificing much performance.</p> <h5 id="the-idea-behind-the-doubling-trick"><strong>The Idea Behind the Doubling Trick</strong></h5> <p>The Doubling Trick divides time into periods of exponentially increasing lengths:</p> \[I_k = [2^k, 2^{k+1} - 1],\] <p>where \(k = 0, 1, 2, \dots\) represents the interval index and \(T \geq 2^n-1\) [Why?]. Each interval is twice as long as the previous one. For example:</p> <ul> <li>\(I_0 = [1, 1]\) (length = 1),</li> <li>\(I_1 = [2, 3]\) (length = 2),</li> <li>\(I_2 = [4, 7]\) (length = 4),</li> <li>\(I_3 = [8, 15]\) (length = 8),</li> <li>and so on.</li> </ul> <h5 id="steps-in-the-doubling-trick"><strong>Steps in the Doubling Trick</strong></h5> <ol> <li> <p><strong>Divide Time into Intervals</strong>: Time is divided into intervals of lengths \(1, 2, 4, 8, \dots\). These intervals grow exponentially, covering the entire time horizon \(T\).</p> </li> <li> <p><strong>Choose Parameters for Each Interval</strong>: At the start of each interval, parameters (e.g., the learning rate \(\eta_k\)) are chosen based on the length of the interval. For instance, the learning rate could be set as:</p> \[\eta_k = \sqrt{\frac{8 \log N}{2^k}},\] <p>where \(N\) is the number of options (or experts) the algorithm is learning from.</p> </li> <li> <p><strong>Reset the Algorithm</strong>: The algorithm is reset at the beginning of each interval, treating it as a fresh start.</p> </li> <li> <p><strong>Run the Algorithm Independently in Each Interval</strong>: The algorithm operates independently in each interval, accumulating loss or regret for that specific period.</p> </li> <li> <p><strong>Sum Up Regret Across Intervals</strong>: After \(T\) rounds, the total regret is the sum of regrets from all intervals.</p> </li> </ol> <hr/> <h4 id="regret-bound-with-the-doubling-trick"><strong>Regret Bound with the Doubling Trick</strong></h4> <h5 id="theorem"><strong><mark>Theorem</mark></strong></h5> <p>Assume the same conditions as those in the Exponential Weighted Average Algorithm. For any total time horizon \(T\), the regret achieved by the Doubling Trick satisfies:</p> \[\text{Regret}(T) \leq \frac{\sqrt{2}}{\sqrt{2}-1} \cdot \sqrt{\frac{T}{2} \log N} + \sqrt{\log N / 2}\] <p>This result demonstrates that the Doubling Trick achieves regret bounds that are only slightly worse (by a constant factor) than if the total time horizon \(T\) were known in advance.</p> <h5 id="proof-sketch"><strong><mark>Proof Sketch</mark></strong></h5> <p><strong>Setup</strong></p> <ol> <li> <p><strong>Time Intervals</strong>:<br/> Divide the time horizon \(T\) into intervals \(I_k = [2^k, 2^{k+1} - 1]\), where \(k \in \{0, 1, \dots, n\}\) and \(n = \lfloor \log_2(T + 1) \rfloor\).<br/> Each interval \(I_k\) has length \(2^k\), and the total time horizon \(T\) satisfies \(T \geq 2^n - 1\).</p> </li> <li> <p><strong>Learning Rate</strong>:<br/> Within each interval \(I_k\), the learning rate is chosen as:</p> \[\eta_k = \sqrt{\frac{8 \log N}{2^k}}\] </li> </ol> <p>For any interval \(I_k\), the regret is bounded using:</p> \[L_{I_k} - \min_{i \in [N]} L_{I_k, i} \leq \sqrt{\frac{2^k}{2} \log N}\] <p>Here:</p> <ul> <li>\(L_{I_k}\) is the total loss incurred by the algorithm in interval \(I_k\).</li> <li>\(L_{I_k, i}\) is the total loss incurred by expert \(i\) in interval \(I_k\).</li> </ul> <p>The total loss after \(T\) rounds is the sum of losses over all intervals:</p> \[L_T = \sum_{k=0}^n L_{I_k}\] <p>The total regret can then be expressed as:</p> \[R_T = \sum_{k=0}^n \left( L_{I_k} - \min_{i \in [N]} L_{I_k, i} \right)\] <p>Substituting the bound for \(L_{I_k} - \min_{i \in [N]} L_{I_k, i}\):</p> \[R_T \leq \sum_{k=0}^n \sqrt{\frac{2^k}{2} \log N}\] <p><strong>Simplifying the Geometric Sum</strong></p> <p>The term \(\sum_{k=0}^n \sqrt{\frac{2^k}{2} \log N}\) can be simplified as:</p> \[\sum_{k=0}^n \sqrt{\frac{2^k}{2} \log N} = \sqrt{\frac{\log N}{2}} \cdot \sum_{k=0}^n \sqrt{2^k}\] <p>The sum \(\sum_{k=0}^n \sqrt{2^k}\) forms a geometric series:</p> \[\sum_{k=0}^n 2^{k/2} = \frac{2^{(n+1)/2} - 1}{\sqrt{2} - 1} \tag{How?}\] \[\leq \frac{\sqrt{2} \sqrt{T + 1} - 1}{\sqrt{2} - 1}\] \[\leq \frac{\sqrt{2} (\sqrt{T} + 1) - 1}{\sqrt{2} - 1}\] \[= \frac{\sqrt{2} \sqrt{T}}{\sqrt{2} - 1} + 1\] <p>Plugging this result back into the regret expression, we get:</p> \[\text{Regret}(T) \leq \frac{\sqrt{2}}{\sqrt{2}-1} \cdot \sqrt{\frac{T}{2} \log N} + \sqrt{\log N / 2}\] <p>This establishes the regret bound for the EWA algorithm with the doubling trick.</p> <hr/> <p>There is one question to address before we can confidently say we fully understand this proof, specifically the equation tagged with <strong>‘How?’</strong>. However, the answer is actually quite simple.</p> <p>The sum you are dealing with is of the form:</p> \[S_n = \sum_{k=0}^n 2^{k/2}\] <p>To solve this, we notice that the series is geometric in nature, where each term is of the form \(2^{k/2}\). This suggests a geometric series with the first term \(a = 2^0 = 1\) and the common ratio \(r = 2^{1/2} = \sqrt{2}\).</p> <p>A standard formula for the sum of the first \(n\) terms of a geometric series is:</p> \[S_n = \frac{a(r^{n+1} - 1)}{r - 1}\] <p>Substituting \(a = 1\) and \(r = \sqrt{2}\), we get:</p> \[S_n = \frac{(\sqrt{2})^{n+1} - 1}{\sqrt{2} - 1}\] <p>Now, simplify \((\sqrt{2})^{n+1}\) to \(2^{(n+1)/2}\):</p> \[S_n = \frac{2^{(n+1)/2} - 1}{\sqrt{2} - 1}\] <p>Thus, we arrive at the desired result:</p> \[\sum_{k=0}^n 2^{k/2} = \frac{2^{(n+1)/2} - 1}{\sqrt{2} - 1}\] <p>Now we’re all set. Yes. Next, we’ll tackle a few more questions and wrap up this blog.</p> <p><strong>Note:</strong> The \(O(\sqrt{T})\) dependency on \(T\) presented in this bound cannot be improved for general loss functions. This is because the case we discussed here is the Exponentiated Weighted Average (EWA), where we assumed a convex loss with respect to its first parameter. The Doubling Trick is simply an additional technique applied on top of this, and that’s all.</p> <hr/> <h5 id="why-does-the-doubling-trick-work"><strong>Why Does the Doubling Trick Work?</strong></h5> <ol> <li> <p><strong>Exponential Growth Covers Any Horizon</strong>: By doubling the length of intervals, the Doubling Trick ensures that any unknown time horizon \(T\) will fall within the union of the intervals.</p> </li> <li> <p><strong>Dynamic Parameter Adjustment</strong>: Since parameters are reset at the start of each interval, the algorithm adapts to the growing time horizon. This avoids overcommitting to a parameter setting based on an incorrect estimate of \(T\).</p> </li> <li> <p><strong>Minimal Regret Accumulation</strong>: The regret within each interval is bounded, and the total regret is the sum of these bounds. Using properties of geometric sums, the total regret remains manageable.</p> </li> </ol> <h5 id="advantages-of-the-doubling-trick"><strong>Advantages of the Doubling Trick</strong></h5> <ol> <li> <p><strong>No Prior Knowledge of \(T\)</strong>: The Doubling Trick eliminates the need to know \(T\) in advance, making it practical for real-world applications.</p> </li> <li> <p><strong>Near-Optimal Performance</strong>: The regret bound is close to the best possible bound achievable with full knowledge of \(T\).</p> </li> <li> <p><strong>Simplicity</strong>: The method is straightforward to implement and applies to a wide range of online learning algorithms.</p> </li> </ol> <h5 id="applications-of-the-doubling-trick"><strong>Applications of the Doubling Trick</strong></h5> <p>The Doubling Trick, while commonly used in regret minimization, also finds applications in scenarios where the time horizon is uncertain or unknown. Here are a few key areas where this trick proves useful;</p> <p>[I have this question but haven’t come up with a convincing answer or a way to phrase it clearly yet. I’ll update once I find it.]</p> <hr/> <h5 id="conclusion"><strong>Conclusion</strong></h5> <p>The Doubling Trick is a powerful and versatile technique that addresses the challenge of unknown time horizons in online learning. By dividing time into exponentially growing intervals and resetting parameters dynamically, it achieves near-optimal regret bounds with minimal computational overhead. This method underscores the elegance of combining mathematical rigor with practical adaptability.</p> <p>Next, we’ll define a general setting for online learning and briefly touch on the different setups within it. Stay tuned for more!</p> <h5 id="references"><strong>References</strong></h5> <ul> <li></li> </ul>]]></content><author><name></name></author><category term="ADV-ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[Discover how the Doubling Trick enables online algorithms to adapt to unknown horizons, maintaining competitive regret bounds.]]></summary></entry><entry><title type="html">Exponential Weighted Average Algorithm</title><link href="https://monishver11.github.io/blog/2025/EWA/" rel="alternate" type="text/html" title="Exponential Weighted Average Algorithm"/><published>2025-01-25T05:28:00+00:00</published><updated>2025-01-25T05:28:00+00:00</updated><id>https://monishver11.github.io/blog/2025/EWA</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/EWA/"><![CDATA[<p>The <strong>Exponential Weighted Average Algorithm (EWAA)</strong> is an online learning algorithm that provides elegant guarantees for minimizing regret in adversarial settings. It extends the principles of the Weighted Majority Algorithm by incorporating exponential weight updates, making it particularly effective for handling convex loss functions.</p> <h4 id="how-the-exponential-weighted-average-algorithm-works"><strong>How the Exponential Weighted Average Algorithm Works</strong></h4> <p>At its core, the EWAA maintains and updates weights for a set of experts, similar to the Weighted Majority Algorithm. However, it uses an <strong>exponential weighting scheme</strong> to achieve better bounds on regret, especially for convex losses.</p> <h5 id="steps-of-the-algorithm"><strong>Steps of the Algorithm</strong></h5> <p><strong>Initialization</strong> Set initial weights for all \(N\) experts:</p> \[w_{1,i} = 1, \quad \forall i \in \{1, \dots, N\}\] <p><strong>Prediction at Round \(t\)</strong></p> <ul> <li>Observe the predictions \(\hat{y}_{t,i}\) from all experts.</li> <li>Compute the aggregate prediction as a weighted average:</li> </ul> \[\hat{y}_t = \frac{\sum_{i=1}^N w_{t,i} \cdot \hat{y}_{t,i}}{\sum_{i=1}^N w_{t,i}}\] <p><strong>Update Weights</strong></p> <ul> <li>After receiving the true outcome \(y_t\), update the weights for the next round:</li> </ul> \[w_{t+1,i} = w_{t,i} \cdot e^{-\eta L(\hat{y}_{t,i}, y_t)}\] <ul> <li>The weight update can also be expressed directly using the <strong>cumulative loss</strong> \(L_t(i)\) of expert \(i\) after \(t\) rounds:</li> </ul> \[w_{t+1,i} = e^{-\eta L_t(i)}\] <p><strong><mark>Key Points to Highlight:</mark></strong></p> <p><strong>Simplification of Weight Updates</strong> While the equation appears to involve \(w_{t,i}\) in the update, the final weight \(w_{t+1,i}\) depends only on the cumulative loss \(L_t(i)\) and not on previous weights.<br/> This is why it shows \(w_{t+1,i} = e^{-\eta L_t(i)}\), as the weights can be normalized afterward.</p> <p><strong>Interpretation of \(e^{-x}\)</strong> The term \(e^{-\eta x}\) decreases exponentially as \(x\) (loss) increases.<br/> This ensures poorly performing experts are rapidly down-weighted. A plot of \(e^{-x}\) can visually illustrate this decay.</p> <p>If you’re still unclear about the final weight update rule, keep reading — the explanation below should clarify things.</p> <hr/> <p>We start from the original weight update equation and simplify it step by step to express it in terms of the <strong>cumulative loss</strong>.</p> <p><strong>1. Original Weight Update</strong> The weight update at time \(t+1\) is defined as:</p> \[w_{t+1,i} = w_{t,i} \cdot e^{-\eta L(\hat{y}_{t,i}, y_t)}\] <p><strong>2. Recursive Application</strong> Expanding the recursion over all previous rounds \(1, \dots, t\):</p> \[w_{t+1,i} = w_{1,i} \cdot e^{-\eta L(\hat{y}_{1,i}, y_1)} \cdot e^{-\eta L(\hat{y}_{2,i}, y_2)} \cdots e^{-\eta L(\hat{y}_{t,i}, y_t)}\] <p><strong>3. Simplify the Product</strong> Using the property of exponents \(a^x \cdot a^y = a^{x+y}\):</p> \[w_{t+1,i} = w_{1,i} \cdot e^{-\eta \sum_{s=1}^t L(\hat{y}_{s,i}, y_s)}\] <p><strong>4. Initial Weights</strong> Since the initial weights are set to \(w_{1,i} = 1\) for all experts, this simplifies to:</p> \[w_{t+1,i} = e^{-\eta \sum_{s=1}^t L(\hat{y}_{s,i}, y_s)}\] <p><strong>5. Cumulative Loss Definition</strong> Define the <strong>cumulative loss</strong> of expert \(i\) after \(t\) rounds as:</p> \[L_t(i) = \sum_{s=1}^t L(\hat{y}_{s,i}, y_s)\] <p><strong>6. Final Simplified Form</strong> Substituting \(L_t(i)\) into the equation gives the simplified weight update:</p> \[w_{t+1,i} = e^{-\eta L_t(i)}\] <p><strong><mark>Key Insight:</mark></strong></p> <ul> <li>The weight at time \(t+1\) depends only on the <strong>cumulative loss</strong> \(L_t(i)\), not on the individual losses at previous rounds or the intermediate weights.</li> <li>This simplification is possible because the update rule is <strong>multiplicative</strong>, and the cumulative loss naturally aggregates all penalties from previous rounds.</li> </ul> <hr/> <h5 id="theorem-regret-bound-for-ewaa"><strong>Theorem: Regret Bound for EWAA</strong></h5> <p>Let \(L(y, y')\) be a convex loss function in its first argument, taking values in \([0, 1]\). For any \(\eta &gt; 0\) and any sequence of labels \(y_1, \dots, y_T \in \mathcal{Y}\), the regret of the Exponential Weighted Average Algorithm satisfies:</p> \[R_T \leq \frac{\log N}{\eta} + \frac{\eta T}{8}\] <p>Here, the regret is defined as the difference between the total loss of the algorithm and the loss of the best expert:</p> \[R_T = \sum_{t=1}^T L(\hat{y}_t, y_t) - \min_{i \in [N]} \sum_{t=1}^T L(\hat{y}_{t,i}, y_t)\] <p><strong>Optimized Learning Rate</strong></p> <p>By choosing \(\eta = \sqrt{\frac{8 \log N}{T}}\), we minimize the regret bound, resulting in: \(R_T \leq \sqrt{\frac{T}{2} \log N}\)</p> <p>This demonstrates that the regret grows logarithmically with the number of experts \(N\) and sublinearly with the number of time steps \(T\), indicating the efficiency of EWAA.</p> <p><strong>Convex Loss Function in Its First Argument</strong></p> <p>Before we dive deeper, let’s clarify what we mean by a <strong>convex loss function in its first argument</strong>. In this context, the phrase refers to the loss function \(L(y, y')\) being convex with respect to its first argument, \(y\) (which could be the true label or the model output).</p> <p>To break it down:</p> <ul> <li>The loss function \(L(y, y')\) measures the difference between the true label \(y\) and the predicted label \(y'\).</li> <li><strong>Convexity in the first argument</strong> means that for any fixed value of \(y'\), the function \(L(y, y')\) is convex in \(y\). This implies that as you vary the predicted label \(y'\), the loss function increases in a “bowl-shaped” manner when considering its first argument \(y\). This property is important for optimization because convex functions are easier to minimize, ensuring that algorithms like EWAA can efficiently adjust to minimize cumulative loss over time.</li> </ul> <p>In mathematical terms, for any fixed \(y'\), the function \(L(y, y')\) satisfies the condition of convexity:</p> \[L(\lambda y_1 + (1-\lambda) y_2, y') \leq \lambda L(y_1, y') + (1-\lambda) L(y_2, y')\] <p>for any \(y_1, y_2 \in \mathcal{Y}\) and \(\lambda \in [0, 1]\).</p> <hr/> <h4 id="proof-of-the-regret-bound"><strong>Proof of the Regret Bound</strong></h4> <p>Define the <strong>potential function</strong>:</p> \[\Phi_t = \log \left( \sum_{i=1}^N w_{t,i} \right)\] <p>The goal is to derive an upper bound and a lower bound for \(\Phi_t\), and then combine them to establish the regret bound.</p> <h5 id="upper-bound"><strong>Upper Bound</strong></h5> <p><strong>Step 1: Change in Potential Function</strong></p> <p>From the weight update rule:</p> \[w_{t+1,i} = w_{t,i} e^{-\eta L(\hat{y}_{t,i}, y_t)},\] <p>we can write the change in the potential function as:</p> \[\Phi_{t+1} - \Phi_t = \log \left( \frac{\sum_{i=1}^N w_{t,i} e^{-\eta L(\hat{y}_{t,i}, y_t)}}{\sum_{i=1}^N w_{t,i}} \right) = \log \left( \mathbb{E}_{p_t}[e^{-\eta X}] \right),\] <p>where \(X = -L(\hat{y}_{t,i}, y_t) \in [-1, 0]\) and \(p_t(i) = \frac{w_{t,i}}{\sum_{j=1}^N w_{t,j}}\) is the probability distribution over experts.</p> <p><strong>Step 2: Centering the Random Variable</strong></p> <p>Define \(X = -L(\hat{y}_{t,i}, y_t)\), where \(X \in [-1, 0]\). The expectation can be centered around its mean:</p> \[\mathbb{E}_{p_t} \left[ e^{-\eta L(\hat{y}_{t,i}, y_t)} \right] = \mathbb{E}_{p_t} \left[ e^{\eta (X - \mathbb{E}_{p_t}[X])} \right] e^{\eta \mathbb{E}_{p_t}[X]}\] <p>Substituting this back, we have:</p> \[\Phi_{t+1} - \Phi_t = \log \mathbb{E}_{p_t} \left[ e^{\eta (X - \mathbb{E}_{p_t}[X])} \right] + \eta \mathbb{E}_{p_t}[X]\] <p><strong>Step 3: Applying Hoeffding’s Lemma</strong></p> <p>By Hoeffding’s Lemma, for any centered random variable \(X - \mathbb{E}_{p_t}[X]\) bounded in \([-1, 0]\):</p> \[\log \mathbb{E}_{p_t} \left[ e^{\eta (X - \mathbb{E}_{p_t}[X])} \right] \leq \frac{\eta^2}{8}\] <p>Substituting this bound:</p> \[\Phi_{t+1} - \Phi_t \leq \eta \mathbb{E}_{p_t}[X] + \frac{\eta^2}{8}\] <p><strong>Step 4: Substituting \(X = -L(\hat{y}_{t,i}, y_t)\)</strong></p> <p>Recall that \(X = -L(\hat{y}_{t,i}, y_t)\), so \(\mathbb{E}_{p_t}[X] = -\mathbb{E}_{p_t}[L(\hat{y}_{t,i}, y_t)]\). Substituting:</p> \[\Phi_{t+1} - \Phi_t \leq -\eta \mathbb{E}_{p_t}[L(\hat{y}_{t,i}, y_t)] + \frac{\eta^2}{8}\] <p><strong>Step 5: Applying Convexity of \(L\)</strong></p> <p>By the convexity of \(L\) in its first argument:</p> \[\mathbb{E}_{p_t}[L(\hat{y}_{t,i}, y_t)] \geq L(\mathbb{E}_{p_t}[\hat{y}_{t,i}], y_t) = L(\hat{y}_t, y_t),\] <p>where \(\hat{y}_t = \mathbb{E}_{p_t}[\hat{y}_{t,i}]\) is the prediction of the algorithm. Using this:</p> \[\Phi_{t+1} - \Phi_t \leq -\eta L(\hat{y}_t, y_t) + \frac{\eta^2}{8}\] <p>[How? - Unclear]</p> <p><strong>Step 6: Summing Over \(t = 1, \dots, T\)</strong></p> <p>Summing this inequality over all time steps:</p> \[\sum_{t=1}^T (\Phi_{t+1} - \Phi_t) \leq -\eta \sum_{t=1}^T L(\hat{y}_t, y_t) + \frac{\eta^2 T}{8}\] <p>The left-hand side telescopes:</p> \[\Phi_{T+1} - \Phi_1 \leq -\eta \sum_{t=1}^T L(\hat{y}_t, y_t) + \frac{\eta^2 T}{8}\] <p><strong>Final Upper Bound</strong></p> <p>This establishes the <strong>upper bound</strong> for the change in potential:</p> \[\Phi_{T+1} - \Phi_1 \leq -\eta \sum_{t=1}^T L(\hat{y}_t, y_t) + \frac{\eta^2 T}{8}\] <hr/> <h5 id="lower-bound"><strong>Lower Bound</strong></h5> <p><strong>Step 1: Potential Function at \(T+1\)</strong></p> <p>From the definition of the potential function:</p> \[\Phi_{T+1} = \log \left( \sum_{i=1}^N w_{T+1,i} \right),\] <p>where \(w_{T+1,i}\) is the weight of expert \(i\) at time \(T+1\).</p> <p><strong>Step 2: Weight Update Rule</strong></p> <p>Using the weight update rule:</p> \[w_{T+1,i} = e^{-\eta L_{T,i}},\] <p>where \(L_{T,i} = \sum_{t=1}^T L(\hat{y}_{t,i}, y_t)\) is the <strong>cumulative loss</strong> of expert \(i\) up to time \(T\).</p> <p>Substituting into the potential function:</p> \[\Phi_{T+1} = \log \left( \sum_{i=1}^N e^{-\eta L_{T,i}} \right).\] <p><strong>Step 3: Lower Bound for Log-Sum-Exp</strong></p> <p>Applying the <strong>lower bound for the log-sum-exp function</strong>:</p> \[\log \left( \sum_{i=1}^N e^{-\eta L_{T,i}} \right) \geq \max_{i \in [N]} \left( -\eta L_{T,i} \right) + \log N.\] <p>Rewriting:</p> \[\Phi_{T+1} \geq -\eta \min_{i \in [N]} L_{T,i} + \log N,\] <p>where \(\min_{i \in [N]} L_{T,i}\) is the smallest cumulative loss among all experts.</p> <p><strong>Note:</strong> If this isn’t clear, refer to the <a href="https://gregorygundersen.com/blog/2020/02/09/log-sum-exp/">log-sum-exp</a> trick—it’s essentially the same approach we’ve used here.</p> <p><strong>Step 4: Initial Potential Function</strong></p> <p>From the initial condition, the potential function at \(t = 1\) is:</p> \[\Phi_1 = \log N\] <p><strong>Step 5: Combining Results</strong></p> <p>Combining the expressions for \(\Phi_{T+1}\) and \(\Phi_1\), we obtain:</p> \[\Phi_{T+1} - \Phi_1 \geq -\eta \min_{i \in [N]} L_{T,i}\] <p><strong>Final Lower Bound</strong></p> <p>Thus, the lower bound for the change in potential is:</p> \[\Phi_{T+1} - \Phi_1 \geq -\eta \min_{i \in [N]} L_{T,i}\] <hr/> <h5 id="combining-bounds"><strong>Combining Bounds</strong></h5> <p>From the upper and lower bounds:</p> \[-\eta \min_{i \in [N]} L_{T,i} \leq -\eta \sum_{t=1}^T L(\hat{y}_t, y_t) + \frac{\eta^2 T}{8}\] <p>Rearranging terms:</p> \[\sum_{t=1}^T L(\hat{y}_t, y_t) - \min_{i \in [N]} L_{T,i} \leq \frac{\log N}{\eta} + \frac{\eta T}{8}\] <p>Thus, the regret satisfies:</p> \[R_T \leq \frac{\log N}{\eta} + \frac{\eta T}{8}\] <p><strong>Note:</strong> <strong>\(\min_{i \in [N]} L_{T,i}\) and Its Meaning</strong></p> <p>The term \(\min_{i \in [N]} L_{T,i}\) refers to the <strong>minimum cumulative loss</strong> among all the experts (or models) after \(T\) rounds. Specifically:</p> <ul> <li>\(L_{T,i}\) is the cumulative loss of expert (or model) \(i\) after \(T\) rounds.</li> <li>\(\min_{i \in [N]} L_{T,i}\) represents the smallest cumulative loss incurred by any expert over the \(T\) rounds.</li> </ul> <p>This is the term we need in our calculation to compute the regret, right!</p> <p><strong><mark>Key Takeaways:</mark></strong></p> <ul> <li>The <strong>regret bound</strong> of the EWAA is a function of both the learning rate \(\eta\) and the time horizon \(T\).</li> <li>By choosing \(\eta = \sqrt{\frac{8 \log N}{T}}\), the regret grows sublinearly with \(T\) and logarithmically with \(N\), ensuring the algorithm’s efficiency.</li> </ul> <hr/> <h5 id="advantages-and-disadvantages-of-ewaa"><strong>Advantages and Disadvantages of EWAA</strong></h5> <p><strong>Advantages</strong></p> <ol> <li><strong>Strong Theoretical Guarantees</strong>: <ul> <li>The regret bound for the <strong>(EWAA)</strong> is logarithmic in the number of experts \(N\) and sublinear in the number of time steps \(T\). This means that even as the number of experts or rounds increases, the regret grows slowly, offering a strong theoretical guarantee on performance. [Why? - Think]</li> </ul> </li> <li><strong>Applicability to Convex Losses</strong>: <ul> <li>Unlike algorithms specifically tailored for binary losses, EWAA can handle <strong>convex loss functions</strong>. This makes it a more versatile algorithm since convex losses are more general and can cover a wider range of applications beyond binary classification.</li> </ul> </li> <li><strong>Weight Adaptivity</strong>: <ul> <li>The <strong>exponential weight updates</strong> in EWAA ensure that poor-performing experts are penalized efficiently over time. This adaptive mechanism allows the algorithm to focus more on better-performing experts, while discouraging the influence of worse-performing ones, improving its overall performance.</li> </ul> </li> </ol> <p><strong>Disadvantages</strong></p> <ul> <li><strong>Requires Knowledge of Horizon \(T\)</strong>: <ul> <li>A disadvantage of the EWAA is that it requires knowledge of the <strong>horizon</strong> \(T\), which refers to the total number of rounds or time steps the algorithm will run. Specifically, the learning rate \(\eta\) in the regret bound often depends on \(T\) (for example, \(\eta\) might be chosen as \(\frac{1}{\sqrt{T}}\)).</li> <li>This means that to optimize the regret bound, you need to have some insight or knowledge about the total number of rounds \(T\) in advance. This can be a significant limitation in practical applications, where \(T\) is not always known or fixed in advance. In real-world scenarios, you might need to adapt to changing environments without prior knowledge of how long the process will last, making it challenging to choose the best parameters like \(\eta\).</li> </ul> </li> </ul> <hr/> <p>Before we wrap up, let’s take a step back and get a clearer picture of the whole thing:</p> <h5 id="why-convexity-helps-in-ewaa"><strong><mark>Why Convexity Helps in EWAA</mark></strong></h5> <ol> <li><strong>Optimization and Regret Minimization</strong>: <ul> <li>The convexity of the loss function with respect to the predicted labels \(y\) (the first argument) ensures that the algorithm can effectively minimize cumulative loss. Since convex functions have a single global minimum, optimization is straightforward and guarantees convergence toward a solution with low regret.</li> </ul> </li> <li><strong>Exponential Weight Updates</strong>: <ul> <li>In EWAA, the weight updates are based on the <strong>exponential</strong> of the loss, and convexity allows these updates to be well-behaved. Specifically, since the loss function increases in a convex manner as the difference between \(y\) and \(y'\) increases, the exponential weight updates ensure that poorly performing experts are penalized more heavily. This ensures that the algorithm focuses on the most promising experts while reducing the influence of poor ones.</li> </ul> </li> <li><strong>Efficient Learning</strong>: <ul> <li>Convexity ensures that the loss function grows in a predictable manner, which helps in adjusting the weights efficiently across time steps. This is important for the overall performance of the algorithm, as it leads to effective adaptation and faster convergence to a good solution.</li> </ul> </li> <li><strong>Theoretical Guarantees</strong>: <ul> <li>The convexity property allows the <strong>theoretical regret bounds</strong> for EWAA to be derived more easily. Since convex functions have well-defined gradients and curvature properties, we can make rigorous claims about the regret bound, such as the logarithmic growth in the number of experts \(N\) and sublinear growth in the number of time steps \(T\). Without convexity, such guarantees would not be as strong or as easily established.</li> </ul> </li> </ol> <p>And, If you’re unsure about the difference between linear and sublinear growth, here’s a quick clarification:</p> <ul> <li><strong>Linear growth</strong> means the value grows at a constant rate (proportional to the parameter). Mathematically: \(f(x) = O(x)\).</li> <li><strong>Sublinear growth</strong> means the value grows at a slower rate than the parameter, such that the output doesn’t keep up at the same pace. Mathematically: \(f(x) = O(x^a)\) where \(0 &lt; a &lt; 1\), or \(f(x) = O(\log(x))\).</li> </ul> <hr/> <h5 id="conclusion"><strong>Conclusion</strong></h5> <p>The Exponential Weighted Average Algorithm provides strong guarantees for regret minimization with convex loss functions. Its use of exponential weight updates makes it both adaptable and theoretically elegant, though its dependence on the time horizon \(T\) can present practical challenges.</p> <p>In the next post, we’ll dive into the doubling trick for selecting \(\eta\) and how it improves regret bounds. Stay tuned—see you in the next one!</p> <h5 id="references"><strong>References</strong></h5> <ul> <li><a href="https://people.eecs.berkeley.edu/~bartlett/courses/281b-sp08/21.pdf">Online Learning: Halving Algorithm and Exponential Weights(Notes)</a></li> </ul>]]></content><author><name></name></author><category term="ADV-ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[Delve into the Exponential Weighted Average Algorithm, its regret bounds, and the mathematical proof ensuring efficient loss minimization.]]></summary></entry><entry><title type="html">Bayesian Machine Learning - Mathematical Foundations</title><link href="https://monishver11.github.io/blog/2025/Bayesian-ML/" rel="alternate" type="text/html" title="Bayesian Machine Learning - Mathematical Foundations"/><published>2025-01-24T14:56:00+00:00</published><updated>2025-01-24T14:56:00+00:00</updated><id>https://monishver11.github.io/blog/2025/Bayesian-ML</id><content type="html" xml:base="https://monishver11.github.io/blog/2025/Bayesian-ML/"><![CDATA[<p>When working with machine learning models, it’s crucial to understand the underlying statistical principles that drive our methods. Whether you’re a frequentist or a Bayesian, the starting point often involves a <strong>parametric family of densities</strong>. This concept forms the foundation for inference and is used to model the data we observe.</p> <h4 id="parametric-family-of-densities"><strong>Parametric Family of Densities</strong></h4> <p>A <strong>parametric family of densities</strong> is defined as a set</p> \[\{p(y \mid \theta) : \theta \in \Theta\},\] <p>where \(p(y \mid \theta)\) is a density function over some sample space \(Y\), and \(\theta\) represents a parameter in a finite-dimensional parameter space \(\Theta\).</p> <p>In simpler terms, this is a collection of probability distributions, each associated with a specific value of the parameter \(\theta\). When we refer to “density,” it’s worth noting that this can be replaced with “mass function” if we’re dealing with discrete random variables. Similarly, integrals can be replaced with summations in such cases.</p> <p>This framework is the common starting point for both <strong>classical statistics</strong> and <strong>Bayesian statistics</strong>, as it provides a structured way to think about modeling the data.</p> <h5 id="frequentist-or-classical-statistics"><strong>Frequentist or “Classical” Statistics</strong></h5> <p>In frequentist statistics, we also work with the parametric family of densities \(\{p(y \mid \theta) : \theta \in \Theta\}\), assuming that the true distribution \(p(y \mid \theta)\) governs the world we observe. This means there exists some unknown parameter \(\theta \in \Theta\) that determines the true nature of the data.</p> <p>If we had direct access to this true parameter \(\theta\), we wouldn’t need statistics at all! However, in practice, we only have a dataset, denoted as</p> \[D = \{y_1, y_2, \dots, y_n\},\] <p>where each \(y_i\) is sampled independently from the true distribution \(p(y \mid \theta)\).</p> <p>This brings us to the heart of statistics: <strong>how do we make inferences about the unknown parameter \(\theta\) using only the observed data \(D\)?</strong></p> <h5 id="point-estimation"><strong>Point Estimation</strong></h5> <p>One fundamental problem in statistics is <strong>point estimation</strong>, where the goal is to estimate the true value of the parameter \(\theta\) as accurately as possible.</p> <p>To do this, we use a <strong>statistic</strong>, denoted as \(s = s(D)\), which is simply a function of the observed data. When this statistic is designed to estimate \(\theta\), we call it a <strong>point estimator</strong>, represented as \(\hat{\theta} = \hat{\theta}(D)\).</p> <p>A <strong>good point estimator</strong> is one that is both:</p> <ul> <li><strong>Consistent</strong>: As the sample size \(n\) grows larger, the estimator \(\hat{\theta}_n\) converges to the true parameter \(\theta\).</li> <li><strong>Efficient</strong>: The estimator \(\hat{\theta}_n\) extracts the maximum amount of information about \(\theta\) from the data, achieving the best possible accuracy for a given sample size.</li> </ul> <p>One of the most popular methods for point estimation is the <strong>maximum likelihood estimator (MLE)</strong>. While we’ve already covered it, let’s revisit it through a concrete example to reinforce our understanding.</p> <h5 id="example-coin-flipping-and-maximum-likelihood-estimation"><strong>Example: Coin Flipping and Maximum Likelihood Estimation</strong></h5> <p>Let’s consider the simple yet illustrative problem of estimating the probability of a coin landing on heads.</p> <p>Here, the parametric family of mass functions is given by:</p> \[p(\text{Heads} \mid \theta) = \theta, \quad \text{where } \theta \in \Theta = (0, 1).\] <p>The parameter \(\theta\) represents the probability of the coin landing on heads. Our goal is to estimate this parameter based on observed data.</p> <p>If this seems a bit confusing, seeing \(\theta\) in two places, let’s clarify it first.</p> <p>Imagine you have a coin, and you’re curious about how “fair” it is. A perfectly fair coin has a 50% chance of landing heads or tails, but your coin might be biased. To capture this bias mathematically, you introduce a parameter, \(\theta\), which represents the probability of the coin landing on heads.</p> <p>We write this as:</p> \[p(\text{Heads} \mid \theta) = \theta\] <p>Let’s break this down with intuition:</p> <ol> <li><strong>What does \(\theta\) mean?</strong><br/> \(\theta\) is the coin’s “personality.” For example: <ul> <li>If \(\theta = 0.8\), it means the coin “loves” heads, and there’s an 80% chance it will land heads on any given flip.</li> <li>If \(\theta = 0.3\), the coin is biased toward tails, and there’s only a 30% chance of heads.</li> </ul> </li> <li> <p><strong>What does \(p(\text{Heads} \mid \theta) = \theta\) mean?</strong><br/> This equation ties the probability of getting heads to the parameter \(\theta\). It’s like saying: “The parameter \(\theta\) <em>is</em> the probability of heads.” For every coin flip, \(\theta\) directly determines the likelihood of heads.</p> </li> <li><strong>Why is this useful?</strong><br/> It simplifies modeling. Instead of treating each flip as random and unconnected, we assume there’s a fixed bias, \(\theta\), that governs the coin’s behavior. Once we observe enough flips (data), we can estimate \(\theta\) and predict future outcomes.</li> </ol> <p><strong>A relatable example might be…</strong></p> <p>Imagine a factory making coins with varying biases. Each coin is labeled with its bias, \(\theta\), ranging between 0 (always tails) and 1 (always heads). If you’re handed a coin without a label, your job is to figure out its bias by flipping it multiple times and observing the outcomes.</p> <p>This is the setup for the equation \(p(\text{Heads} \mid \theta) = \theta\). It tells us the coin’s behavior is entirely controlled by its bias, \(\theta\), and allows us to estimate it from observed data. <strong>Data and Likelihood Function</strong></p> <p>I hope that clears things up, and we’re good to proceed!</p> <hr/> <p>Suppose we observe the outcomes of \(n\) independent coin flips, represented as:</p> \[D = (\text{H, H, T, T, T, T, T, H, ... , T}),\] <p>where \(n_h\) is the number of heads, and \(n_t\) is the number of tails. Since each flip is independent, the likelihood function for the observed data is:</p> \[L_D(\theta) = p(D \mid \theta) = \theta^{n_h} (1 - \theta)^{n_t}.\] <p><strong>Log-Likelihood and Optimization</strong></p> <p>Rather than working directly with the likelihood function, which involves products and can become cumbersome, we typically maximize the <strong>log-likelihood function</strong> for computational simplicity. The log-likelihood is:</p> \[\log L_D(\theta) = n_h \log \theta + n_t \log (1 - \theta).\] <p>The <strong>maximum likelihood estimate (MLE)</strong> of \(\theta\) is the value that maximizes this log-likelihood:</p> \[\hat{\theta}_{\text{MLE}} = \underset{\theta \in \Theta}{\text{argmax}} \, \log L_D(\theta).\] <p><strong>Derivation of the MLE</strong></p> <p>To find the MLE, we compute the derivative of the log-likelihood with respect to \(\theta\), set it to zero, and solve for \(\theta\):</p> \[\frac{\partial}{\partial \theta} \big[ n_h \log \theta + n_t \log (1 - \theta) \big] = \frac{n_h}{\theta} - \frac{n_t}{1 - \theta}.\] <p>Setting this derivative to zero:</p> \[\frac{n_h}{\theta} = \frac{n_t}{1 - \theta}.\] <p>Simplifying this equation gives:</p> \[\theta = \frac{n_h}{n_h + n_t}.\] <p>Thus, the MLE for \(\theta\) is:</p> \[\hat{\theta}_{\text{MLE}} = \frac{n_h}{n_h + n_t}.\] <p><strong>Intuition Behind the MLE</strong></p> <p>The result makes intuitive sense: the MLE simply calculates the proportion of heads observed in the data. It uses the empirical frequency as the best estimate of the true probability of heads, given the observed outcomes.</p> <hr/> <p>While frequentist approaches like MLE provide a single “best” estimate for \(\theta\), Bayesian methods take a different perspective. Instead of finding a point estimate, Bayesian inference quantifies uncertainty about \(\theta\) using probability distributions. This leads to the concepts of <strong>prior distributions</strong> and <strong>posterior inference</strong>, which is what we’re going to explore next.</p> <h4 id="bayesian-statistics-an-introduction"><strong>Bayesian Statistics: An Introduction</strong></h4> <p>In the frequentist framework, the goal is to estimate the true parameter \(\theta\) using the observed data. However, <strong>Bayesian statistics</strong> takes a fundamentally different approach by introducing an important concept: the <strong>prior distribution</strong>. This addition allows us to explicitly incorporate prior beliefs about the parameter into our analysis and update them rationally as we observe new data.</p> <h5 id="the-prior-distribution-reflecting-prior-beliefs"><strong>The Prior Distribution: Reflecting Prior Beliefs</strong></h5> <p>A <strong>prior distribution</strong>, denoted as \(p(\theta)\), is a probability distribution over the parameter space \(\Theta\). It represents our belief about the value of \(\theta\) <strong>before</strong> observing any data. For instance, if we believe that \(\theta\) is more likely to lie in a specific range, we can encode this belief directly into the prior.</p> <h5 id="a-bayesian-model-combining-prior-and-data"><strong>A Bayesian Model: Combining Prior and Data</strong></h5> <p>A <strong>[parametric] Bayesian model</strong> is constructed from two key components:</p> <ol> <li>A <strong>parametric family of densities</strong> \(\{p(D \mid \theta) : \theta \in \Theta\}\) that models the likelihood of the observed data \(D\) given \(\theta\).</li> <li>A <strong>prior distribution</strong> \(p(\theta)\) on the parameter space \(\Theta\).</li> </ol> <p>These two components combine to form a <strong>joint density</strong> over \(\theta\) and \(D\):</p> \[p(D, \theta) = p(D \mid \theta) p(\theta).\] <p>This joint density encapsulates both the likelihood of the data and our prior beliefs about the parameter.</p> <h5 id="posterior-distribution-updating-beliefs"><strong>Posterior Distribution: Updating Beliefs</strong></h5> <p>The real power of Bayesian statistics lies in the ability to <strong>update prior beliefs</strong> after observing data. This is achieved through the <strong>posterior distribution</strong>, denoted as \(p(\theta \mid D)\).</p> <ul> <li>The <strong>prior distribution</strong> \(p(\theta)\) captures our initial beliefs about \(\theta\).</li> <li>The <strong>posterior distribution</strong> \(p(\theta \mid D)\) reflects our updated beliefs after observing the data \(D\).</li> </ul> <p>By applying <strong>Bayes’ rule</strong>, we can express the posterior distribution as:</p> \[p(\theta \mid D) = \frac{p(D \mid \theta) p(\theta)}{p(D)},\] <p>where:</p> <ul> <li>\(p(D \mid \theta)\) is the <strong>likelihood</strong>, capturing how well \(\theta\) explains the observed data.</li> <li>\(p(\theta)\) is the <strong>prior</strong>, encoding our initial beliefs about \(\theta\).</li> <li>\(p(D)\) is a normalizing constant, ensuring the posterior integrates to 1.</li> </ul> <h5 id="simplifying-the-posterior"><strong>Simplifying the Posterior</strong></h5> <p>When analyzing the posterior distribution, we often focus on terms that depend on \(\theta\). Dropping constant factors that are independent of \(\theta\), we write:</p> \[p(\theta \mid D) \propto p(D \mid \theta) \cdot p(\theta),\] <p>where \(\propto\) denotes proportionality.</p> <p>In practice, this allows us to analyze and work with the posterior distribution more efficiently. For instance, the <strong>maximum a posteriori (MAP) estimate</strong> of \(\theta\) is given by:</p> \[\hat{\theta}_{\text{MAP}} = \underset{\theta \in \Theta}{\text{argmax}} \, p(\theta \mid D).\] <p><strong>A Way to Think About It:</strong></p> <p>A helpful way to think of Bayesian methods is to imagine you’re trying to predict the outcome of an event, but you have some prior knowledge (or beliefs) about it. For example, let’s say you’re predicting whether a student will pass an exam, and you have prior knowledge that most students in the class have been doing well. This prior belief can be represented as a probability distribution, which reflects how confident you are about the parameter (like the likelihood of passing).</p> <p>As you collect more data (say, the student’s past performance or study hours), Bayesian methods update your belief (the prior) to form a new, updated belief, called the <strong>posterior distribution</strong>. The more data you have, the more confident the posterior becomes about the true outcome.</p> <p>So, in essence:</p> <ul> <li><strong>Prior distribution</strong> = What you believe before observing data (your initial guess).</li> <li><strong>Likelihood</strong> = How the observed data might be related to your belief.</li> <li><strong>Posterior distribution</strong> = Your updated belief after observing the data.</li> </ul> <p>In Bayesian inference, the goal is to calculate the posterior, which balances the prior belief with the observed data.</p> <hr/> <h4 id="example-bayesian-coin-flipping"><strong>Example: Bayesian Coin Flipping</strong></h4> <p>Let’s revisit the coin-flipping example, but this time from a Bayesian perspective. We start with the parametric family of mass functions:</p> \[p(\text{Heads} \mid \theta) = \theta, \quad \text{where } \theta \in \Theta = (0, 1).\] <p>To complete our Bayesian model, we also need to specify a <strong>prior distribution</strong> over \(\theta\). One common choice is the <strong>Beta distribution</strong>, which is particularly convenient for this problem.</p> <h5 id="beta-prior-distribution"><strong>Beta Prior Distribution</strong></h5> <p>The Beta distribution, denoted as \(\text{Beta}(\alpha, \beta)\), is a flexible family of distributions defined on the interval \((0, 1)\). Its density function is:</p> \[p(\theta) \propto \theta^{\alpha - 1} (1 - \theta)^{\beta - 1}.\] <div class="row justify-content-center"> <div class="col-sm-6 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Beta_Distribution-480.webp 480w,/assets/img/Beta_Distribution-800.webp 800w,/assets/img/Beta_Distribution-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/Beta_Distribution.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Beta_Distribution" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>For our coin-flipping example, we can use:</p> \[p(\theta) \propto \theta^{h - 1} (1 - \theta)^{t - 1},\] <p>where \(h\) and \(t\) represent our prior “counts” of heads and tails, respectively.</p> <p>The <strong>mean</strong> of the Beta distribution is:</p> \[\mathbb{E}[\theta] = \frac{h}{h + t},\] <p>and its <strong>mode</strong> (for \(h, t &gt; 1\)) is:</p> \[\text{Mode} = \frac{h - 1}{h + t - 2}.\] <p><strong>A Way to Think of This Distribution:</strong></p> <p>Imagine you’re trying to estimate the probability of rain on a given day in a city you’ve never visited. You don’t have any direct weather data yet, but you do have some general knowledge about the region. Based on this, you form an initial belief about how likely it is to rain—maybe you’re unsure, so you assume it’s equally likely to rain or not, or maybe you’ve heard that it’s usually dry there.</p> <ul> <li><strong>The Beta distribution</strong> helps you represent this uncertainty. It’s like a flexible tool that encodes your prior beliefs about the probability of rain, and you can adjust these beliefs based on what you know or expect. <ul> <li>If you’re totally uncertain, you might use a <strong>uniform prior</strong> (where \(\alpha = \beta = 1\)), meaning you’re equally unsure whether rain is more likely or not.</li> <li>If you’ve already heard that it tends to rain more often, say 70% of the time, you could choose \(\alpha = 7\) and \(\beta = 3\) to reflect this prior information.</li> </ul> </li> </ul> <p>As you gather more data—say, after several days of weather observations—you can update your beliefs about the likelihood of rain. Each new observation (rain or no rain) “shapes” your distribution.</p> <ul> <li> <p><strong>The mean</strong> \(\mathbb{E}[\theta] = \frac{h}{h + t}\) represents the average likelihood of rain after considering all your prior knowledge and the observed days. This is your updated best guess about how likely it is to rain on any given day.</p> </li> <li> <p><strong>The mode</strong> \(\text{Mode} = \frac{h - 1}{h + t - 2}\), which reflects the most probable value of \(\theta\) after observing data, might give you a better estimate if the weather has shown a clear tendency over time (e.g., if it’s rained most days).</p> </li> </ul> <p>In essence, the Beta distribution allows you to start with an initial belief (or no belief) about the probability of rain, and as you observe more data, you continuously refine that belief. This is what makes Bayesian inference powerful—it enables you to <strong>update</strong> your beliefs rationally based on new evidence.</p> <p><strong>Why Use the Beta Prior Distribution in this Coin Flipping Problem?</strong></p> <p>The <strong>Beta distribution</strong> is particularly well-suited for modeling probabilities in Bayesian statistics, especially in problems like coin flipping. Here are a few reasons why it’s a good choice:</p> <ol> <li> <p><strong>Support on (0, 1):</strong> The Beta distribution is defined over the interval \(\theta \in (0, 1)\), which matches the range of possible values for \(\theta\) in the coin-flipping example. Since \(\theta\) represents the probability of getting heads, it must lie between 0 and 1.</p> </li> <li><strong>Flexibility:</strong> The Beta distribution is very flexible in shaping its probability density. By adjusting the parameters \(\alpha\) and \(\beta\), we can model a wide variety of prior beliefs about \(\theta\): <ul> <li>When \(\alpha = \beta = 1\), the Beta distribution is uniform, indicating that we have no strong prior belief about whether heads or tails is more likely.</li> <li>When \(\alpha &gt; \beta\), the distribution is biased towards heads, and when \(\alpha &lt; \beta\), it is biased towards tails.</li> <li>The parameters can also reflect <strong>observed data</strong>: if you’ve already seen \(h\) heads and \(t\) tails, the Beta distribution can be chosen with \(\alpha = h + 1\) and \(\beta = t + 1\), which matches the idea of “updating” your beliefs based on the data you observe.</li> </ul> </li> <li><strong>Intuitive Interpretation:</strong> The Beta distribution is easy to interpret in terms of prior knowledge. The parameters \(\alpha\) and \(\beta\) can be seen as counts of prior observations of heads and tails, respectively. This makes it a natural choice when we have prior information or beliefs about the likelihood of different outcomes, and want to update them as new data comes in.</li> </ol> <p><strong>Note:</strong> I highly suggest taking a look at the Beta distribution graph. As \(\alpha\) increases, the distribution tends to skew towards higher values of \(\theta\) (closer to 1), reflecting a higher likelihood of success. On the other hand, as \(\beta\) increases, the distribution skews towards lower values of \(\theta\) (closer to 0), indicating a higher likelihood of failure. If \(\alpha\) and \(\beta\) are equal, the distribution is symmetric and uniform, reflecting no prior preference between the two outcomes.</p> <hr/> <p>After observing data \(D = (\text{H, H, T, T, T, H, ...})\), where \(n_h\) is the number of heads and \(n_t\) is the number of tails, we combine the <strong>prior</strong> and <strong>likelihood</strong> to obtain the <strong>posterior distribution</strong>.</p> <p>The likelihood function, based on the observed data, is:</p> \[L(\theta) = p(D \mid \theta) = \theta^{n_h} (1 - \theta)^{n_t}.\] <p>Combining the prior and likelihood, the posterior density is:</p> \[p(\theta \mid D) \propto p(\theta) \cdot L(\theta),\] <p>which simplifies to:</p> \[p(\theta \mid D) \propto \theta^{h - 1} (1 - \theta)^{t - 1} \cdot \theta^{n_h} (1 - \theta)^{n_t}.\] <p>Simplifying further, we get:</p> \[p(\theta \mid D) \propto \theta^{h - 1 + n_h} (1 - \theta)^{t - 1 + n_t}.\] <p>This posterior distribution is also a Beta distribution:</p> \[\theta \mid D \sim \text{Beta}(h + n_h, t + n_t).\] <h5 id="interpreting-the-posterior"><strong>Interpreting the Posterior</strong></h5> <p>The posterior distribution shows how our prior beliefs are updated by the observed data:</p> <ul> <li>The prior \(\text{Beta}(h, t)\) initializes our counts with \(h\) heads and \(t\) tails.</li> <li>The posterior \(\text{Beta}(h + n_h, t + n_t)\) updates these counts by adding the observed \(n_h\) heads and \(n_t\) tails.</li> </ul> <p>For example, if our prior belief was \(\text{Beta}(2, 2)\) (a uniform prior), and we observed \(n_h = 3\) heads and \(n_t = 1\) tails, the posterior would be:</p> \[\text{Beta}(2 + 3, 2 + 1) = \text{Beta}(5, 3).\] <p>This reflects our updated belief about the probability of heads after observing the data.</p> <hr/> <h5 id="wrapping-up"><strong>Wrapping Up</strong></h5> <p>In this blog, we explored the essence of Bayesian statistics, focusing on how priors, likelihoods, and posteriors interact to update our beliefs. Using the coin-flipping example, we demonstrated key Bayesian tools like the Beta distribution and how to compute posterior updates. Also, as we mentioned, there’s one more important reason for choosing the Beta distribution—its technical term is <strong>conjugate priors</strong>. In the next blog, we’ll dive deeper into this concept and explore Bayesian point estimates, comparing them to the frequentist MLE estimate. Stay tuned as we continue to build intuition and delve further into Bayesian inference! 👋</p> <h5 id="references"><strong>References</strong></h5> <ul> <li>Bayesian Statistics</li> </ul>]]></content><author><name></name></author><category term="ML-NYU"/><category term="ML"/><category term="Math"/><summary type="html"><![CDATA[A beginner-friendly guide to Bayesian statistics, explaining priors, likelihoods, posteriors, and real-world examples like coin-flipping to build a clear and intuitive understanding.]]></summary></entry></feed>